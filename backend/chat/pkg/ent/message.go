// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/manhrev/runtracking/backend/chat/pkg/ent/message"
)

// Message is the model entity for the Message schema.
type Message struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// FromUserID holds the value of the "from_user_id" field.
	FromUserID int64 `json:"from_user_id,omitempty"`
	// ToUserID holds the value of the "to_user_id" field.
	ToUserID int64 `json:"to_user_id,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
	// IsSeenFromUserID holds the value of the "is_seen_from_user_id" field.
	IsSeenFromUserID bool `json:"is_seen_from_user_id,omitempty"`
	// IsSeenToUserID holds the value of the "is_seen_to_user_id" field.
	IsSeenToUserID bool `json:"is_seen_to_user_id,omitempty"`
	// SoftDeleteFromUserID holds the value of the "soft_delete_from_user_id" field.
	SoftDeleteFromUserID bool `json:"soft_delete_from_user_id,omitempty"`
	// SoftDeleteToUserID holds the value of the "soft_delete_to_user_id" field.
	SoftDeleteToUserID bool `json:"soft_delete_to_user_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt    time.Time `json:"created_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Message) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case message.FieldIsSeenFromUserID, message.FieldIsSeenToUserID, message.FieldSoftDeleteFromUserID, message.FieldSoftDeleteToUserID:
			values[i] = new(sql.NullBool)
		case message.FieldID, message.FieldFromUserID, message.FieldToUserID:
			values[i] = new(sql.NullInt64)
		case message.FieldMessage:
			values[i] = new(sql.NullString)
		case message.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Message fields.
func (m *Message) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case message.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int64(value.Int64)
		case message.FieldFromUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field from_user_id", values[i])
			} else if value.Valid {
				m.FromUserID = value.Int64
			}
		case message.FieldToUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field to_user_id", values[i])
			} else if value.Valid {
				m.ToUserID = value.Int64
			}
		case message.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				m.Message = value.String
			}
		case message.FieldIsSeenFromUserID:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_seen_from_user_id", values[i])
			} else if value.Valid {
				m.IsSeenFromUserID = value.Bool
			}
		case message.FieldIsSeenToUserID:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_seen_to_user_id", values[i])
			} else if value.Valid {
				m.IsSeenToUserID = value.Bool
			}
		case message.FieldSoftDeleteFromUserID:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field soft_delete_from_user_id", values[i])
			} else if value.Valid {
				m.SoftDeleteFromUserID = value.Bool
			}
		case message.FieldSoftDeleteToUserID:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field soft_delete_to_user_id", values[i])
			} else if value.Valid {
				m.SoftDeleteToUserID = value.Bool
			}
		case message.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				m.CreatedAt = value.Time
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Message.
// This includes values selected through modifiers, order, etc.
func (m *Message) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// Update returns a builder for updating this Message.
// Note that you need to call Message.Unwrap() before calling this method if this Message
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Message) Update() *MessageUpdateOne {
	return NewMessageClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Message entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Message) Unwrap() *Message {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Message is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Message) String() string {
	var builder strings.Builder
	builder.WriteString("Message(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("from_user_id=")
	builder.WriteString(fmt.Sprintf("%v", m.FromUserID))
	builder.WriteString(", ")
	builder.WriteString("to_user_id=")
	builder.WriteString(fmt.Sprintf("%v", m.ToUserID))
	builder.WriteString(", ")
	builder.WriteString("message=")
	builder.WriteString(m.Message)
	builder.WriteString(", ")
	builder.WriteString("is_seen_from_user_id=")
	builder.WriteString(fmt.Sprintf("%v", m.IsSeenFromUserID))
	builder.WriteString(", ")
	builder.WriteString("is_seen_to_user_id=")
	builder.WriteString(fmt.Sprintf("%v", m.IsSeenToUserID))
	builder.WriteString(", ")
	builder.WriteString("soft_delete_from_user_id=")
	builder.WriteString(fmt.Sprintf("%v", m.SoftDeleteFromUserID))
	builder.WriteString(", ")
	builder.WriteString("soft_delete_to_user_id=")
	builder.WriteString(fmt.Sprintf("%v", m.SoftDeleteToUserID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(m.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Messages is a parsable slice of Message.
type Messages []*Message
