// Code generated by ent, DO NOT EDIT.

package message

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/manhrev/runtracking/backend/chat/pkg/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldID, id))
}

// FromUserID applies equality check predicate on the "from_user_id" field. It's identical to FromUserIDEQ.
func FromUserID(v int64) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldFromUserID, v))
}

// ToUserID applies equality check predicate on the "to_user_id" field. It's identical to ToUserIDEQ.
func ToUserID(v int64) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldToUserID, v))
}

// Message applies equality check predicate on the "message" field. It's identical to MessageEQ.
func Message(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldMessage, v))
}

// IsSeenFromUserID applies equality check predicate on the "is_seen_from_user_id" field. It's identical to IsSeenFromUserIDEQ.
func IsSeenFromUserID(v bool) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldIsSeenFromUserID, v))
}

// IsSeenToUserID applies equality check predicate on the "is_seen_to_user_id" field. It's identical to IsSeenToUserIDEQ.
func IsSeenToUserID(v bool) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldIsSeenToUserID, v))
}

// SoftDeleteFromUserID applies equality check predicate on the "soft_delete_from_user_id" field. It's identical to SoftDeleteFromUserIDEQ.
func SoftDeleteFromUserID(v bool) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldSoftDeleteFromUserID, v))
}

// SoftDeleteToUserID applies equality check predicate on the "soft_delete_to_user_id" field. It's identical to SoftDeleteToUserIDEQ.
func SoftDeleteToUserID(v bool) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldSoftDeleteToUserID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldCreatedAt, v))
}

// FromUserIDEQ applies the EQ predicate on the "from_user_id" field.
func FromUserIDEQ(v int64) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldFromUserID, v))
}

// FromUserIDNEQ applies the NEQ predicate on the "from_user_id" field.
func FromUserIDNEQ(v int64) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldFromUserID, v))
}

// FromUserIDIn applies the In predicate on the "from_user_id" field.
func FromUserIDIn(vs ...int64) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldFromUserID, vs...))
}

// FromUserIDNotIn applies the NotIn predicate on the "from_user_id" field.
func FromUserIDNotIn(vs ...int64) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldFromUserID, vs...))
}

// FromUserIDGT applies the GT predicate on the "from_user_id" field.
func FromUserIDGT(v int64) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldFromUserID, v))
}

// FromUserIDGTE applies the GTE predicate on the "from_user_id" field.
func FromUserIDGTE(v int64) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldFromUserID, v))
}

// FromUserIDLT applies the LT predicate on the "from_user_id" field.
func FromUserIDLT(v int64) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldFromUserID, v))
}

// FromUserIDLTE applies the LTE predicate on the "from_user_id" field.
func FromUserIDLTE(v int64) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldFromUserID, v))
}

// ToUserIDEQ applies the EQ predicate on the "to_user_id" field.
func ToUserIDEQ(v int64) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldToUserID, v))
}

// ToUserIDNEQ applies the NEQ predicate on the "to_user_id" field.
func ToUserIDNEQ(v int64) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldToUserID, v))
}

// ToUserIDIn applies the In predicate on the "to_user_id" field.
func ToUserIDIn(vs ...int64) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldToUserID, vs...))
}

// ToUserIDNotIn applies the NotIn predicate on the "to_user_id" field.
func ToUserIDNotIn(vs ...int64) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldToUserID, vs...))
}

// ToUserIDGT applies the GT predicate on the "to_user_id" field.
func ToUserIDGT(v int64) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldToUserID, v))
}

// ToUserIDGTE applies the GTE predicate on the "to_user_id" field.
func ToUserIDGTE(v int64) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldToUserID, v))
}

// ToUserIDLT applies the LT predicate on the "to_user_id" field.
func ToUserIDLT(v int64) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldToUserID, v))
}

// ToUserIDLTE applies the LTE predicate on the "to_user_id" field.
func ToUserIDLTE(v int64) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldToUserID, v))
}

// MessageEQ applies the EQ predicate on the "message" field.
func MessageEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldMessage, v))
}

// MessageNEQ applies the NEQ predicate on the "message" field.
func MessageNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldMessage, v))
}

// MessageIn applies the In predicate on the "message" field.
func MessageIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldMessage, vs...))
}

// MessageNotIn applies the NotIn predicate on the "message" field.
func MessageNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldMessage, vs...))
}

// MessageGT applies the GT predicate on the "message" field.
func MessageGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldMessage, v))
}

// MessageGTE applies the GTE predicate on the "message" field.
func MessageGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldMessage, v))
}

// MessageLT applies the LT predicate on the "message" field.
func MessageLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldMessage, v))
}

// MessageLTE applies the LTE predicate on the "message" field.
func MessageLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldMessage, v))
}

// MessageContains applies the Contains predicate on the "message" field.
func MessageContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldMessage, v))
}

// MessageHasPrefix applies the HasPrefix predicate on the "message" field.
func MessageHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldMessage, v))
}

// MessageHasSuffix applies the HasSuffix predicate on the "message" field.
func MessageHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldMessage, v))
}

// MessageIsNil applies the IsNil predicate on the "message" field.
func MessageIsNil() predicate.Message {
	return predicate.Message(sql.FieldIsNull(FieldMessage))
}

// MessageNotNil applies the NotNil predicate on the "message" field.
func MessageNotNil() predicate.Message {
	return predicate.Message(sql.FieldNotNull(FieldMessage))
}

// MessageEqualFold applies the EqualFold predicate on the "message" field.
func MessageEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldMessage, v))
}

// MessageContainsFold applies the ContainsFold predicate on the "message" field.
func MessageContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldMessage, v))
}

// IsSeenFromUserIDEQ applies the EQ predicate on the "is_seen_from_user_id" field.
func IsSeenFromUserIDEQ(v bool) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldIsSeenFromUserID, v))
}

// IsSeenFromUserIDNEQ applies the NEQ predicate on the "is_seen_from_user_id" field.
func IsSeenFromUserIDNEQ(v bool) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldIsSeenFromUserID, v))
}

// IsSeenToUserIDEQ applies the EQ predicate on the "is_seen_to_user_id" field.
func IsSeenToUserIDEQ(v bool) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldIsSeenToUserID, v))
}

// IsSeenToUserIDNEQ applies the NEQ predicate on the "is_seen_to_user_id" field.
func IsSeenToUserIDNEQ(v bool) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldIsSeenToUserID, v))
}

// SoftDeleteFromUserIDEQ applies the EQ predicate on the "soft_delete_from_user_id" field.
func SoftDeleteFromUserIDEQ(v bool) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldSoftDeleteFromUserID, v))
}

// SoftDeleteFromUserIDNEQ applies the NEQ predicate on the "soft_delete_from_user_id" field.
func SoftDeleteFromUserIDNEQ(v bool) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldSoftDeleteFromUserID, v))
}

// SoftDeleteToUserIDEQ applies the EQ predicate on the "soft_delete_to_user_id" field.
func SoftDeleteToUserIDEQ(v bool) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldSoftDeleteToUserID, v))
}

// SoftDeleteToUserIDNEQ applies the NEQ predicate on the "soft_delete_to_user_id" field.
func SoftDeleteToUserIDNEQ(v bool) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldSoftDeleteToUserID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldCreatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Message) predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Message) predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Message) predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		p(s.Not())
	})
}
