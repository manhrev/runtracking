// Code generated by ent, DO NOT EDIT.

package message

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the message type in the database.
	Label = "message"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFromUserID holds the string denoting the from_user_id field in the database.
	FieldFromUserID = "from_user_id"
	// FieldToUserID holds the string denoting the to_user_id field in the database.
	FieldToUserID = "to_user_id"
	// FieldMessage holds the string denoting the message field in the database.
	FieldMessage = "message"
	// FieldIsSeenFromUserID holds the string denoting the is_seen_from_user_id field in the database.
	FieldIsSeenFromUserID = "is_seen_from_user_id"
	// FieldIsSeenToUserID holds the string denoting the is_seen_to_user_id field in the database.
	FieldIsSeenToUserID = "is_seen_to_user_id"
	// FieldSoftDeleteFromUserID holds the string denoting the soft_delete_from_user_id field in the database.
	FieldSoftDeleteFromUserID = "soft_delete_from_user_id"
	// FieldSoftDeleteToUserID holds the string denoting the soft_delete_to_user_id field in the database.
	FieldSoftDeleteToUserID = "soft_delete_to_user_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// Table holds the table name of the message in the database.
	Table = "messages"
)

// Columns holds all SQL columns for message fields.
var Columns = []string{
	FieldID,
	FieldFromUserID,
	FieldToUserID,
	FieldMessage,
	FieldIsSeenFromUserID,
	FieldIsSeenToUserID,
	FieldSoftDeleteFromUserID,
	FieldSoftDeleteToUserID,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsSeenFromUserID holds the default value on creation for the "is_seen_from_user_id" field.
	DefaultIsSeenFromUserID bool
	// DefaultIsSeenToUserID holds the default value on creation for the "is_seen_to_user_id" field.
	DefaultIsSeenToUserID bool
	// DefaultSoftDeleteFromUserID holds the default value on creation for the "soft_delete_from_user_id" field.
	DefaultSoftDeleteFromUserID bool
	// DefaultSoftDeleteToUserID holds the default value on creation for the "soft_delete_to_user_id" field.
	DefaultSoftDeleteToUserID bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// Order defines the ordering method for the Message queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFromUserID orders the results by the from_user_id field.
func ByFromUserID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldFromUserID, opts...).ToFunc()
}

// ByToUserID orders the results by the to_user_id field.
func ByToUserID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldToUserID, opts...).ToFunc()
}

// ByMessage orders the results by the message field.
func ByMessage(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldMessage, opts...).ToFunc()
}

// ByIsSeenFromUserID orders the results by the is_seen_from_user_id field.
func ByIsSeenFromUserID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldIsSeenFromUserID, opts...).ToFunc()
}

// ByIsSeenToUserID orders the results by the is_seen_to_user_id field.
func ByIsSeenToUserID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldIsSeenToUserID, opts...).ToFunc()
}

// BySoftDeleteFromUserID orders the results by the soft_delete_from_user_id field.
func BySoftDeleteFromUserID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldSoftDeleteFromUserID, opts...).ToFunc()
}

// BySoftDeleteToUserID orders the results by the soft_delete_to_user_id field.
func BySoftDeleteToUserID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldSoftDeleteToUserID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}
