// Code generated by ent, DO NOT EDIT.

package usersetting

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/manhrev/runtracking/backend/auth/pkg/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Region applies equality check predicate on the "region" field. It's identical to RegionEQ.
func Region(v string) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegion), v))
	})
}

// Language applies equality check predicate on the "language" field. It's identical to LanguageEQ.
func Language(v string) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLanguage), v))
	})
}

// IsNotification applies equality check predicate on the "is_notification" field. It's identical to IsNotificationEQ.
func IsNotification(v string) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsNotification), v))
	})
}

// DateModified applies equality check predicate on the "date_modified" field. It's identical to DateModifiedEQ.
func DateModified(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateModified), v))
	})
}

// RegionEQ applies the EQ predicate on the "region" field.
func RegionEQ(v string) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegion), v))
	})
}

// RegionNEQ applies the NEQ predicate on the "region" field.
func RegionNEQ(v string) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRegion), v))
	})
}

// RegionIn applies the In predicate on the "region" field.
func RegionIn(vs ...string) predicate.UserSetting {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRegion), v...))
	})
}

// RegionNotIn applies the NotIn predicate on the "region" field.
func RegionNotIn(vs ...string) predicate.UserSetting {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRegion), v...))
	})
}

// RegionGT applies the GT predicate on the "region" field.
func RegionGT(v string) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRegion), v))
	})
}

// RegionGTE applies the GTE predicate on the "region" field.
func RegionGTE(v string) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRegion), v))
	})
}

// RegionLT applies the LT predicate on the "region" field.
func RegionLT(v string) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRegion), v))
	})
}

// RegionLTE applies the LTE predicate on the "region" field.
func RegionLTE(v string) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRegion), v))
	})
}

// RegionContains applies the Contains predicate on the "region" field.
func RegionContains(v string) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRegion), v))
	})
}

// RegionHasPrefix applies the HasPrefix predicate on the "region" field.
func RegionHasPrefix(v string) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRegion), v))
	})
}

// RegionHasSuffix applies the HasSuffix predicate on the "region" field.
func RegionHasSuffix(v string) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRegion), v))
	})
}

// RegionEqualFold applies the EqualFold predicate on the "region" field.
func RegionEqualFold(v string) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRegion), v))
	})
}

// RegionContainsFold applies the ContainsFold predicate on the "region" field.
func RegionContainsFold(v string) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRegion), v))
	})
}

// LanguageEQ applies the EQ predicate on the "language" field.
func LanguageEQ(v string) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLanguage), v))
	})
}

// LanguageNEQ applies the NEQ predicate on the "language" field.
func LanguageNEQ(v string) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLanguage), v))
	})
}

// LanguageIn applies the In predicate on the "language" field.
func LanguageIn(vs ...string) predicate.UserSetting {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLanguage), v...))
	})
}

// LanguageNotIn applies the NotIn predicate on the "language" field.
func LanguageNotIn(vs ...string) predicate.UserSetting {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLanguage), v...))
	})
}

// LanguageGT applies the GT predicate on the "language" field.
func LanguageGT(v string) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLanguage), v))
	})
}

// LanguageGTE applies the GTE predicate on the "language" field.
func LanguageGTE(v string) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLanguage), v))
	})
}

// LanguageLT applies the LT predicate on the "language" field.
func LanguageLT(v string) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLanguage), v))
	})
}

// LanguageLTE applies the LTE predicate on the "language" field.
func LanguageLTE(v string) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLanguage), v))
	})
}

// LanguageContains applies the Contains predicate on the "language" field.
func LanguageContains(v string) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLanguage), v))
	})
}

// LanguageHasPrefix applies the HasPrefix predicate on the "language" field.
func LanguageHasPrefix(v string) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLanguage), v))
	})
}

// LanguageHasSuffix applies the HasSuffix predicate on the "language" field.
func LanguageHasSuffix(v string) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLanguage), v))
	})
}

// LanguageEqualFold applies the EqualFold predicate on the "language" field.
func LanguageEqualFold(v string) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLanguage), v))
	})
}

// LanguageContainsFold applies the ContainsFold predicate on the "language" field.
func LanguageContainsFold(v string) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLanguage), v))
	})
}

// IsNotificationEQ applies the EQ predicate on the "is_notification" field.
func IsNotificationEQ(v string) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsNotification), v))
	})
}

// IsNotificationNEQ applies the NEQ predicate on the "is_notification" field.
func IsNotificationNEQ(v string) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsNotification), v))
	})
}

// IsNotificationIn applies the In predicate on the "is_notification" field.
func IsNotificationIn(vs ...string) predicate.UserSetting {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldIsNotification), v...))
	})
}

// IsNotificationNotIn applies the NotIn predicate on the "is_notification" field.
func IsNotificationNotIn(vs ...string) predicate.UserSetting {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldIsNotification), v...))
	})
}

// IsNotificationGT applies the GT predicate on the "is_notification" field.
func IsNotificationGT(v string) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsNotification), v))
	})
}

// IsNotificationGTE applies the GTE predicate on the "is_notification" field.
func IsNotificationGTE(v string) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsNotification), v))
	})
}

// IsNotificationLT applies the LT predicate on the "is_notification" field.
func IsNotificationLT(v string) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsNotification), v))
	})
}

// IsNotificationLTE applies the LTE predicate on the "is_notification" field.
func IsNotificationLTE(v string) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsNotification), v))
	})
}

// IsNotificationContains applies the Contains predicate on the "is_notification" field.
func IsNotificationContains(v string) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIsNotification), v))
	})
}

// IsNotificationHasPrefix applies the HasPrefix predicate on the "is_notification" field.
func IsNotificationHasPrefix(v string) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIsNotification), v))
	})
}

// IsNotificationHasSuffix applies the HasSuffix predicate on the "is_notification" field.
func IsNotificationHasSuffix(v string) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIsNotification), v))
	})
}

// IsNotificationEqualFold applies the EqualFold predicate on the "is_notification" field.
func IsNotificationEqualFold(v string) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIsNotification), v))
	})
}

// IsNotificationContainsFold applies the ContainsFold predicate on the "is_notification" field.
func IsNotificationContainsFold(v string) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIsNotification), v))
	})
}

// DateModifiedEQ applies the EQ predicate on the "date_modified" field.
func DateModifiedEQ(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateModified), v))
	})
}

// DateModifiedNEQ applies the NEQ predicate on the "date_modified" field.
func DateModifiedNEQ(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDateModified), v))
	})
}

// DateModifiedIn applies the In predicate on the "date_modified" field.
func DateModifiedIn(vs ...time.Time) predicate.UserSetting {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDateModified), v...))
	})
}

// DateModifiedNotIn applies the NotIn predicate on the "date_modified" field.
func DateModifiedNotIn(vs ...time.Time) predicate.UserSetting {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDateModified), v...))
	})
}

// DateModifiedGT applies the GT predicate on the "date_modified" field.
func DateModifiedGT(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDateModified), v))
	})
}

// DateModifiedGTE applies the GTE predicate on the "date_modified" field.
func DateModifiedGTE(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDateModified), v))
	})
}

// DateModifiedLT applies the LT predicate on the "date_modified" field.
func DateModifiedLT(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDateModified), v))
	})
}

// DateModifiedLTE applies the LTE predicate on the "date_modified" field.
func DateModifiedLTE(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDateModified), v))
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserSetting) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserSetting) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserSetting) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		p(s.Not())
	})
}
