// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/manhrev/runtracking/backend/group/pkg/ent/member"
	"github.com/manhrev/runtracking/backend/group/pkg/ent/predicate"
	"github.com/manhrev/runtracking/backend/group/pkg/ent/season"
	"github.com/manhrev/runtracking/backend/group/pkg/ent/seasonmember"
)

// SeasonMemberUpdate is the builder for updating SeasonMember entities.
type SeasonMemberUpdate struct {
	config
	hooks     []Hook
	mutation  *SeasonMemberMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SeasonMemberUpdate builder.
func (smu *SeasonMemberUpdate) Where(ps ...predicate.SeasonMember) *SeasonMemberUpdate {
	smu.mutation.Where(ps...)
	return smu
}

// SetPoint sets the "point" field.
func (smu *SeasonMemberUpdate) SetPoint(i int64) *SeasonMemberUpdate {
	smu.mutation.ResetPoint()
	smu.mutation.SetPoint(i)
	return smu
}

// SetNillablePoint sets the "point" field if the given value is not nil.
func (smu *SeasonMemberUpdate) SetNillablePoint(i *int64) *SeasonMemberUpdate {
	if i != nil {
		smu.SetPoint(*i)
	}
	return smu
}

// AddPoint adds i to the "point" field.
func (smu *SeasonMemberUpdate) AddPoint(i int64) *SeasonMemberUpdate {
	smu.mutation.AddPoint(i)
	return smu
}

// SetMemberID sets the "member_id" field.
func (smu *SeasonMemberUpdate) SetMemberID(i int64) *SeasonMemberUpdate {
	smu.mutation.SetMemberID(i)
	return smu
}

// SetSeasonID sets the "season_id" field.
func (smu *SeasonMemberUpdate) SetSeasonID(i int64) *SeasonMemberUpdate {
	smu.mutation.SetSeasonID(i)
	return smu
}

// SetCreatedAt sets the "created_at" field.
func (smu *SeasonMemberUpdate) SetCreatedAt(t time.Time) *SeasonMemberUpdate {
	smu.mutation.SetCreatedAt(t)
	return smu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (smu *SeasonMemberUpdate) SetNillableCreatedAt(t *time.Time) *SeasonMemberUpdate {
	if t != nil {
		smu.SetCreatedAt(*t)
	}
	return smu
}

// SetUpdatedAt sets the "updated_at" field.
func (smu *SeasonMemberUpdate) SetUpdatedAt(t time.Time) *SeasonMemberUpdate {
	smu.mutation.SetUpdatedAt(t)
	return smu
}

// SetCompletedChallengeCount sets the "completed_challenge_count" field.
func (smu *SeasonMemberUpdate) SetCompletedChallengeCount(i int64) *SeasonMemberUpdate {
	smu.mutation.ResetCompletedChallengeCount()
	smu.mutation.SetCompletedChallengeCount(i)
	return smu
}

// SetNillableCompletedChallengeCount sets the "completed_challenge_count" field if the given value is not nil.
func (smu *SeasonMemberUpdate) SetNillableCompletedChallengeCount(i *int64) *SeasonMemberUpdate {
	if i != nil {
		smu.SetCompletedChallengeCount(*i)
	}
	return smu
}

// AddCompletedChallengeCount adds i to the "completed_challenge_count" field.
func (smu *SeasonMemberUpdate) AddCompletedChallengeCount(i int64) *SeasonMemberUpdate {
	smu.mutation.AddCompletedChallengeCount(i)
	return smu
}

// SetSeason sets the "season" edge to the Season entity.
func (smu *SeasonMemberUpdate) SetSeason(s *Season) *SeasonMemberUpdate {
	return smu.SetSeasonID(s.ID)
}

// SetMember sets the "member" edge to the Member entity.
func (smu *SeasonMemberUpdate) SetMember(m *Member) *SeasonMemberUpdate {
	return smu.SetMemberID(m.ID)
}

// Mutation returns the SeasonMemberMutation object of the builder.
func (smu *SeasonMemberUpdate) Mutation() *SeasonMemberMutation {
	return smu.mutation
}

// ClearSeason clears the "season" edge to the Season entity.
func (smu *SeasonMemberUpdate) ClearSeason() *SeasonMemberUpdate {
	smu.mutation.ClearSeason()
	return smu
}

// ClearMember clears the "member" edge to the Member entity.
func (smu *SeasonMemberUpdate) ClearMember() *SeasonMemberUpdate {
	smu.mutation.ClearMember()
	return smu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (smu *SeasonMemberUpdate) Save(ctx context.Context) (int, error) {
	smu.defaults()
	return withHooks[int, SeasonMemberMutation](ctx, smu.sqlSave, smu.mutation, smu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (smu *SeasonMemberUpdate) SaveX(ctx context.Context) int {
	affected, err := smu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (smu *SeasonMemberUpdate) Exec(ctx context.Context) error {
	_, err := smu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smu *SeasonMemberUpdate) ExecX(ctx context.Context) {
	if err := smu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (smu *SeasonMemberUpdate) defaults() {
	if _, ok := smu.mutation.UpdatedAt(); !ok {
		v := seasonmember.UpdateDefaultUpdatedAt()
		smu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (smu *SeasonMemberUpdate) check() error {
	if _, ok := smu.mutation.SeasonID(); smu.mutation.SeasonCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SeasonMember.season"`)
	}
	if _, ok := smu.mutation.MemberID(); smu.mutation.MemberCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SeasonMember.member"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (smu *SeasonMemberUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SeasonMemberUpdate {
	smu.modifiers = append(smu.modifiers, modifiers...)
	return smu
}

func (smu *SeasonMemberUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := smu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   seasonmember.Table,
			Columns: seasonmember.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: seasonmember.FieldID,
			},
		},
	}
	if ps := smu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := smu.mutation.Point(); ok {
		_spec.SetField(seasonmember.FieldPoint, field.TypeInt64, value)
	}
	if value, ok := smu.mutation.AddedPoint(); ok {
		_spec.AddField(seasonmember.FieldPoint, field.TypeInt64, value)
	}
	if value, ok := smu.mutation.CreatedAt(); ok {
		_spec.SetField(seasonmember.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := smu.mutation.UpdatedAt(); ok {
		_spec.SetField(seasonmember.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := smu.mutation.CompletedChallengeCount(); ok {
		_spec.SetField(seasonmember.FieldCompletedChallengeCount, field.TypeInt64, value)
	}
	if value, ok := smu.mutation.AddedCompletedChallengeCount(); ok {
		_spec.AddField(seasonmember.FieldCompletedChallengeCount, field.TypeInt64, value)
	}
	if smu.mutation.SeasonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   seasonmember.SeasonTable,
			Columns: []string{seasonmember.SeasonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: season.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smu.mutation.SeasonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   seasonmember.SeasonTable,
			Columns: []string{seasonmember.SeasonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: season.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if smu.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   seasonmember.MemberTable,
			Columns: []string{seasonmember.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: member.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smu.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   seasonmember.MemberTable,
			Columns: []string{seasonmember.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: member.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(smu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, smu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{seasonmember.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	smu.mutation.done = true
	return n, nil
}

// SeasonMemberUpdateOne is the builder for updating a single SeasonMember entity.
type SeasonMemberUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SeasonMemberMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetPoint sets the "point" field.
func (smuo *SeasonMemberUpdateOne) SetPoint(i int64) *SeasonMemberUpdateOne {
	smuo.mutation.ResetPoint()
	smuo.mutation.SetPoint(i)
	return smuo
}

// SetNillablePoint sets the "point" field if the given value is not nil.
func (smuo *SeasonMemberUpdateOne) SetNillablePoint(i *int64) *SeasonMemberUpdateOne {
	if i != nil {
		smuo.SetPoint(*i)
	}
	return smuo
}

// AddPoint adds i to the "point" field.
func (smuo *SeasonMemberUpdateOne) AddPoint(i int64) *SeasonMemberUpdateOne {
	smuo.mutation.AddPoint(i)
	return smuo
}

// SetMemberID sets the "member_id" field.
func (smuo *SeasonMemberUpdateOne) SetMemberID(i int64) *SeasonMemberUpdateOne {
	smuo.mutation.SetMemberID(i)
	return smuo
}

// SetSeasonID sets the "season_id" field.
func (smuo *SeasonMemberUpdateOne) SetSeasonID(i int64) *SeasonMemberUpdateOne {
	smuo.mutation.SetSeasonID(i)
	return smuo
}

// SetCreatedAt sets the "created_at" field.
func (smuo *SeasonMemberUpdateOne) SetCreatedAt(t time.Time) *SeasonMemberUpdateOne {
	smuo.mutation.SetCreatedAt(t)
	return smuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (smuo *SeasonMemberUpdateOne) SetNillableCreatedAt(t *time.Time) *SeasonMemberUpdateOne {
	if t != nil {
		smuo.SetCreatedAt(*t)
	}
	return smuo
}

// SetUpdatedAt sets the "updated_at" field.
func (smuo *SeasonMemberUpdateOne) SetUpdatedAt(t time.Time) *SeasonMemberUpdateOne {
	smuo.mutation.SetUpdatedAt(t)
	return smuo
}

// SetCompletedChallengeCount sets the "completed_challenge_count" field.
func (smuo *SeasonMemberUpdateOne) SetCompletedChallengeCount(i int64) *SeasonMemberUpdateOne {
	smuo.mutation.ResetCompletedChallengeCount()
	smuo.mutation.SetCompletedChallengeCount(i)
	return smuo
}

// SetNillableCompletedChallengeCount sets the "completed_challenge_count" field if the given value is not nil.
func (smuo *SeasonMemberUpdateOne) SetNillableCompletedChallengeCount(i *int64) *SeasonMemberUpdateOne {
	if i != nil {
		smuo.SetCompletedChallengeCount(*i)
	}
	return smuo
}

// AddCompletedChallengeCount adds i to the "completed_challenge_count" field.
func (smuo *SeasonMemberUpdateOne) AddCompletedChallengeCount(i int64) *SeasonMemberUpdateOne {
	smuo.mutation.AddCompletedChallengeCount(i)
	return smuo
}

// SetSeason sets the "season" edge to the Season entity.
func (smuo *SeasonMemberUpdateOne) SetSeason(s *Season) *SeasonMemberUpdateOne {
	return smuo.SetSeasonID(s.ID)
}

// SetMember sets the "member" edge to the Member entity.
func (smuo *SeasonMemberUpdateOne) SetMember(m *Member) *SeasonMemberUpdateOne {
	return smuo.SetMemberID(m.ID)
}

// Mutation returns the SeasonMemberMutation object of the builder.
func (smuo *SeasonMemberUpdateOne) Mutation() *SeasonMemberMutation {
	return smuo.mutation
}

// ClearSeason clears the "season" edge to the Season entity.
func (smuo *SeasonMemberUpdateOne) ClearSeason() *SeasonMemberUpdateOne {
	smuo.mutation.ClearSeason()
	return smuo
}

// ClearMember clears the "member" edge to the Member entity.
func (smuo *SeasonMemberUpdateOne) ClearMember() *SeasonMemberUpdateOne {
	smuo.mutation.ClearMember()
	return smuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (smuo *SeasonMemberUpdateOne) Select(field string, fields ...string) *SeasonMemberUpdateOne {
	smuo.fields = append([]string{field}, fields...)
	return smuo
}

// Save executes the query and returns the updated SeasonMember entity.
func (smuo *SeasonMemberUpdateOne) Save(ctx context.Context) (*SeasonMember, error) {
	smuo.defaults()
	return withHooks[*SeasonMember, SeasonMemberMutation](ctx, smuo.sqlSave, smuo.mutation, smuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (smuo *SeasonMemberUpdateOne) SaveX(ctx context.Context) *SeasonMember {
	node, err := smuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (smuo *SeasonMemberUpdateOne) Exec(ctx context.Context) error {
	_, err := smuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smuo *SeasonMemberUpdateOne) ExecX(ctx context.Context) {
	if err := smuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (smuo *SeasonMemberUpdateOne) defaults() {
	if _, ok := smuo.mutation.UpdatedAt(); !ok {
		v := seasonmember.UpdateDefaultUpdatedAt()
		smuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (smuo *SeasonMemberUpdateOne) check() error {
	if _, ok := smuo.mutation.SeasonID(); smuo.mutation.SeasonCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SeasonMember.season"`)
	}
	if _, ok := smuo.mutation.MemberID(); smuo.mutation.MemberCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SeasonMember.member"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (smuo *SeasonMemberUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SeasonMemberUpdateOne {
	smuo.modifiers = append(smuo.modifiers, modifiers...)
	return smuo
}

func (smuo *SeasonMemberUpdateOne) sqlSave(ctx context.Context) (_node *SeasonMember, err error) {
	if err := smuo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   seasonmember.Table,
			Columns: seasonmember.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: seasonmember.FieldID,
			},
		},
	}
	id, ok := smuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SeasonMember.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := smuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, seasonmember.FieldID)
		for _, f := range fields {
			if !seasonmember.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != seasonmember.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := smuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := smuo.mutation.Point(); ok {
		_spec.SetField(seasonmember.FieldPoint, field.TypeInt64, value)
	}
	if value, ok := smuo.mutation.AddedPoint(); ok {
		_spec.AddField(seasonmember.FieldPoint, field.TypeInt64, value)
	}
	if value, ok := smuo.mutation.CreatedAt(); ok {
		_spec.SetField(seasonmember.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := smuo.mutation.UpdatedAt(); ok {
		_spec.SetField(seasonmember.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := smuo.mutation.CompletedChallengeCount(); ok {
		_spec.SetField(seasonmember.FieldCompletedChallengeCount, field.TypeInt64, value)
	}
	if value, ok := smuo.mutation.AddedCompletedChallengeCount(); ok {
		_spec.AddField(seasonmember.FieldCompletedChallengeCount, field.TypeInt64, value)
	}
	if smuo.mutation.SeasonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   seasonmember.SeasonTable,
			Columns: []string{seasonmember.SeasonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: season.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smuo.mutation.SeasonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   seasonmember.SeasonTable,
			Columns: []string{seasonmember.SeasonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: season.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if smuo.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   seasonmember.MemberTable,
			Columns: []string{seasonmember.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: member.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smuo.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   seasonmember.MemberTable,
			Columns: []string{seasonmember.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: member.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(smuo.modifiers...)
	_node = &SeasonMember{config: smuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, smuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{seasonmember.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	smuo.mutation.done = true
	return _node, nil
}
