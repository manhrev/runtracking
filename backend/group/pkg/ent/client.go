// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/manhrev/runtracking/backend/group/pkg/ent/migrate"

	"github.com/manhrev/runtracking/backend/group/pkg/ent/challenge"
	"github.com/manhrev/runtracking/backend/group/pkg/ent/challengemember"
	"github.com/manhrev/runtracking/backend/group/pkg/ent/challengememberrule"
	"github.com/manhrev/runtracking/backend/group/pkg/ent/challengerule"
	"github.com/manhrev/runtracking/backend/group/pkg/ent/groupz"
	"github.com/manhrev/runtracking/backend/group/pkg/ent/member"
	"github.com/manhrev/runtracking/backend/group/pkg/ent/season"
	"github.com/manhrev/runtracking/backend/group/pkg/ent/seasonmember"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Challenge is the client for interacting with the Challenge builders.
	Challenge *ChallengeClient
	// ChallengeMember is the client for interacting with the ChallengeMember builders.
	ChallengeMember *ChallengeMemberClient
	// ChallengeMemberRule is the client for interacting with the ChallengeMemberRule builders.
	ChallengeMemberRule *ChallengeMemberRuleClient
	// ChallengeRule is the client for interacting with the ChallengeRule builders.
	ChallengeRule *ChallengeRuleClient
	// Groupz is the client for interacting with the Groupz builders.
	Groupz *GroupzClient
	// Member is the client for interacting with the Member builders.
	Member *MemberClient
	// Season is the client for interacting with the Season builders.
	Season *SeasonClient
	// SeasonMember is the client for interacting with the SeasonMember builders.
	SeasonMember *SeasonMemberClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Challenge = NewChallengeClient(c.config)
	c.ChallengeMember = NewChallengeMemberClient(c.config)
	c.ChallengeMemberRule = NewChallengeMemberRuleClient(c.config)
	c.ChallengeRule = NewChallengeRuleClient(c.config)
	c.Groupz = NewGroupzClient(c.config)
	c.Member = NewMemberClient(c.config)
	c.Season = NewSeasonClient(c.config)
	c.SeasonMember = NewSeasonMemberClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		Challenge:           NewChallengeClient(cfg),
		ChallengeMember:     NewChallengeMemberClient(cfg),
		ChallengeMemberRule: NewChallengeMemberRuleClient(cfg),
		ChallengeRule:       NewChallengeRuleClient(cfg),
		Groupz:              NewGroupzClient(cfg),
		Member:              NewMemberClient(cfg),
		Season:              NewSeasonClient(cfg),
		SeasonMember:        NewSeasonMemberClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		Challenge:           NewChallengeClient(cfg),
		ChallengeMember:     NewChallengeMemberClient(cfg),
		ChallengeMemberRule: NewChallengeMemberRuleClient(cfg),
		ChallengeRule:       NewChallengeRuleClient(cfg),
		Groupz:              NewGroupzClient(cfg),
		Member:              NewMemberClient(cfg),
		Season:              NewSeasonClient(cfg),
		SeasonMember:        NewSeasonMemberClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Challenge.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Challenge.Use(hooks...)
	c.ChallengeMember.Use(hooks...)
	c.ChallengeMemberRule.Use(hooks...)
	c.ChallengeRule.Use(hooks...)
	c.Groupz.Use(hooks...)
	c.Member.Use(hooks...)
	c.Season.Use(hooks...)
	c.SeasonMember.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Challenge.Intercept(interceptors...)
	c.ChallengeMember.Intercept(interceptors...)
	c.ChallengeMemberRule.Intercept(interceptors...)
	c.ChallengeRule.Intercept(interceptors...)
	c.Groupz.Intercept(interceptors...)
	c.Member.Intercept(interceptors...)
	c.Season.Intercept(interceptors...)
	c.SeasonMember.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ChallengeMutation:
		return c.Challenge.mutate(ctx, m)
	case *ChallengeMemberMutation:
		return c.ChallengeMember.mutate(ctx, m)
	case *ChallengeMemberRuleMutation:
		return c.ChallengeMemberRule.mutate(ctx, m)
	case *ChallengeRuleMutation:
		return c.ChallengeRule.mutate(ctx, m)
	case *GroupzMutation:
		return c.Groupz.mutate(ctx, m)
	case *MemberMutation:
		return c.Member.mutate(ctx, m)
	case *SeasonMutation:
		return c.Season.mutate(ctx, m)
	case *SeasonMemberMutation:
		return c.SeasonMember.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ChallengeClient is a client for the Challenge schema.
type ChallengeClient struct {
	config
}

// NewChallengeClient returns a client for the Challenge from the given config.
func NewChallengeClient(c config) *ChallengeClient {
	return &ChallengeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `challenge.Hooks(f(g(h())))`.
func (c *ChallengeClient) Use(hooks ...Hook) {
	c.hooks.Challenge = append(c.hooks.Challenge, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `challenge.Intercept(f(g(h())))`.
func (c *ChallengeClient) Intercept(interceptors ...Interceptor) {
	c.inters.Challenge = append(c.inters.Challenge, interceptors...)
}

// Create returns a builder for creating a Challenge entity.
func (c *ChallengeClient) Create() *ChallengeCreate {
	mutation := newChallengeMutation(c.config, OpCreate)
	return &ChallengeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Challenge entities.
func (c *ChallengeClient) CreateBulk(builders ...*ChallengeCreate) *ChallengeCreateBulk {
	return &ChallengeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Challenge.
func (c *ChallengeClient) Update() *ChallengeUpdate {
	mutation := newChallengeMutation(c.config, OpUpdate)
	return &ChallengeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChallengeClient) UpdateOne(ch *Challenge) *ChallengeUpdateOne {
	mutation := newChallengeMutation(c.config, OpUpdateOne, withChallenge(ch))
	return &ChallengeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChallengeClient) UpdateOneID(id int64) *ChallengeUpdateOne {
	mutation := newChallengeMutation(c.config, OpUpdateOne, withChallengeID(id))
	return &ChallengeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Challenge.
func (c *ChallengeClient) Delete() *ChallengeDelete {
	mutation := newChallengeMutation(c.config, OpDelete)
	return &ChallengeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ChallengeClient) DeleteOne(ch *Challenge) *ChallengeDeleteOne {
	return c.DeleteOneID(ch.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ChallengeClient) DeleteOneID(id int64) *ChallengeDeleteOne {
	builder := c.Delete().Where(challenge.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChallengeDeleteOne{builder}
}

// Query returns a query builder for Challenge.
func (c *ChallengeClient) Query() *ChallengeQuery {
	return &ChallengeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeChallenge},
		inters: c.Interceptors(),
	}
}

// Get returns a Challenge entity by its id.
func (c *ChallengeClient) Get(ctx context.Context, id int64) (*Challenge, error) {
	return c.Query().Where(challenge.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChallengeClient) GetX(ctx context.Context, id int64) *Challenge {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChallengeMembers queries the challenge_members edge of a Challenge.
func (c *ChallengeClient) QueryChallengeMembers(ch *Challenge) *ChallengeMemberQuery {
	query := (&ChallengeMemberClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(challenge.Table, challenge.FieldID, id),
			sqlgraph.To(challengemember.Table, challengemember.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, challenge.ChallengeMembersTable, challenge.ChallengeMembersColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGroupz queries the groupz edge of a Challenge.
func (c *ChallengeClient) QueryGroupz(ch *Challenge) *GroupzQuery {
	query := (&GroupzClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(challenge.Table, challenge.FieldID, id),
			sqlgraph.To(groupz.Table, groupz.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, challenge.GroupzTable, challenge.GroupzColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChallengeRules queries the challenge_rules edge of a Challenge.
func (c *ChallengeClient) QueryChallengeRules(ch *Challenge) *ChallengeRuleQuery {
	query := (&ChallengeRuleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(challenge.Table, challenge.FieldID, id),
			sqlgraph.To(challengerule.Table, challengerule.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, challenge.ChallengeRulesTable, challenge.ChallengeRulesColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFirstMember queries the first_member edge of a Challenge.
func (c *ChallengeClient) QueryFirstMember(ch *Challenge) *MemberQuery {
	query := (&MemberClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(challenge.Table, challenge.FieldID, id),
			sqlgraph.To(member.Table, member.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, challenge.FirstMemberTable, challenge.FirstMemberColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ChallengeClient) Hooks() []Hook {
	return c.hooks.Challenge
}

// Interceptors returns the client interceptors.
func (c *ChallengeClient) Interceptors() []Interceptor {
	return c.inters.Challenge
}

func (c *ChallengeClient) mutate(ctx context.Context, m *ChallengeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ChallengeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ChallengeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ChallengeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ChallengeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Challenge mutation op: %q", m.Op())
	}
}

// ChallengeMemberClient is a client for the ChallengeMember schema.
type ChallengeMemberClient struct {
	config
}

// NewChallengeMemberClient returns a client for the ChallengeMember from the given config.
func NewChallengeMemberClient(c config) *ChallengeMemberClient {
	return &ChallengeMemberClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `challengemember.Hooks(f(g(h())))`.
func (c *ChallengeMemberClient) Use(hooks ...Hook) {
	c.hooks.ChallengeMember = append(c.hooks.ChallengeMember, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `challengemember.Intercept(f(g(h())))`.
func (c *ChallengeMemberClient) Intercept(interceptors ...Interceptor) {
	c.inters.ChallengeMember = append(c.inters.ChallengeMember, interceptors...)
}

// Create returns a builder for creating a ChallengeMember entity.
func (c *ChallengeMemberClient) Create() *ChallengeMemberCreate {
	mutation := newChallengeMemberMutation(c.config, OpCreate)
	return &ChallengeMemberCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ChallengeMember entities.
func (c *ChallengeMemberClient) CreateBulk(builders ...*ChallengeMemberCreate) *ChallengeMemberCreateBulk {
	return &ChallengeMemberCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ChallengeMember.
func (c *ChallengeMemberClient) Update() *ChallengeMemberUpdate {
	mutation := newChallengeMemberMutation(c.config, OpUpdate)
	return &ChallengeMemberUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChallengeMemberClient) UpdateOne(cm *ChallengeMember) *ChallengeMemberUpdateOne {
	mutation := newChallengeMemberMutation(c.config, OpUpdateOne, withChallengeMember(cm))
	return &ChallengeMemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChallengeMemberClient) UpdateOneID(id int64) *ChallengeMemberUpdateOne {
	mutation := newChallengeMemberMutation(c.config, OpUpdateOne, withChallengeMemberID(id))
	return &ChallengeMemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ChallengeMember.
func (c *ChallengeMemberClient) Delete() *ChallengeMemberDelete {
	mutation := newChallengeMemberMutation(c.config, OpDelete)
	return &ChallengeMemberDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ChallengeMemberClient) DeleteOne(cm *ChallengeMember) *ChallengeMemberDeleteOne {
	return c.DeleteOneID(cm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ChallengeMemberClient) DeleteOneID(id int64) *ChallengeMemberDeleteOne {
	builder := c.Delete().Where(challengemember.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChallengeMemberDeleteOne{builder}
}

// Query returns a query builder for ChallengeMember.
func (c *ChallengeMemberClient) Query() *ChallengeMemberQuery {
	return &ChallengeMemberQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeChallengeMember},
		inters: c.Interceptors(),
	}
}

// Get returns a ChallengeMember entity by its id.
func (c *ChallengeMemberClient) Get(ctx context.Context, id int64) (*ChallengeMember, error) {
	return c.Query().Where(challengemember.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChallengeMemberClient) GetX(ctx context.Context, id int64) *ChallengeMember {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChallengeMemberRules queries the challenge_member_rules edge of a ChallengeMember.
func (c *ChallengeMemberClient) QueryChallengeMemberRules(cm *ChallengeMember) *ChallengeMemberRuleQuery {
	query := (&ChallengeMemberRuleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(challengemember.Table, challengemember.FieldID, id),
			sqlgraph.To(challengememberrule.Table, challengememberrule.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, challengemember.ChallengeMemberRulesTable, challengemember.ChallengeMemberRulesColumn),
		)
		fromV = sqlgraph.Neighbors(cm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChallenge queries the challenge edge of a ChallengeMember.
func (c *ChallengeMemberClient) QueryChallenge(cm *ChallengeMember) *ChallengeQuery {
	query := (&ChallengeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(challengemember.Table, challengemember.FieldID, id),
			sqlgraph.To(challenge.Table, challenge.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, challengemember.ChallengeTable, challengemember.ChallengeColumn),
		)
		fromV = sqlgraph.Neighbors(cm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMember queries the member edge of a ChallengeMember.
func (c *ChallengeMemberClient) QueryMember(cm *ChallengeMember) *MemberQuery {
	query := (&MemberClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(challengemember.Table, challengemember.FieldID, id),
			sqlgraph.To(member.Table, member.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, challengemember.MemberTable, challengemember.MemberColumn),
		)
		fromV = sqlgraph.Neighbors(cm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ChallengeMemberClient) Hooks() []Hook {
	return c.hooks.ChallengeMember
}

// Interceptors returns the client interceptors.
func (c *ChallengeMemberClient) Interceptors() []Interceptor {
	return c.inters.ChallengeMember
}

func (c *ChallengeMemberClient) mutate(ctx context.Context, m *ChallengeMemberMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ChallengeMemberCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ChallengeMemberUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ChallengeMemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ChallengeMemberDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ChallengeMember mutation op: %q", m.Op())
	}
}

// ChallengeMemberRuleClient is a client for the ChallengeMemberRule schema.
type ChallengeMemberRuleClient struct {
	config
}

// NewChallengeMemberRuleClient returns a client for the ChallengeMemberRule from the given config.
func NewChallengeMemberRuleClient(c config) *ChallengeMemberRuleClient {
	return &ChallengeMemberRuleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `challengememberrule.Hooks(f(g(h())))`.
func (c *ChallengeMemberRuleClient) Use(hooks ...Hook) {
	c.hooks.ChallengeMemberRule = append(c.hooks.ChallengeMemberRule, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `challengememberrule.Intercept(f(g(h())))`.
func (c *ChallengeMemberRuleClient) Intercept(interceptors ...Interceptor) {
	c.inters.ChallengeMemberRule = append(c.inters.ChallengeMemberRule, interceptors...)
}

// Create returns a builder for creating a ChallengeMemberRule entity.
func (c *ChallengeMemberRuleClient) Create() *ChallengeMemberRuleCreate {
	mutation := newChallengeMemberRuleMutation(c.config, OpCreate)
	return &ChallengeMemberRuleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ChallengeMemberRule entities.
func (c *ChallengeMemberRuleClient) CreateBulk(builders ...*ChallengeMemberRuleCreate) *ChallengeMemberRuleCreateBulk {
	return &ChallengeMemberRuleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ChallengeMemberRule.
func (c *ChallengeMemberRuleClient) Update() *ChallengeMemberRuleUpdate {
	mutation := newChallengeMemberRuleMutation(c.config, OpUpdate)
	return &ChallengeMemberRuleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChallengeMemberRuleClient) UpdateOne(cmr *ChallengeMemberRule) *ChallengeMemberRuleUpdateOne {
	mutation := newChallengeMemberRuleMutation(c.config, OpUpdateOne, withChallengeMemberRule(cmr))
	return &ChallengeMemberRuleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChallengeMemberRuleClient) UpdateOneID(id int64) *ChallengeMemberRuleUpdateOne {
	mutation := newChallengeMemberRuleMutation(c.config, OpUpdateOne, withChallengeMemberRuleID(id))
	return &ChallengeMemberRuleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ChallengeMemberRule.
func (c *ChallengeMemberRuleClient) Delete() *ChallengeMemberRuleDelete {
	mutation := newChallengeMemberRuleMutation(c.config, OpDelete)
	return &ChallengeMemberRuleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ChallengeMemberRuleClient) DeleteOne(cmr *ChallengeMemberRule) *ChallengeMemberRuleDeleteOne {
	return c.DeleteOneID(cmr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ChallengeMemberRuleClient) DeleteOneID(id int64) *ChallengeMemberRuleDeleteOne {
	builder := c.Delete().Where(challengememberrule.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChallengeMemberRuleDeleteOne{builder}
}

// Query returns a query builder for ChallengeMemberRule.
func (c *ChallengeMemberRuleClient) Query() *ChallengeMemberRuleQuery {
	return &ChallengeMemberRuleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeChallengeMemberRule},
		inters: c.Interceptors(),
	}
}

// Get returns a ChallengeMemberRule entity by its id.
func (c *ChallengeMemberRuleClient) Get(ctx context.Context, id int64) (*ChallengeMemberRule, error) {
	return c.Query().Where(challengememberrule.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChallengeMemberRuleClient) GetX(ctx context.Context, id int64) *ChallengeMemberRule {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChallengeMember queries the challenge_member edge of a ChallengeMemberRule.
func (c *ChallengeMemberRuleClient) QueryChallengeMember(cmr *ChallengeMemberRule) *ChallengeMemberQuery {
	query := (&ChallengeMemberClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cmr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(challengememberrule.Table, challengememberrule.FieldID, id),
			sqlgraph.To(challengemember.Table, challengemember.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, challengememberrule.ChallengeMemberTable, challengememberrule.ChallengeMemberColumn),
		)
		fromV = sqlgraph.Neighbors(cmr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChallengeRule queries the challenge_rule edge of a ChallengeMemberRule.
func (c *ChallengeMemberRuleClient) QueryChallengeRule(cmr *ChallengeMemberRule) *ChallengeRuleQuery {
	query := (&ChallengeRuleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cmr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(challengememberrule.Table, challengememberrule.FieldID, id),
			sqlgraph.To(challengerule.Table, challengerule.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, challengememberrule.ChallengeRuleTable, challengememberrule.ChallengeRuleColumn),
		)
		fromV = sqlgraph.Neighbors(cmr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ChallengeMemberRuleClient) Hooks() []Hook {
	return c.hooks.ChallengeMemberRule
}

// Interceptors returns the client interceptors.
func (c *ChallengeMemberRuleClient) Interceptors() []Interceptor {
	return c.inters.ChallengeMemberRule
}

func (c *ChallengeMemberRuleClient) mutate(ctx context.Context, m *ChallengeMemberRuleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ChallengeMemberRuleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ChallengeMemberRuleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ChallengeMemberRuleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ChallengeMemberRuleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ChallengeMemberRule mutation op: %q", m.Op())
	}
}

// ChallengeRuleClient is a client for the ChallengeRule schema.
type ChallengeRuleClient struct {
	config
}

// NewChallengeRuleClient returns a client for the ChallengeRule from the given config.
func NewChallengeRuleClient(c config) *ChallengeRuleClient {
	return &ChallengeRuleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `challengerule.Hooks(f(g(h())))`.
func (c *ChallengeRuleClient) Use(hooks ...Hook) {
	c.hooks.ChallengeRule = append(c.hooks.ChallengeRule, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `challengerule.Intercept(f(g(h())))`.
func (c *ChallengeRuleClient) Intercept(interceptors ...Interceptor) {
	c.inters.ChallengeRule = append(c.inters.ChallengeRule, interceptors...)
}

// Create returns a builder for creating a ChallengeRule entity.
func (c *ChallengeRuleClient) Create() *ChallengeRuleCreate {
	mutation := newChallengeRuleMutation(c.config, OpCreate)
	return &ChallengeRuleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ChallengeRule entities.
func (c *ChallengeRuleClient) CreateBulk(builders ...*ChallengeRuleCreate) *ChallengeRuleCreateBulk {
	return &ChallengeRuleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ChallengeRule.
func (c *ChallengeRuleClient) Update() *ChallengeRuleUpdate {
	mutation := newChallengeRuleMutation(c.config, OpUpdate)
	return &ChallengeRuleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChallengeRuleClient) UpdateOne(cr *ChallengeRule) *ChallengeRuleUpdateOne {
	mutation := newChallengeRuleMutation(c.config, OpUpdateOne, withChallengeRule(cr))
	return &ChallengeRuleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChallengeRuleClient) UpdateOneID(id int64) *ChallengeRuleUpdateOne {
	mutation := newChallengeRuleMutation(c.config, OpUpdateOne, withChallengeRuleID(id))
	return &ChallengeRuleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ChallengeRule.
func (c *ChallengeRuleClient) Delete() *ChallengeRuleDelete {
	mutation := newChallengeRuleMutation(c.config, OpDelete)
	return &ChallengeRuleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ChallengeRuleClient) DeleteOne(cr *ChallengeRule) *ChallengeRuleDeleteOne {
	return c.DeleteOneID(cr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ChallengeRuleClient) DeleteOneID(id int64) *ChallengeRuleDeleteOne {
	builder := c.Delete().Where(challengerule.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChallengeRuleDeleteOne{builder}
}

// Query returns a query builder for ChallengeRule.
func (c *ChallengeRuleClient) Query() *ChallengeRuleQuery {
	return &ChallengeRuleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeChallengeRule},
		inters: c.Interceptors(),
	}
}

// Get returns a ChallengeRule entity by its id.
func (c *ChallengeRuleClient) Get(ctx context.Context, id int64) (*ChallengeRule, error) {
	return c.Query().Where(challengerule.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChallengeRuleClient) GetX(ctx context.Context, id int64) *ChallengeRule {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChallengeMemberRules queries the challenge_member_rules edge of a ChallengeRule.
func (c *ChallengeRuleClient) QueryChallengeMemberRules(cr *ChallengeRule) *ChallengeMemberRuleQuery {
	query := (&ChallengeMemberRuleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(challengerule.Table, challengerule.FieldID, id),
			sqlgraph.To(challengememberrule.Table, challengememberrule.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, challengerule.ChallengeMemberRulesTable, challengerule.ChallengeMemberRulesColumn),
		)
		fromV = sqlgraph.Neighbors(cr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChallenge queries the challenge edge of a ChallengeRule.
func (c *ChallengeRuleClient) QueryChallenge(cr *ChallengeRule) *ChallengeQuery {
	query := (&ChallengeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(challengerule.Table, challengerule.FieldID, id),
			sqlgraph.To(challenge.Table, challenge.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, challengerule.ChallengeTable, challengerule.ChallengeColumn),
		)
		fromV = sqlgraph.Neighbors(cr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ChallengeRuleClient) Hooks() []Hook {
	return c.hooks.ChallengeRule
}

// Interceptors returns the client interceptors.
func (c *ChallengeRuleClient) Interceptors() []Interceptor {
	return c.inters.ChallengeRule
}

func (c *ChallengeRuleClient) mutate(ctx context.Context, m *ChallengeRuleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ChallengeRuleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ChallengeRuleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ChallengeRuleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ChallengeRuleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ChallengeRule mutation op: %q", m.Op())
	}
}

// GroupzClient is a client for the Groupz schema.
type GroupzClient struct {
	config
}

// NewGroupzClient returns a client for the Groupz from the given config.
func NewGroupzClient(c config) *GroupzClient {
	return &GroupzClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `groupz.Hooks(f(g(h())))`.
func (c *GroupzClient) Use(hooks ...Hook) {
	c.hooks.Groupz = append(c.hooks.Groupz, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `groupz.Intercept(f(g(h())))`.
func (c *GroupzClient) Intercept(interceptors ...Interceptor) {
	c.inters.Groupz = append(c.inters.Groupz, interceptors...)
}

// Create returns a builder for creating a Groupz entity.
func (c *GroupzClient) Create() *GroupzCreate {
	mutation := newGroupzMutation(c.config, OpCreate)
	return &GroupzCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Groupz entities.
func (c *GroupzClient) CreateBulk(builders ...*GroupzCreate) *GroupzCreateBulk {
	return &GroupzCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Groupz.
func (c *GroupzClient) Update() *GroupzUpdate {
	mutation := newGroupzMutation(c.config, OpUpdate)
	return &GroupzUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GroupzClient) UpdateOne(gr *Groupz) *GroupzUpdateOne {
	mutation := newGroupzMutation(c.config, OpUpdateOne, withGroupz(gr))
	return &GroupzUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GroupzClient) UpdateOneID(id int64) *GroupzUpdateOne {
	mutation := newGroupzMutation(c.config, OpUpdateOne, withGroupzID(id))
	return &GroupzUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Groupz.
func (c *GroupzClient) Delete() *GroupzDelete {
	mutation := newGroupzMutation(c.config, OpDelete)
	return &GroupzDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GroupzClient) DeleteOne(gr *Groupz) *GroupzDeleteOne {
	return c.DeleteOneID(gr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GroupzClient) DeleteOneID(id int64) *GroupzDeleteOne {
	builder := c.Delete().Where(groupz.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GroupzDeleteOne{builder}
}

// Query returns a query builder for Groupz.
func (c *GroupzClient) Query() *GroupzQuery {
	return &GroupzQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGroupz},
		inters: c.Interceptors(),
	}
}

// Get returns a Groupz entity by its id.
func (c *GroupzClient) Get(ctx context.Context, id int64) (*Groupz, error) {
	return c.Query().Where(groupz.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GroupzClient) GetX(ctx context.Context, id int64) *Groupz {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMembers queries the members edge of a Groupz.
func (c *GroupzClient) QueryMembers(gr *Groupz) *MemberQuery {
	query := (&MemberClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(groupz.Table, groupz.FieldID, id),
			sqlgraph.To(member.Table, member.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, groupz.MembersTable, groupz.MembersColumn),
		)
		fromV = sqlgraph.Neighbors(gr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChallenges queries the challenges edge of a Groupz.
func (c *GroupzClient) QueryChallenges(gr *Groupz) *ChallengeQuery {
	query := (&ChallengeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(groupz.Table, groupz.FieldID, id),
			sqlgraph.To(challenge.Table, challenge.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, groupz.ChallengesTable, groupz.ChallengesColumn),
		)
		fromV = sqlgraph.Neighbors(gr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GroupzClient) Hooks() []Hook {
	return c.hooks.Groupz
}

// Interceptors returns the client interceptors.
func (c *GroupzClient) Interceptors() []Interceptor {
	return c.inters.Groupz
}

func (c *GroupzClient) mutate(ctx context.Context, m *GroupzMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GroupzCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GroupzUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GroupzUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GroupzDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Groupz mutation op: %q", m.Op())
	}
}

// MemberClient is a client for the Member schema.
type MemberClient struct {
	config
}

// NewMemberClient returns a client for the Member from the given config.
func NewMemberClient(c config) *MemberClient {
	return &MemberClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `member.Hooks(f(g(h())))`.
func (c *MemberClient) Use(hooks ...Hook) {
	c.hooks.Member = append(c.hooks.Member, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `member.Intercept(f(g(h())))`.
func (c *MemberClient) Intercept(interceptors ...Interceptor) {
	c.inters.Member = append(c.inters.Member, interceptors...)
}

// Create returns a builder for creating a Member entity.
func (c *MemberClient) Create() *MemberCreate {
	mutation := newMemberMutation(c.config, OpCreate)
	return &MemberCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Member entities.
func (c *MemberClient) CreateBulk(builders ...*MemberCreate) *MemberCreateBulk {
	return &MemberCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Member.
func (c *MemberClient) Update() *MemberUpdate {
	mutation := newMemberMutation(c.config, OpUpdate)
	return &MemberUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MemberClient) UpdateOne(m *Member) *MemberUpdateOne {
	mutation := newMemberMutation(c.config, OpUpdateOne, withMember(m))
	return &MemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MemberClient) UpdateOneID(id int64) *MemberUpdateOne {
	mutation := newMemberMutation(c.config, OpUpdateOne, withMemberID(id))
	return &MemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Member.
func (c *MemberClient) Delete() *MemberDelete {
	mutation := newMemberMutation(c.config, OpDelete)
	return &MemberDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MemberClient) DeleteOne(m *Member) *MemberDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MemberClient) DeleteOneID(id int64) *MemberDeleteOne {
	builder := c.Delete().Where(member.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MemberDeleteOne{builder}
}

// Query returns a query builder for Member.
func (c *MemberClient) Query() *MemberQuery {
	return &MemberQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMember},
		inters: c.Interceptors(),
	}
}

// Get returns a Member entity by its id.
func (c *MemberClient) Get(ctx context.Context, id int64) (*Member, error) {
	return c.Query().Where(member.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MemberClient) GetX(ctx context.Context, id int64) *Member {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGroupz queries the groupz edge of a Member.
func (c *MemberClient) QueryGroupz(m *Member) *GroupzQuery {
	query := (&GroupzClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(member.Table, member.FieldID, id),
			sqlgraph.To(groupz.Table, groupz.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, member.GroupzTable, member.GroupzColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChallengeMembers queries the challenge_members edge of a Member.
func (c *MemberClient) QueryChallengeMembers(m *Member) *ChallengeMemberQuery {
	query := (&ChallengeMemberClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(member.Table, member.FieldID, id),
			sqlgraph.To(challengemember.Table, challengemember.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, member.ChallengeMembersTable, member.ChallengeMembersColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySeasonMembers queries the season_members edge of a Member.
func (c *MemberClient) QuerySeasonMembers(m *Member) *SeasonMemberQuery {
	query := (&SeasonMemberClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(member.Table, member.FieldID, id),
			sqlgraph.To(seasonmember.Table, seasonmember.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, member.SeasonMembersTable, member.SeasonMembersColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChallenge queries the challenge edge of a Member.
func (c *MemberClient) QueryChallenge(m *Member) *ChallengeQuery {
	query := (&ChallengeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(member.Table, member.FieldID, id),
			sqlgraph.To(challenge.Table, challenge.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, member.ChallengeTable, member.ChallengeColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MemberClient) Hooks() []Hook {
	return c.hooks.Member
}

// Interceptors returns the client interceptors.
func (c *MemberClient) Interceptors() []Interceptor {
	return c.inters.Member
}

func (c *MemberClient) mutate(ctx context.Context, m *MemberMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MemberCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MemberUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MemberDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Member mutation op: %q", m.Op())
	}
}

// SeasonClient is a client for the Season schema.
type SeasonClient struct {
	config
}

// NewSeasonClient returns a client for the Season from the given config.
func NewSeasonClient(c config) *SeasonClient {
	return &SeasonClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `season.Hooks(f(g(h())))`.
func (c *SeasonClient) Use(hooks ...Hook) {
	c.hooks.Season = append(c.hooks.Season, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `season.Intercept(f(g(h())))`.
func (c *SeasonClient) Intercept(interceptors ...Interceptor) {
	c.inters.Season = append(c.inters.Season, interceptors...)
}

// Create returns a builder for creating a Season entity.
func (c *SeasonClient) Create() *SeasonCreate {
	mutation := newSeasonMutation(c.config, OpCreate)
	return &SeasonCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Season entities.
func (c *SeasonClient) CreateBulk(builders ...*SeasonCreate) *SeasonCreateBulk {
	return &SeasonCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Season.
func (c *SeasonClient) Update() *SeasonUpdate {
	mutation := newSeasonMutation(c.config, OpUpdate)
	return &SeasonUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SeasonClient) UpdateOne(s *Season) *SeasonUpdateOne {
	mutation := newSeasonMutation(c.config, OpUpdateOne, withSeason(s))
	return &SeasonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SeasonClient) UpdateOneID(id int64) *SeasonUpdateOne {
	mutation := newSeasonMutation(c.config, OpUpdateOne, withSeasonID(id))
	return &SeasonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Season.
func (c *SeasonClient) Delete() *SeasonDelete {
	mutation := newSeasonMutation(c.config, OpDelete)
	return &SeasonDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SeasonClient) DeleteOne(s *Season) *SeasonDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SeasonClient) DeleteOneID(id int64) *SeasonDeleteOne {
	builder := c.Delete().Where(season.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SeasonDeleteOne{builder}
}

// Query returns a query builder for Season.
func (c *SeasonClient) Query() *SeasonQuery {
	return &SeasonQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSeason},
		inters: c.Interceptors(),
	}
}

// Get returns a Season entity by its id.
func (c *SeasonClient) Get(ctx context.Context, id int64) (*Season, error) {
	return c.Query().Where(season.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SeasonClient) GetX(ctx context.Context, id int64) *Season {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySeasonMembers queries the season_members edge of a Season.
func (c *SeasonClient) QuerySeasonMembers(s *Season) *SeasonMemberQuery {
	query := (&SeasonMemberClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(season.Table, season.FieldID, id),
			sqlgraph.To(seasonmember.Table, seasonmember.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, season.SeasonMembersTable, season.SeasonMembersColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SeasonClient) Hooks() []Hook {
	return c.hooks.Season
}

// Interceptors returns the client interceptors.
func (c *SeasonClient) Interceptors() []Interceptor {
	return c.inters.Season
}

func (c *SeasonClient) mutate(ctx context.Context, m *SeasonMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SeasonCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SeasonUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SeasonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SeasonDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Season mutation op: %q", m.Op())
	}
}

// SeasonMemberClient is a client for the SeasonMember schema.
type SeasonMemberClient struct {
	config
}

// NewSeasonMemberClient returns a client for the SeasonMember from the given config.
func NewSeasonMemberClient(c config) *SeasonMemberClient {
	return &SeasonMemberClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `seasonmember.Hooks(f(g(h())))`.
func (c *SeasonMemberClient) Use(hooks ...Hook) {
	c.hooks.SeasonMember = append(c.hooks.SeasonMember, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `seasonmember.Intercept(f(g(h())))`.
func (c *SeasonMemberClient) Intercept(interceptors ...Interceptor) {
	c.inters.SeasonMember = append(c.inters.SeasonMember, interceptors...)
}

// Create returns a builder for creating a SeasonMember entity.
func (c *SeasonMemberClient) Create() *SeasonMemberCreate {
	mutation := newSeasonMemberMutation(c.config, OpCreate)
	return &SeasonMemberCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SeasonMember entities.
func (c *SeasonMemberClient) CreateBulk(builders ...*SeasonMemberCreate) *SeasonMemberCreateBulk {
	return &SeasonMemberCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SeasonMember.
func (c *SeasonMemberClient) Update() *SeasonMemberUpdate {
	mutation := newSeasonMemberMutation(c.config, OpUpdate)
	return &SeasonMemberUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SeasonMemberClient) UpdateOne(sm *SeasonMember) *SeasonMemberUpdateOne {
	mutation := newSeasonMemberMutation(c.config, OpUpdateOne, withSeasonMember(sm))
	return &SeasonMemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SeasonMemberClient) UpdateOneID(id int64) *SeasonMemberUpdateOne {
	mutation := newSeasonMemberMutation(c.config, OpUpdateOne, withSeasonMemberID(id))
	return &SeasonMemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SeasonMember.
func (c *SeasonMemberClient) Delete() *SeasonMemberDelete {
	mutation := newSeasonMemberMutation(c.config, OpDelete)
	return &SeasonMemberDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SeasonMemberClient) DeleteOne(sm *SeasonMember) *SeasonMemberDeleteOne {
	return c.DeleteOneID(sm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SeasonMemberClient) DeleteOneID(id int64) *SeasonMemberDeleteOne {
	builder := c.Delete().Where(seasonmember.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SeasonMemberDeleteOne{builder}
}

// Query returns a query builder for SeasonMember.
func (c *SeasonMemberClient) Query() *SeasonMemberQuery {
	return &SeasonMemberQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSeasonMember},
		inters: c.Interceptors(),
	}
}

// Get returns a SeasonMember entity by its id.
func (c *SeasonMemberClient) Get(ctx context.Context, id int64) (*SeasonMember, error) {
	return c.Query().Where(seasonmember.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SeasonMemberClient) GetX(ctx context.Context, id int64) *SeasonMember {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySeason queries the season edge of a SeasonMember.
func (c *SeasonMemberClient) QuerySeason(sm *SeasonMember) *SeasonQuery {
	query := (&SeasonClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(seasonmember.Table, seasonmember.FieldID, id),
			sqlgraph.To(season.Table, season.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, seasonmember.SeasonTable, seasonmember.SeasonColumn),
		)
		fromV = sqlgraph.Neighbors(sm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMember queries the member edge of a SeasonMember.
func (c *SeasonMemberClient) QueryMember(sm *SeasonMember) *MemberQuery {
	query := (&MemberClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(seasonmember.Table, seasonmember.FieldID, id),
			sqlgraph.To(member.Table, member.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, seasonmember.MemberTable, seasonmember.MemberColumn),
		)
		fromV = sqlgraph.Neighbors(sm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SeasonMemberClient) Hooks() []Hook {
	return c.hooks.SeasonMember
}

// Interceptors returns the client interceptors.
func (c *SeasonMemberClient) Interceptors() []Interceptor {
	return c.inters.SeasonMember
}

func (c *SeasonMemberClient) mutate(ctx context.Context, m *SeasonMemberMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SeasonMemberCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SeasonMemberUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SeasonMemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SeasonMemberDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SeasonMember mutation op: %q", m.Op())
	}
}
