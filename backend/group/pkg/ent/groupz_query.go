// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/manhrev/runtracking/backend/group/pkg/ent/challenge"
	"github.com/manhrev/runtracking/backend/group/pkg/ent/groupz"
	"github.com/manhrev/runtracking/backend/group/pkg/ent/member"
	"github.com/manhrev/runtracking/backend/group/pkg/ent/predicate"
)

// GroupzQuery is the builder for querying Groupz entities.
type GroupzQuery struct {
	config
	ctx            *QueryContext
	order          []OrderFunc
	inters         []Interceptor
	predicates     []predicate.Groupz
	withMembers    *MemberQuery
	withChallenges *ChallengeQuery
	modifiers      []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the GroupzQuery builder.
func (gq *GroupzQuery) Where(ps ...predicate.Groupz) *GroupzQuery {
	gq.predicates = append(gq.predicates, ps...)
	return gq
}

// Limit the number of records to be returned by this query.
func (gq *GroupzQuery) Limit(limit int) *GroupzQuery {
	gq.ctx.Limit = &limit
	return gq
}

// Offset to start from.
func (gq *GroupzQuery) Offset(offset int) *GroupzQuery {
	gq.ctx.Offset = &offset
	return gq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (gq *GroupzQuery) Unique(unique bool) *GroupzQuery {
	gq.ctx.Unique = &unique
	return gq
}

// Order specifies how the records should be ordered.
func (gq *GroupzQuery) Order(o ...OrderFunc) *GroupzQuery {
	gq.order = append(gq.order, o...)
	return gq
}

// QueryMembers chains the current query on the "members" edge.
func (gq *GroupzQuery) QueryMembers() *MemberQuery {
	query := (&MemberClient{config: gq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(groupz.Table, groupz.FieldID, selector),
			sqlgraph.To(member.Table, member.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, groupz.MembersTable, groupz.MembersColumn),
		)
		fromU = sqlgraph.SetNeighbors(gq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChallenges chains the current query on the "challenges" edge.
func (gq *GroupzQuery) QueryChallenges() *ChallengeQuery {
	query := (&ChallengeClient{config: gq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(groupz.Table, groupz.FieldID, selector),
			sqlgraph.To(challenge.Table, challenge.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, groupz.ChallengesTable, groupz.ChallengesColumn),
		)
		fromU = sqlgraph.SetNeighbors(gq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Groupz entity from the query.
// Returns a *NotFoundError when no Groupz was found.
func (gq *GroupzQuery) First(ctx context.Context) (*Groupz, error) {
	nodes, err := gq.Limit(1).All(setContextOp(ctx, gq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{groupz.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (gq *GroupzQuery) FirstX(ctx context.Context) *Groupz {
	node, err := gq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Groupz ID from the query.
// Returns a *NotFoundError when no Groupz ID was found.
func (gq *GroupzQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = gq.Limit(1).IDs(setContextOp(ctx, gq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{groupz.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (gq *GroupzQuery) FirstIDX(ctx context.Context) int64 {
	id, err := gq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Groupz entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Groupz entity is found.
// Returns a *NotFoundError when no Groupz entities are found.
func (gq *GroupzQuery) Only(ctx context.Context) (*Groupz, error) {
	nodes, err := gq.Limit(2).All(setContextOp(ctx, gq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{groupz.Label}
	default:
		return nil, &NotSingularError{groupz.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (gq *GroupzQuery) OnlyX(ctx context.Context) *Groupz {
	node, err := gq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Groupz ID in the query.
// Returns a *NotSingularError when more than one Groupz ID is found.
// Returns a *NotFoundError when no entities are found.
func (gq *GroupzQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = gq.Limit(2).IDs(setContextOp(ctx, gq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{groupz.Label}
	default:
		err = &NotSingularError{groupz.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (gq *GroupzQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := gq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Groupzs.
func (gq *GroupzQuery) All(ctx context.Context) ([]*Groupz, error) {
	ctx = setContextOp(ctx, gq.ctx, "All")
	if err := gq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Groupz, *GroupzQuery]()
	return withInterceptors[[]*Groupz](ctx, gq, qr, gq.inters)
}

// AllX is like All, but panics if an error occurs.
func (gq *GroupzQuery) AllX(ctx context.Context) []*Groupz {
	nodes, err := gq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Groupz IDs.
func (gq *GroupzQuery) IDs(ctx context.Context) ([]int64, error) {
	var ids []int64
	ctx = setContextOp(ctx, gq.ctx, "IDs")
	if err := gq.Select(groupz.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (gq *GroupzQuery) IDsX(ctx context.Context) []int64 {
	ids, err := gq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (gq *GroupzQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, gq.ctx, "Count")
	if err := gq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, gq, querierCount[*GroupzQuery](), gq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (gq *GroupzQuery) CountX(ctx context.Context) int {
	count, err := gq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (gq *GroupzQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, gq.ctx, "Exist")
	switch _, err := gq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (gq *GroupzQuery) ExistX(ctx context.Context) bool {
	exist, err := gq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the GroupzQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (gq *GroupzQuery) Clone() *GroupzQuery {
	if gq == nil {
		return nil
	}
	return &GroupzQuery{
		config:         gq.config,
		ctx:            gq.ctx.Clone(),
		order:          append([]OrderFunc{}, gq.order...),
		inters:         append([]Interceptor{}, gq.inters...),
		predicates:     append([]predicate.Groupz{}, gq.predicates...),
		withMembers:    gq.withMembers.Clone(),
		withChallenges: gq.withChallenges.Clone(),
		// clone intermediate query.
		sql:  gq.sql.Clone(),
		path: gq.path,
	}
}

// WithMembers tells the query-builder to eager-load the nodes that are connected to
// the "members" edge. The optional arguments are used to configure the query builder of the edge.
func (gq *GroupzQuery) WithMembers(opts ...func(*MemberQuery)) *GroupzQuery {
	query := (&MemberClient{config: gq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gq.withMembers = query
	return gq
}

// WithChallenges tells the query-builder to eager-load the nodes that are connected to
// the "challenges" edge. The optional arguments are used to configure the query builder of the edge.
func (gq *GroupzQuery) WithChallenges(opts ...func(*ChallengeQuery)) *GroupzQuery {
	query := (&ChallengeClient{config: gq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gq.withChallenges = query
	return gq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Groupz.Query().
//		GroupBy(groupz.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (gq *GroupzQuery) GroupBy(field string, fields ...string) *GroupzGroupBy {
	gq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &GroupzGroupBy{build: gq}
	grbuild.flds = &gq.ctx.Fields
	grbuild.label = groupz.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.Groupz.Query().
//		Select(groupz.FieldName).
//		Scan(ctx, &v)
//
func (gq *GroupzQuery) Select(fields ...string) *GroupzSelect {
	gq.ctx.Fields = append(gq.ctx.Fields, fields...)
	sbuild := &GroupzSelect{GroupzQuery: gq}
	sbuild.label = groupz.Label
	sbuild.flds, sbuild.scan = &gq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a GroupzSelect configured with the given aggregations.
func (gq *GroupzQuery) Aggregate(fns ...AggregateFunc) *GroupzSelect {
	return gq.Select().Aggregate(fns...)
}

func (gq *GroupzQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range gq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, gq); err != nil {
				return err
			}
		}
	}
	for _, f := range gq.ctx.Fields {
		if !groupz.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if gq.path != nil {
		prev, err := gq.path(ctx)
		if err != nil {
			return err
		}
		gq.sql = prev
	}
	return nil
}

func (gq *GroupzQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Groupz, error) {
	var (
		nodes       = []*Groupz{}
		_spec       = gq.querySpec()
		loadedTypes = [2]bool{
			gq.withMembers != nil,
			gq.withChallenges != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Groupz).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Groupz{config: gq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(gq.modifiers) > 0 {
		_spec.Modifiers = gq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, gq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := gq.withMembers; query != nil {
		if err := gq.loadMembers(ctx, query, nodes,
			func(n *Groupz) { n.Edges.Members = []*Member{} },
			func(n *Groupz, e *Member) { n.Edges.Members = append(n.Edges.Members, e) }); err != nil {
			return nil, err
		}
	}
	if query := gq.withChallenges; query != nil {
		if err := gq.loadChallenges(ctx, query, nodes,
			func(n *Groupz) { n.Edges.Challenges = []*Challenge{} },
			func(n *Groupz, e *Challenge) { n.Edges.Challenges = append(n.Edges.Challenges, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (gq *GroupzQuery) loadMembers(ctx context.Context, query *MemberQuery, nodes []*Groupz, init func(*Groupz), assign func(*Groupz, *Member)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*Groupz)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Member(func(s *sql.Selector) {
		s.Where(sql.InValues(groupz.MembersColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.groupz_members
		if fk == nil {
			return fmt.Errorf(`foreign-key "groupz_members" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "groupz_members" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (gq *GroupzQuery) loadChallenges(ctx context.Context, query *ChallengeQuery, nodes []*Groupz, init func(*Groupz), assign func(*Groupz, *Challenge)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*Groupz)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Challenge(func(s *sql.Selector) {
		s.Where(sql.InValues(groupz.ChallengesColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.groupz_challenges
		if fk == nil {
			return fmt.Errorf(`foreign-key "groupz_challenges" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "groupz_challenges" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (gq *GroupzQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := gq.querySpec()
	if len(gq.modifiers) > 0 {
		_spec.Modifiers = gq.modifiers
	}
	_spec.Node.Columns = gq.ctx.Fields
	if len(gq.ctx.Fields) > 0 {
		_spec.Unique = gq.ctx.Unique != nil && *gq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, gq.driver, _spec)
}

func (gq *GroupzQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   groupz.Table,
			Columns: groupz.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: groupz.FieldID,
			},
		},
		From:   gq.sql,
		Unique: true,
	}
	if unique := gq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := gq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, groupz.FieldID)
		for i := range fields {
			if fields[i] != groupz.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := gq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := gq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := gq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := gq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (gq *GroupzQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(gq.driver.Dialect())
	t1 := builder.Table(groupz.Table)
	columns := gq.ctx.Fields
	if len(columns) == 0 {
		columns = groupz.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if gq.sql != nil {
		selector = gq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if gq.ctx.Unique != nil && *gq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range gq.modifiers {
		m(selector)
	}
	for _, p := range gq.predicates {
		p(selector)
	}
	for _, p := range gq.order {
		p(selector)
	}
	if offset := gq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := gq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (gq *GroupzQuery) Modify(modifiers ...func(s *sql.Selector)) *GroupzSelect {
	gq.modifiers = append(gq.modifiers, modifiers...)
	return gq.Select()
}

// GroupzGroupBy is the group-by builder for Groupz entities.
type GroupzGroupBy struct {
	selector
	build *GroupzQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ggb *GroupzGroupBy) Aggregate(fns ...AggregateFunc) *GroupzGroupBy {
	ggb.fns = append(ggb.fns, fns...)
	return ggb
}

// Scan applies the selector query and scans the result into the given value.
func (ggb *GroupzGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ggb.build.ctx, "GroupBy")
	if err := ggb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GroupzQuery, *GroupzGroupBy](ctx, ggb.build, ggb, ggb.build.inters, v)
}

func (ggb *GroupzGroupBy) sqlScan(ctx context.Context, root *GroupzQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ggb.fns))
	for _, fn := range ggb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ggb.flds)+len(ggb.fns))
		for _, f := range *ggb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ggb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ggb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// GroupzSelect is the builder for selecting fields of Groupz entities.
type GroupzSelect struct {
	*GroupzQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (gs *GroupzSelect) Aggregate(fns ...AggregateFunc) *GroupzSelect {
	gs.fns = append(gs.fns, fns...)
	return gs
}

// Scan applies the selector query and scans the result into the given value.
func (gs *GroupzSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, gs.ctx, "Select")
	if err := gs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GroupzQuery, *GroupzSelect](ctx, gs.GroupzQuery, gs, gs.inters, v)
}

func (gs *GroupzSelect) sqlScan(ctx context.Context, root *GroupzQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(gs.fns))
	for _, fn := range gs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*gs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := gs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (gs *GroupzSelect) Modify(modifiers ...func(s *sql.Selector)) *GroupzSelect {
	gs.modifiers = append(gs.modifiers, modifiers...)
	return gs
}
