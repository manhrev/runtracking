// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/manhrev/runtracking/backend/group/pkg/ent/predicate"
	"github.com/manhrev/runtracking/backend/group/pkg/ent/season"
	"github.com/manhrev/runtracking/backend/group/pkg/ent/seasonmember"
)

// SeasonUpdate is the builder for updating Season entities.
type SeasonUpdate struct {
	config
	hooks     []Hook
	mutation  *SeasonMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SeasonUpdate builder.
func (su *SeasonUpdate) Where(ps ...predicate.Season) *SeasonUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetName sets the "name" field.
func (su *SeasonUpdate) SetName(s string) *SeasonUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *SeasonUpdate) SetNillableName(s *string) *SeasonUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// ClearName clears the value of the "name" field.
func (su *SeasonUpdate) ClearName() *SeasonUpdate {
	su.mutation.ClearName()
	return su
}

// SetDescription sets the "description" field.
func (su *SeasonUpdate) SetDescription(s string) *SeasonUpdate {
	su.mutation.SetDescription(s)
	return su
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (su *SeasonUpdate) SetNillableDescription(s *string) *SeasonUpdate {
	if s != nil {
		su.SetDescription(*s)
	}
	return su
}

// ClearDescription clears the value of the "description" field.
func (su *SeasonUpdate) ClearDescription() *SeasonUpdate {
	su.mutation.ClearDescription()
	return su
}

// SetPicture sets the "picture" field.
func (su *SeasonUpdate) SetPicture(s string) *SeasonUpdate {
	su.mutation.SetPicture(s)
	return su
}

// SetNillablePicture sets the "picture" field if the given value is not nil.
func (su *SeasonUpdate) SetNillablePicture(s *string) *SeasonUpdate {
	if s != nil {
		su.SetPicture(*s)
	}
	return su
}

// SetCreatedAt sets the "created_at" field.
func (su *SeasonUpdate) SetCreatedAt(t time.Time) *SeasonUpdate {
	su.mutation.SetCreatedAt(t)
	return su
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (su *SeasonUpdate) SetNillableCreatedAt(t *time.Time) *SeasonUpdate {
	if t != nil {
		su.SetCreatedAt(*t)
	}
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SeasonUpdate) SetUpdatedAt(t time.Time) *SeasonUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetStartTime sets the "start_time" field.
func (su *SeasonUpdate) SetStartTime(t time.Time) *SeasonUpdate {
	su.mutation.SetStartTime(t)
	return su
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (su *SeasonUpdate) SetNillableStartTime(t *time.Time) *SeasonUpdate {
	if t != nil {
		su.SetStartTime(*t)
	}
	return su
}

// ClearStartTime clears the value of the "start_time" field.
func (su *SeasonUpdate) ClearStartTime() *SeasonUpdate {
	su.mutation.ClearStartTime()
	return su
}

// SetEndTime sets the "end_time" field.
func (su *SeasonUpdate) SetEndTime(t time.Time) *SeasonUpdate {
	su.mutation.SetEndTime(t)
	return su
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (su *SeasonUpdate) SetNillableEndTime(t *time.Time) *SeasonUpdate {
	if t != nil {
		su.SetEndTime(*t)
	}
	return su
}

// ClearEndTime clears the value of the "end_time" field.
func (su *SeasonUpdate) ClearEndTime() *SeasonUpdate {
	su.mutation.ClearEndTime()
	return su
}

// SetStatus sets the "status" field.
func (su *SeasonUpdate) SetStatus(i int64) *SeasonUpdate {
	su.mutation.ResetStatus()
	su.mutation.SetStatus(i)
	return su
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (su *SeasonUpdate) SetNillableStatus(i *int64) *SeasonUpdate {
	if i != nil {
		su.SetStatus(*i)
	}
	return su
}

// AddStatus adds i to the "status" field.
func (su *SeasonUpdate) AddStatus(i int64) *SeasonUpdate {
	su.mutation.AddStatus(i)
	return su
}

// AddSeasonMemberIDs adds the "season_members" edge to the SeasonMember entity by IDs.
func (su *SeasonUpdate) AddSeasonMemberIDs(ids ...int64) *SeasonUpdate {
	su.mutation.AddSeasonMemberIDs(ids...)
	return su
}

// AddSeasonMembers adds the "season_members" edges to the SeasonMember entity.
func (su *SeasonUpdate) AddSeasonMembers(s ...*SeasonMember) *SeasonUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddSeasonMemberIDs(ids...)
}

// Mutation returns the SeasonMutation object of the builder.
func (su *SeasonUpdate) Mutation() *SeasonMutation {
	return su.mutation
}

// ClearSeasonMembers clears all "season_members" edges to the SeasonMember entity.
func (su *SeasonUpdate) ClearSeasonMembers() *SeasonUpdate {
	su.mutation.ClearSeasonMembers()
	return su
}

// RemoveSeasonMemberIDs removes the "season_members" edge to SeasonMember entities by IDs.
func (su *SeasonUpdate) RemoveSeasonMemberIDs(ids ...int64) *SeasonUpdate {
	su.mutation.RemoveSeasonMemberIDs(ids...)
	return su
}

// RemoveSeasonMembers removes "season_members" edges to SeasonMember entities.
func (su *SeasonUpdate) RemoveSeasonMembers(s ...*SeasonMember) *SeasonUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveSeasonMemberIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SeasonUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks[int, SeasonMutation](ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SeasonUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SeasonUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SeasonUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SeasonUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := season.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (su *SeasonUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SeasonUpdate {
	su.modifiers = append(su.modifiers, modifiers...)
	return su
}

func (su *SeasonUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   season.Table,
			Columns: season.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: season.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(season.FieldName, field.TypeString, value)
	}
	if su.mutation.NameCleared() {
		_spec.ClearField(season.FieldName, field.TypeString)
	}
	if value, ok := su.mutation.Description(); ok {
		_spec.SetField(season.FieldDescription, field.TypeString, value)
	}
	if su.mutation.DescriptionCleared() {
		_spec.ClearField(season.FieldDescription, field.TypeString)
	}
	if value, ok := su.mutation.Picture(); ok {
		_spec.SetField(season.FieldPicture, field.TypeString, value)
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.SetField(season.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(season.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.StartTime(); ok {
		_spec.SetField(season.FieldStartTime, field.TypeTime, value)
	}
	if su.mutation.StartTimeCleared() {
		_spec.ClearField(season.FieldStartTime, field.TypeTime)
	}
	if value, ok := su.mutation.EndTime(); ok {
		_spec.SetField(season.FieldEndTime, field.TypeTime, value)
	}
	if su.mutation.EndTimeCleared() {
		_spec.ClearField(season.FieldEndTime, field.TypeTime)
	}
	if value, ok := su.mutation.Status(); ok {
		_spec.SetField(season.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedStatus(); ok {
		_spec.AddField(season.FieldStatus, field.TypeInt64, value)
	}
	if su.mutation.SeasonMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   season.SeasonMembersTable,
			Columns: []string{season.SeasonMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: seasonmember.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedSeasonMembersIDs(); len(nodes) > 0 && !su.mutation.SeasonMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   season.SeasonMembersTable,
			Columns: []string{season.SeasonMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: seasonmember.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.SeasonMembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   season.SeasonMembersTable,
			Columns: []string{season.SeasonMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: seasonmember.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(su.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{season.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SeasonUpdateOne is the builder for updating a single Season entity.
type SeasonUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SeasonMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetName sets the "name" field.
func (suo *SeasonUpdateOne) SetName(s string) *SeasonUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *SeasonUpdateOne) SetNillableName(s *string) *SeasonUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// ClearName clears the value of the "name" field.
func (suo *SeasonUpdateOne) ClearName() *SeasonUpdateOne {
	suo.mutation.ClearName()
	return suo
}

// SetDescription sets the "description" field.
func (suo *SeasonUpdateOne) SetDescription(s string) *SeasonUpdateOne {
	suo.mutation.SetDescription(s)
	return suo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (suo *SeasonUpdateOne) SetNillableDescription(s *string) *SeasonUpdateOne {
	if s != nil {
		suo.SetDescription(*s)
	}
	return suo
}

// ClearDescription clears the value of the "description" field.
func (suo *SeasonUpdateOne) ClearDescription() *SeasonUpdateOne {
	suo.mutation.ClearDescription()
	return suo
}

// SetPicture sets the "picture" field.
func (suo *SeasonUpdateOne) SetPicture(s string) *SeasonUpdateOne {
	suo.mutation.SetPicture(s)
	return suo
}

// SetNillablePicture sets the "picture" field if the given value is not nil.
func (suo *SeasonUpdateOne) SetNillablePicture(s *string) *SeasonUpdateOne {
	if s != nil {
		suo.SetPicture(*s)
	}
	return suo
}

// SetCreatedAt sets the "created_at" field.
func (suo *SeasonUpdateOne) SetCreatedAt(t time.Time) *SeasonUpdateOne {
	suo.mutation.SetCreatedAt(t)
	return suo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suo *SeasonUpdateOne) SetNillableCreatedAt(t *time.Time) *SeasonUpdateOne {
	if t != nil {
		suo.SetCreatedAt(*t)
	}
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SeasonUpdateOne) SetUpdatedAt(t time.Time) *SeasonUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetStartTime sets the "start_time" field.
func (suo *SeasonUpdateOne) SetStartTime(t time.Time) *SeasonUpdateOne {
	suo.mutation.SetStartTime(t)
	return suo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (suo *SeasonUpdateOne) SetNillableStartTime(t *time.Time) *SeasonUpdateOne {
	if t != nil {
		suo.SetStartTime(*t)
	}
	return suo
}

// ClearStartTime clears the value of the "start_time" field.
func (suo *SeasonUpdateOne) ClearStartTime() *SeasonUpdateOne {
	suo.mutation.ClearStartTime()
	return suo
}

// SetEndTime sets the "end_time" field.
func (suo *SeasonUpdateOne) SetEndTime(t time.Time) *SeasonUpdateOne {
	suo.mutation.SetEndTime(t)
	return suo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (suo *SeasonUpdateOne) SetNillableEndTime(t *time.Time) *SeasonUpdateOne {
	if t != nil {
		suo.SetEndTime(*t)
	}
	return suo
}

// ClearEndTime clears the value of the "end_time" field.
func (suo *SeasonUpdateOne) ClearEndTime() *SeasonUpdateOne {
	suo.mutation.ClearEndTime()
	return suo
}

// SetStatus sets the "status" field.
func (suo *SeasonUpdateOne) SetStatus(i int64) *SeasonUpdateOne {
	suo.mutation.ResetStatus()
	suo.mutation.SetStatus(i)
	return suo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suo *SeasonUpdateOne) SetNillableStatus(i *int64) *SeasonUpdateOne {
	if i != nil {
		suo.SetStatus(*i)
	}
	return suo
}

// AddStatus adds i to the "status" field.
func (suo *SeasonUpdateOne) AddStatus(i int64) *SeasonUpdateOne {
	suo.mutation.AddStatus(i)
	return suo
}

// AddSeasonMemberIDs adds the "season_members" edge to the SeasonMember entity by IDs.
func (suo *SeasonUpdateOne) AddSeasonMemberIDs(ids ...int64) *SeasonUpdateOne {
	suo.mutation.AddSeasonMemberIDs(ids...)
	return suo
}

// AddSeasonMembers adds the "season_members" edges to the SeasonMember entity.
func (suo *SeasonUpdateOne) AddSeasonMembers(s ...*SeasonMember) *SeasonUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddSeasonMemberIDs(ids...)
}

// Mutation returns the SeasonMutation object of the builder.
func (suo *SeasonUpdateOne) Mutation() *SeasonMutation {
	return suo.mutation
}

// ClearSeasonMembers clears all "season_members" edges to the SeasonMember entity.
func (suo *SeasonUpdateOne) ClearSeasonMembers() *SeasonUpdateOne {
	suo.mutation.ClearSeasonMembers()
	return suo
}

// RemoveSeasonMemberIDs removes the "season_members" edge to SeasonMember entities by IDs.
func (suo *SeasonUpdateOne) RemoveSeasonMemberIDs(ids ...int64) *SeasonUpdateOne {
	suo.mutation.RemoveSeasonMemberIDs(ids...)
	return suo
}

// RemoveSeasonMembers removes "season_members" edges to SeasonMember entities.
func (suo *SeasonUpdateOne) RemoveSeasonMembers(s ...*SeasonMember) *SeasonUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveSeasonMemberIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SeasonUpdateOne) Select(field string, fields ...string) *SeasonUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Season entity.
func (suo *SeasonUpdateOne) Save(ctx context.Context) (*Season, error) {
	suo.defaults()
	return withHooks[*Season, SeasonMutation](ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SeasonUpdateOne) SaveX(ctx context.Context) *Season {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SeasonUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SeasonUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SeasonUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := season.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (suo *SeasonUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SeasonUpdateOne {
	suo.modifiers = append(suo.modifiers, modifiers...)
	return suo
}

func (suo *SeasonUpdateOne) sqlSave(ctx context.Context) (_node *Season, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   season.Table,
			Columns: season.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: season.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Season.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, season.FieldID)
		for _, f := range fields {
			if !season.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != season.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(season.FieldName, field.TypeString, value)
	}
	if suo.mutation.NameCleared() {
		_spec.ClearField(season.FieldName, field.TypeString)
	}
	if value, ok := suo.mutation.Description(); ok {
		_spec.SetField(season.FieldDescription, field.TypeString, value)
	}
	if suo.mutation.DescriptionCleared() {
		_spec.ClearField(season.FieldDescription, field.TypeString)
	}
	if value, ok := suo.mutation.Picture(); ok {
		_spec.SetField(season.FieldPicture, field.TypeString, value)
	}
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.SetField(season.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(season.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.StartTime(); ok {
		_spec.SetField(season.FieldStartTime, field.TypeTime, value)
	}
	if suo.mutation.StartTimeCleared() {
		_spec.ClearField(season.FieldStartTime, field.TypeTime)
	}
	if value, ok := suo.mutation.EndTime(); ok {
		_spec.SetField(season.FieldEndTime, field.TypeTime, value)
	}
	if suo.mutation.EndTimeCleared() {
		_spec.ClearField(season.FieldEndTime, field.TypeTime)
	}
	if value, ok := suo.mutation.Status(); ok {
		_spec.SetField(season.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedStatus(); ok {
		_spec.AddField(season.FieldStatus, field.TypeInt64, value)
	}
	if suo.mutation.SeasonMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   season.SeasonMembersTable,
			Columns: []string{season.SeasonMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: seasonmember.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedSeasonMembersIDs(); len(nodes) > 0 && !suo.mutation.SeasonMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   season.SeasonMembersTable,
			Columns: []string{season.SeasonMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: seasonmember.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.SeasonMembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   season.SeasonMembersTable,
			Columns: []string{season.SeasonMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: seasonmember.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(suo.modifiers...)
	_node = &Season{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{season.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
