// Code generated by ent, DO NOT EDIT.

package challenge

import (
	"time"
)

const (
	// Label holds the string label denoting the challenge type in the database.
	Label = "challenge"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldStartTime holds the string denoting the start_time field in the database.
	FieldStartTime = "start_time"
	// FieldEndTime holds the string denoting the end_time field in the database.
	FieldEndTime = "end_time"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldTypeID holds the string denoting the type_id field in the database.
	FieldTypeID = "type_id"
	// EdgeChallengeMembers holds the string denoting the challenge_members edge name in mutations.
	EdgeChallengeMembers = "challenge_members"
	// EdgeGroupz holds the string denoting the groupz edge name in mutations.
	EdgeGroupz = "groupz"
	// Table holds the table name of the challenge in the database.
	Table = "challenges"
	// ChallengeMembersTable is the table that holds the challenge_members relation/edge.
	ChallengeMembersTable = "challenge_members"
	// ChallengeMembersInverseTable is the table name for the ChallengeMember entity.
	// It exists in this package in order to avoid circular dependency with the "challengemember" package.
	ChallengeMembersInverseTable = "challenge_members"
	// ChallengeMembersColumn is the table column denoting the challenge_members relation/edge.
	ChallengeMembersColumn = "challenge_challenge_members"
	// GroupzTable is the table that holds the groupz relation/edge.
	GroupzTable = "challenges"
	// GroupzInverseTable is the table name for the Groupz entity.
	// It exists in this package in order to avoid circular dependency with the "groupz" package.
	GroupzInverseTable = "groupzs"
	// GroupzColumn is the table column denoting the groupz relation/edge.
	GroupzColumn = "groupz_challenges"
)

// Columns holds all SQL columns for challenge fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldStartTime,
	FieldEndTime,
	FieldDescription,
	FieldTypeID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "challenges"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"groupz_challenges",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)
