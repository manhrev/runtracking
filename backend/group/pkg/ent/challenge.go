// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/manhrev/runtracking/backend/group/pkg/ent/challenge"
	"github.com/manhrev/runtracking/backend/group/pkg/ent/groupz"
)

// Challenge is the model entity for the Challenge schema.
type Challenge struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// StartTime holds the value of the "start_time" field.
	StartTime time.Time `json:"start_time,omitempty"`
	// EndTime holds the value of the "end_time" field.
	EndTime time.Time `json:"end_time,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// TypeID holds the value of the "type_id" field.
	TypeID int64 `json:"type_id,omitempty"`
	// CompletedFirstMemberID holds the value of the "completed_first_member_id" field.
	CompletedFirstMemberID int64 `json:"completed_first_member_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ChallengeQuery when eager-loading is set.
	Edges             ChallengeEdges `json:"edges"`
	groupz_challenges *int64
}

// ChallengeEdges holds the relations/edges for other nodes in the graph.
type ChallengeEdges struct {
	// ChallengeMembers holds the value of the challenge_members edge.
	ChallengeMembers []*ChallengeMember `json:"challenge_members,omitempty"`
	// Groupz holds the value of the groupz edge.
	Groupz *Groupz `json:"groupz,omitempty"`
	// ChallengeRules holds the value of the challenge_rules edge.
	ChallengeRules []*ChallengeRule `json:"challenge_rules,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ChallengeMembersOrErr returns the ChallengeMembers value or an error if the edge
// was not loaded in eager-loading.
func (e ChallengeEdges) ChallengeMembersOrErr() ([]*ChallengeMember, error) {
	if e.loadedTypes[0] {
		return e.ChallengeMembers, nil
	}
	return nil, &NotLoadedError{edge: "challenge_members"}
}

// GroupzOrErr returns the Groupz value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChallengeEdges) GroupzOrErr() (*Groupz, error) {
	if e.loadedTypes[1] {
		if e.Groupz == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: groupz.Label}
		}
		return e.Groupz, nil
	}
	return nil, &NotLoadedError{edge: "groupz"}
}

// ChallengeRulesOrErr returns the ChallengeRules value or an error if the edge
// was not loaded in eager-loading.
func (e ChallengeEdges) ChallengeRulesOrErr() ([]*ChallengeRule, error) {
	if e.loadedTypes[2] {
		return e.ChallengeRules, nil
	}
	return nil, &NotLoadedError{edge: "challenge_rules"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Challenge) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case challenge.FieldID, challenge.FieldTypeID, challenge.FieldCompletedFirstMemberID:
			values[i] = new(sql.NullInt64)
		case challenge.FieldDescription:
			values[i] = new(sql.NullString)
		case challenge.FieldCreatedAt, challenge.FieldStartTime, challenge.FieldEndTime:
			values[i] = new(sql.NullTime)
		case challenge.ForeignKeys[0]: // groupz_challenges
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Challenge", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Challenge fields.
func (c *Challenge) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case challenge.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int64(value.Int64)
		case challenge.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case challenge.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				c.StartTime = value.Time
			}
		case challenge.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				c.EndTime = value.Time
			}
		case challenge.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				c.Description = value.String
			}
		case challenge.FieldTypeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type_id", values[i])
			} else if value.Valid {
				c.TypeID = value.Int64
			}
		case challenge.FieldCompletedFirstMemberID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field completed_first_member_id", values[i])
			} else if value.Valid {
				c.CompletedFirstMemberID = value.Int64
			}
		case challenge.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field groupz_challenges", value)
			} else if value.Valid {
				c.groupz_challenges = new(int64)
				*c.groupz_challenges = int64(value.Int64)
			}
		}
	}
	return nil
}

// QueryChallengeMembers queries the "challenge_members" edge of the Challenge entity.
func (c *Challenge) QueryChallengeMembers() *ChallengeMemberQuery {
	return NewChallengeClient(c.config).QueryChallengeMembers(c)
}

// QueryGroupz queries the "groupz" edge of the Challenge entity.
func (c *Challenge) QueryGroupz() *GroupzQuery {
	return NewChallengeClient(c.config).QueryGroupz(c)
}

// QueryChallengeRules queries the "challenge_rules" edge of the Challenge entity.
func (c *Challenge) QueryChallengeRules() *ChallengeRuleQuery {
	return NewChallengeClient(c.config).QueryChallengeRules(c)
}

// Update returns a builder for updating this Challenge.
// Note that you need to call Challenge.Unwrap() before calling this method if this Challenge
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Challenge) Update() *ChallengeUpdateOne {
	return NewChallengeClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Challenge entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Challenge) Unwrap() *Challenge {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Challenge is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Challenge) String() string {
	var builder strings.Builder
	builder.WriteString("Challenge(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("start_time=")
	builder.WriteString(c.StartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_time=")
	builder.WriteString(c.EndTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(c.Description)
	builder.WriteString(", ")
	builder.WriteString("type_id=")
	builder.WriteString(fmt.Sprintf("%v", c.TypeID))
	builder.WriteString(", ")
	builder.WriteString("completed_first_member_id=")
	builder.WriteString(fmt.Sprintf("%v", c.CompletedFirstMemberID))
	builder.WriteByte(')')
	return builder.String()
}

// Challenges is a parsable slice of Challenge.
type Challenges []*Challenge

func (c Challenges) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
