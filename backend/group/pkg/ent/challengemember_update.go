// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/manhrev/runtracking/backend/group/pkg/ent/challenge"
	"github.com/manhrev/runtracking/backend/group/pkg/ent/challengemember"
	"github.com/manhrev/runtracking/backend/group/pkg/ent/challengememberrule"
	"github.com/manhrev/runtracking/backend/group/pkg/ent/predicate"
)

// ChallengeMemberUpdate is the builder for updating ChallengeMember entities.
type ChallengeMemberUpdate struct {
	config
	hooks     []Hook
	mutation  *ChallengeMemberMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ChallengeMemberUpdate builder.
func (cmu *ChallengeMemberUpdate) Where(ps ...predicate.ChallengeMember) *ChallengeMemberUpdate {
	cmu.mutation.Where(ps...)
	return cmu
}

// SetMemberID sets the "member_id" field.
func (cmu *ChallengeMemberUpdate) SetMemberID(i int64) *ChallengeMemberUpdate {
	cmu.mutation.ResetMemberID()
	cmu.mutation.SetMemberID(i)
	return cmu
}

// AddMemberID adds i to the "member_id" field.
func (cmu *ChallengeMemberUpdate) AddMemberID(i int64) *ChallengeMemberUpdate {
	cmu.mutation.AddMemberID(i)
	return cmu
}

// AddChallengeMemberRuleIDs adds the "challenge_member_rules" edge to the ChallengeMemberRule entity by IDs.
func (cmu *ChallengeMemberUpdate) AddChallengeMemberRuleIDs(ids ...int64) *ChallengeMemberUpdate {
	cmu.mutation.AddChallengeMemberRuleIDs(ids...)
	return cmu
}

// AddChallengeMemberRules adds the "challenge_member_rules" edges to the ChallengeMemberRule entity.
func (cmu *ChallengeMemberUpdate) AddChallengeMemberRules(c ...*ChallengeMemberRule) *ChallengeMemberUpdate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cmu.AddChallengeMemberRuleIDs(ids...)
}

// SetChallengeID sets the "challenge" edge to the Challenge entity by ID.
func (cmu *ChallengeMemberUpdate) SetChallengeID(id int64) *ChallengeMemberUpdate {
	cmu.mutation.SetChallengeID(id)
	return cmu
}

// SetNillableChallengeID sets the "challenge" edge to the Challenge entity by ID if the given value is not nil.
func (cmu *ChallengeMemberUpdate) SetNillableChallengeID(id *int64) *ChallengeMemberUpdate {
	if id != nil {
		cmu = cmu.SetChallengeID(*id)
	}
	return cmu
}

// SetChallenge sets the "challenge" edge to the Challenge entity.
func (cmu *ChallengeMemberUpdate) SetChallenge(c *Challenge) *ChallengeMemberUpdate {
	return cmu.SetChallengeID(c.ID)
}

// Mutation returns the ChallengeMemberMutation object of the builder.
func (cmu *ChallengeMemberUpdate) Mutation() *ChallengeMemberMutation {
	return cmu.mutation
}

// ClearChallengeMemberRules clears all "challenge_member_rules" edges to the ChallengeMemberRule entity.
func (cmu *ChallengeMemberUpdate) ClearChallengeMemberRules() *ChallengeMemberUpdate {
	cmu.mutation.ClearChallengeMemberRules()
	return cmu
}

// RemoveChallengeMemberRuleIDs removes the "challenge_member_rules" edge to ChallengeMemberRule entities by IDs.
func (cmu *ChallengeMemberUpdate) RemoveChallengeMemberRuleIDs(ids ...int64) *ChallengeMemberUpdate {
	cmu.mutation.RemoveChallengeMemberRuleIDs(ids...)
	return cmu
}

// RemoveChallengeMemberRules removes "challenge_member_rules" edges to ChallengeMemberRule entities.
func (cmu *ChallengeMemberUpdate) RemoveChallengeMemberRules(c ...*ChallengeMemberRule) *ChallengeMemberUpdate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cmu.RemoveChallengeMemberRuleIDs(ids...)
}

// ClearChallenge clears the "challenge" edge to the Challenge entity.
func (cmu *ChallengeMemberUpdate) ClearChallenge() *ChallengeMemberUpdate {
	cmu.mutation.ClearChallenge()
	return cmu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cmu *ChallengeMemberUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ChallengeMemberMutation](ctx, cmu.sqlSave, cmu.mutation, cmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cmu *ChallengeMemberUpdate) SaveX(ctx context.Context) int {
	affected, err := cmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cmu *ChallengeMemberUpdate) Exec(ctx context.Context) error {
	_, err := cmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmu *ChallengeMemberUpdate) ExecX(ctx context.Context) {
	if err := cmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cmu *ChallengeMemberUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ChallengeMemberUpdate {
	cmu.modifiers = append(cmu.modifiers, modifiers...)
	return cmu
}

func (cmu *ChallengeMemberUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   challengemember.Table,
			Columns: challengemember.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: challengemember.FieldID,
			},
		},
	}
	if ps := cmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmu.mutation.MemberID(); ok {
		_spec.SetField(challengemember.FieldMemberID, field.TypeInt64, value)
	}
	if value, ok := cmu.mutation.AddedMemberID(); ok {
		_spec.AddField(challengemember.FieldMemberID, field.TypeInt64, value)
	}
	if cmu.mutation.ChallengeMemberRulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   challengemember.ChallengeMemberRulesTable,
			Columns: []string{challengemember.ChallengeMemberRulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: challengememberrule.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmu.mutation.RemovedChallengeMemberRulesIDs(); len(nodes) > 0 && !cmu.mutation.ChallengeMemberRulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   challengemember.ChallengeMemberRulesTable,
			Columns: []string{challengemember.ChallengeMemberRulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: challengememberrule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmu.mutation.ChallengeMemberRulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   challengemember.ChallengeMemberRulesTable,
			Columns: []string{challengemember.ChallengeMemberRulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: challengememberrule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cmu.mutation.ChallengeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   challengemember.ChallengeTable,
			Columns: []string{challengemember.ChallengeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: challenge.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmu.mutation.ChallengeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   challengemember.ChallengeTable,
			Columns: []string{challengemember.ChallengeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: challenge.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cmu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{challengemember.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cmu.mutation.done = true
	return n, nil
}

// ChallengeMemberUpdateOne is the builder for updating a single ChallengeMember entity.
type ChallengeMemberUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ChallengeMemberMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetMemberID sets the "member_id" field.
func (cmuo *ChallengeMemberUpdateOne) SetMemberID(i int64) *ChallengeMemberUpdateOne {
	cmuo.mutation.ResetMemberID()
	cmuo.mutation.SetMemberID(i)
	return cmuo
}

// AddMemberID adds i to the "member_id" field.
func (cmuo *ChallengeMemberUpdateOne) AddMemberID(i int64) *ChallengeMemberUpdateOne {
	cmuo.mutation.AddMemberID(i)
	return cmuo
}

// AddChallengeMemberRuleIDs adds the "challenge_member_rules" edge to the ChallengeMemberRule entity by IDs.
func (cmuo *ChallengeMemberUpdateOne) AddChallengeMemberRuleIDs(ids ...int64) *ChallengeMemberUpdateOne {
	cmuo.mutation.AddChallengeMemberRuleIDs(ids...)
	return cmuo
}

// AddChallengeMemberRules adds the "challenge_member_rules" edges to the ChallengeMemberRule entity.
func (cmuo *ChallengeMemberUpdateOne) AddChallengeMemberRules(c ...*ChallengeMemberRule) *ChallengeMemberUpdateOne {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cmuo.AddChallengeMemberRuleIDs(ids...)
}

// SetChallengeID sets the "challenge" edge to the Challenge entity by ID.
func (cmuo *ChallengeMemberUpdateOne) SetChallengeID(id int64) *ChallengeMemberUpdateOne {
	cmuo.mutation.SetChallengeID(id)
	return cmuo
}

// SetNillableChallengeID sets the "challenge" edge to the Challenge entity by ID if the given value is not nil.
func (cmuo *ChallengeMemberUpdateOne) SetNillableChallengeID(id *int64) *ChallengeMemberUpdateOne {
	if id != nil {
		cmuo = cmuo.SetChallengeID(*id)
	}
	return cmuo
}

// SetChallenge sets the "challenge" edge to the Challenge entity.
func (cmuo *ChallengeMemberUpdateOne) SetChallenge(c *Challenge) *ChallengeMemberUpdateOne {
	return cmuo.SetChallengeID(c.ID)
}

// Mutation returns the ChallengeMemberMutation object of the builder.
func (cmuo *ChallengeMemberUpdateOne) Mutation() *ChallengeMemberMutation {
	return cmuo.mutation
}

// ClearChallengeMemberRules clears all "challenge_member_rules" edges to the ChallengeMemberRule entity.
func (cmuo *ChallengeMemberUpdateOne) ClearChallengeMemberRules() *ChallengeMemberUpdateOne {
	cmuo.mutation.ClearChallengeMemberRules()
	return cmuo
}

// RemoveChallengeMemberRuleIDs removes the "challenge_member_rules" edge to ChallengeMemberRule entities by IDs.
func (cmuo *ChallengeMemberUpdateOne) RemoveChallengeMemberRuleIDs(ids ...int64) *ChallengeMemberUpdateOne {
	cmuo.mutation.RemoveChallengeMemberRuleIDs(ids...)
	return cmuo
}

// RemoveChallengeMemberRules removes "challenge_member_rules" edges to ChallengeMemberRule entities.
func (cmuo *ChallengeMemberUpdateOne) RemoveChallengeMemberRules(c ...*ChallengeMemberRule) *ChallengeMemberUpdateOne {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cmuo.RemoveChallengeMemberRuleIDs(ids...)
}

// ClearChallenge clears the "challenge" edge to the Challenge entity.
func (cmuo *ChallengeMemberUpdateOne) ClearChallenge() *ChallengeMemberUpdateOne {
	cmuo.mutation.ClearChallenge()
	return cmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cmuo *ChallengeMemberUpdateOne) Select(field string, fields ...string) *ChallengeMemberUpdateOne {
	cmuo.fields = append([]string{field}, fields...)
	return cmuo
}

// Save executes the query and returns the updated ChallengeMember entity.
func (cmuo *ChallengeMemberUpdateOne) Save(ctx context.Context) (*ChallengeMember, error) {
	return withHooks[*ChallengeMember, ChallengeMemberMutation](ctx, cmuo.sqlSave, cmuo.mutation, cmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cmuo *ChallengeMemberUpdateOne) SaveX(ctx context.Context) *ChallengeMember {
	node, err := cmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cmuo *ChallengeMemberUpdateOne) Exec(ctx context.Context) error {
	_, err := cmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmuo *ChallengeMemberUpdateOne) ExecX(ctx context.Context) {
	if err := cmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cmuo *ChallengeMemberUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ChallengeMemberUpdateOne {
	cmuo.modifiers = append(cmuo.modifiers, modifiers...)
	return cmuo
}

func (cmuo *ChallengeMemberUpdateOne) sqlSave(ctx context.Context) (_node *ChallengeMember, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   challengemember.Table,
			Columns: challengemember.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: challengemember.FieldID,
			},
		},
	}
	id, ok := cmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ChallengeMember.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, challengemember.FieldID)
		for _, f := range fields {
			if !challengemember.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != challengemember.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmuo.mutation.MemberID(); ok {
		_spec.SetField(challengemember.FieldMemberID, field.TypeInt64, value)
	}
	if value, ok := cmuo.mutation.AddedMemberID(); ok {
		_spec.AddField(challengemember.FieldMemberID, field.TypeInt64, value)
	}
	if cmuo.mutation.ChallengeMemberRulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   challengemember.ChallengeMemberRulesTable,
			Columns: []string{challengemember.ChallengeMemberRulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: challengememberrule.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmuo.mutation.RemovedChallengeMemberRulesIDs(); len(nodes) > 0 && !cmuo.mutation.ChallengeMemberRulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   challengemember.ChallengeMemberRulesTable,
			Columns: []string{challengemember.ChallengeMemberRulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: challengememberrule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmuo.mutation.ChallengeMemberRulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   challengemember.ChallengeMemberRulesTable,
			Columns: []string{challengemember.ChallengeMemberRulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: challengememberrule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cmuo.mutation.ChallengeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   challengemember.ChallengeTable,
			Columns: []string{challengemember.ChallengeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: challenge.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmuo.mutation.ChallengeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   challengemember.ChallengeTable,
			Columns: []string{challengemember.ChallengeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: challenge.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cmuo.modifiers...)
	_node = &ChallengeMember{config: cmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{challengemember.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cmuo.mutation.done = true
	return _node, nil
}
