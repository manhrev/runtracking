// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/manhrev/runtracking/backend/group/pkg/ent/challengemember"
	"github.com/manhrev/runtracking/backend/group/pkg/ent/challengememberrule"
	"github.com/manhrev/runtracking/backend/group/pkg/ent/challengerule"
	"github.com/manhrev/runtracking/backend/group/pkg/ent/predicate"
)

// ChallengeMemberRuleQuery is the builder for querying ChallengeMemberRule entities.
type ChallengeMemberRuleQuery struct {
	config
	ctx                 *QueryContext
	order               []OrderFunc
	inters              []Interceptor
	predicates          []predicate.ChallengeMemberRule
	withChallengeMember *ChallengeMemberQuery
	withChallengeRule   *ChallengeRuleQuery
	withFKs             bool
	modifiers           []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ChallengeMemberRuleQuery builder.
func (cmrq *ChallengeMemberRuleQuery) Where(ps ...predicate.ChallengeMemberRule) *ChallengeMemberRuleQuery {
	cmrq.predicates = append(cmrq.predicates, ps...)
	return cmrq
}

// Limit the number of records to be returned by this query.
func (cmrq *ChallengeMemberRuleQuery) Limit(limit int) *ChallengeMemberRuleQuery {
	cmrq.ctx.Limit = &limit
	return cmrq
}

// Offset to start from.
func (cmrq *ChallengeMemberRuleQuery) Offset(offset int) *ChallengeMemberRuleQuery {
	cmrq.ctx.Offset = &offset
	return cmrq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cmrq *ChallengeMemberRuleQuery) Unique(unique bool) *ChallengeMemberRuleQuery {
	cmrq.ctx.Unique = &unique
	return cmrq
}

// Order specifies how the records should be ordered.
func (cmrq *ChallengeMemberRuleQuery) Order(o ...OrderFunc) *ChallengeMemberRuleQuery {
	cmrq.order = append(cmrq.order, o...)
	return cmrq
}

// QueryChallengeMember chains the current query on the "challenge_member" edge.
func (cmrq *ChallengeMemberRuleQuery) QueryChallengeMember() *ChallengeMemberQuery {
	query := (&ChallengeMemberClient{config: cmrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cmrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cmrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(challengememberrule.Table, challengememberrule.FieldID, selector),
			sqlgraph.To(challengemember.Table, challengemember.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, challengememberrule.ChallengeMemberTable, challengememberrule.ChallengeMemberColumn),
		)
		fromU = sqlgraph.SetNeighbors(cmrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChallengeRule chains the current query on the "challenge_rule" edge.
func (cmrq *ChallengeMemberRuleQuery) QueryChallengeRule() *ChallengeRuleQuery {
	query := (&ChallengeRuleClient{config: cmrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cmrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cmrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(challengememberrule.Table, challengememberrule.FieldID, selector),
			sqlgraph.To(challengerule.Table, challengerule.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, challengememberrule.ChallengeRuleTable, challengememberrule.ChallengeRuleColumn),
		)
		fromU = sqlgraph.SetNeighbors(cmrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ChallengeMemberRule entity from the query.
// Returns a *NotFoundError when no ChallengeMemberRule was found.
func (cmrq *ChallengeMemberRuleQuery) First(ctx context.Context) (*ChallengeMemberRule, error) {
	nodes, err := cmrq.Limit(1).All(setContextOp(ctx, cmrq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{challengememberrule.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cmrq *ChallengeMemberRuleQuery) FirstX(ctx context.Context) *ChallengeMemberRule {
	node, err := cmrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ChallengeMemberRule ID from the query.
// Returns a *NotFoundError when no ChallengeMemberRule ID was found.
func (cmrq *ChallengeMemberRuleQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = cmrq.Limit(1).IDs(setContextOp(ctx, cmrq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{challengememberrule.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cmrq *ChallengeMemberRuleQuery) FirstIDX(ctx context.Context) int64 {
	id, err := cmrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ChallengeMemberRule entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ChallengeMemberRule entity is found.
// Returns a *NotFoundError when no ChallengeMemberRule entities are found.
func (cmrq *ChallengeMemberRuleQuery) Only(ctx context.Context) (*ChallengeMemberRule, error) {
	nodes, err := cmrq.Limit(2).All(setContextOp(ctx, cmrq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{challengememberrule.Label}
	default:
		return nil, &NotSingularError{challengememberrule.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cmrq *ChallengeMemberRuleQuery) OnlyX(ctx context.Context) *ChallengeMemberRule {
	node, err := cmrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ChallengeMemberRule ID in the query.
// Returns a *NotSingularError when more than one ChallengeMemberRule ID is found.
// Returns a *NotFoundError when no entities are found.
func (cmrq *ChallengeMemberRuleQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = cmrq.Limit(2).IDs(setContextOp(ctx, cmrq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{challengememberrule.Label}
	default:
		err = &NotSingularError{challengememberrule.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cmrq *ChallengeMemberRuleQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := cmrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ChallengeMemberRules.
func (cmrq *ChallengeMemberRuleQuery) All(ctx context.Context) ([]*ChallengeMemberRule, error) {
	ctx = setContextOp(ctx, cmrq.ctx, "All")
	if err := cmrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ChallengeMemberRule, *ChallengeMemberRuleQuery]()
	return withInterceptors[[]*ChallengeMemberRule](ctx, cmrq, qr, cmrq.inters)
}

// AllX is like All, but panics if an error occurs.
func (cmrq *ChallengeMemberRuleQuery) AllX(ctx context.Context) []*ChallengeMemberRule {
	nodes, err := cmrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ChallengeMemberRule IDs.
func (cmrq *ChallengeMemberRuleQuery) IDs(ctx context.Context) ([]int64, error) {
	var ids []int64
	ctx = setContextOp(ctx, cmrq.ctx, "IDs")
	if err := cmrq.Select(challengememberrule.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cmrq *ChallengeMemberRuleQuery) IDsX(ctx context.Context) []int64 {
	ids, err := cmrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cmrq *ChallengeMemberRuleQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, cmrq.ctx, "Count")
	if err := cmrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, cmrq, querierCount[*ChallengeMemberRuleQuery](), cmrq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (cmrq *ChallengeMemberRuleQuery) CountX(ctx context.Context) int {
	count, err := cmrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cmrq *ChallengeMemberRuleQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, cmrq.ctx, "Exist")
	switch _, err := cmrq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (cmrq *ChallengeMemberRuleQuery) ExistX(ctx context.Context) bool {
	exist, err := cmrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ChallengeMemberRuleQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cmrq *ChallengeMemberRuleQuery) Clone() *ChallengeMemberRuleQuery {
	if cmrq == nil {
		return nil
	}
	return &ChallengeMemberRuleQuery{
		config:              cmrq.config,
		ctx:                 cmrq.ctx.Clone(),
		order:               append([]OrderFunc{}, cmrq.order...),
		inters:              append([]Interceptor{}, cmrq.inters...),
		predicates:          append([]predicate.ChallengeMemberRule{}, cmrq.predicates...),
		withChallengeMember: cmrq.withChallengeMember.Clone(),
		withChallengeRule:   cmrq.withChallengeRule.Clone(),
		// clone intermediate query.
		sql:  cmrq.sql.Clone(),
		path: cmrq.path,
	}
}

// WithChallengeMember tells the query-builder to eager-load the nodes that are connected to
// the "challenge_member" edge. The optional arguments are used to configure the query builder of the edge.
func (cmrq *ChallengeMemberRuleQuery) WithChallengeMember(opts ...func(*ChallengeMemberQuery)) *ChallengeMemberRuleQuery {
	query := (&ChallengeMemberClient{config: cmrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cmrq.withChallengeMember = query
	return cmrq
}

// WithChallengeRule tells the query-builder to eager-load the nodes that are connected to
// the "challenge_rule" edge. The optional arguments are used to configure the query builder of the edge.
func (cmrq *ChallengeMemberRuleQuery) WithChallengeRule(opts ...func(*ChallengeRuleQuery)) *ChallengeMemberRuleQuery {
	query := (&ChallengeRuleClient{config: cmrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cmrq.withChallengeRule = query
	return cmrq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Total int64 `json:"total,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ChallengeMemberRule.Query().
//		GroupBy(challengememberrule.FieldTotal).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (cmrq *ChallengeMemberRuleQuery) GroupBy(field string, fields ...string) *ChallengeMemberRuleGroupBy {
	cmrq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ChallengeMemberRuleGroupBy{build: cmrq}
	grbuild.flds = &cmrq.ctx.Fields
	grbuild.label = challengememberrule.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Total int64 `json:"total,omitempty"`
//	}
//
//	client.ChallengeMemberRule.Query().
//		Select(challengememberrule.FieldTotal).
//		Scan(ctx, &v)
//
func (cmrq *ChallengeMemberRuleQuery) Select(fields ...string) *ChallengeMemberRuleSelect {
	cmrq.ctx.Fields = append(cmrq.ctx.Fields, fields...)
	sbuild := &ChallengeMemberRuleSelect{ChallengeMemberRuleQuery: cmrq}
	sbuild.label = challengememberrule.Label
	sbuild.flds, sbuild.scan = &cmrq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ChallengeMemberRuleSelect configured with the given aggregations.
func (cmrq *ChallengeMemberRuleQuery) Aggregate(fns ...AggregateFunc) *ChallengeMemberRuleSelect {
	return cmrq.Select().Aggregate(fns...)
}

func (cmrq *ChallengeMemberRuleQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range cmrq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, cmrq); err != nil {
				return err
			}
		}
	}
	for _, f := range cmrq.ctx.Fields {
		if !challengememberrule.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if cmrq.path != nil {
		prev, err := cmrq.path(ctx)
		if err != nil {
			return err
		}
		cmrq.sql = prev
	}
	return nil
}

func (cmrq *ChallengeMemberRuleQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ChallengeMemberRule, error) {
	var (
		nodes       = []*ChallengeMemberRule{}
		withFKs     = cmrq.withFKs
		_spec       = cmrq.querySpec()
		loadedTypes = [2]bool{
			cmrq.withChallengeMember != nil,
			cmrq.withChallengeRule != nil,
		}
	)
	if cmrq.withChallengeMember != nil || cmrq.withChallengeRule != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, challengememberrule.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ChallengeMemberRule).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ChallengeMemberRule{config: cmrq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(cmrq.modifiers) > 0 {
		_spec.Modifiers = cmrq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cmrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := cmrq.withChallengeMember; query != nil {
		if err := cmrq.loadChallengeMember(ctx, query, nodes, nil,
			func(n *ChallengeMemberRule, e *ChallengeMember) { n.Edges.ChallengeMember = e }); err != nil {
			return nil, err
		}
	}
	if query := cmrq.withChallengeRule; query != nil {
		if err := cmrq.loadChallengeRule(ctx, query, nodes, nil,
			func(n *ChallengeMemberRule, e *ChallengeRule) { n.Edges.ChallengeRule = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (cmrq *ChallengeMemberRuleQuery) loadChallengeMember(ctx context.Context, query *ChallengeMemberQuery, nodes []*ChallengeMemberRule, init func(*ChallengeMemberRule), assign func(*ChallengeMemberRule, *ChallengeMember)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*ChallengeMemberRule)
	for i := range nodes {
		if nodes[i].challenge_member_challenge_member_rules == nil {
			continue
		}
		fk := *nodes[i].challenge_member_challenge_member_rules
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(challengemember.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "challenge_member_challenge_member_rules" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cmrq *ChallengeMemberRuleQuery) loadChallengeRule(ctx context.Context, query *ChallengeRuleQuery, nodes []*ChallengeMemberRule, init func(*ChallengeMemberRule), assign func(*ChallengeMemberRule, *ChallengeRule)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*ChallengeMemberRule)
	for i := range nodes {
		if nodes[i].challenge_rule_challenge_member_rules == nil {
			continue
		}
		fk := *nodes[i].challenge_rule_challenge_member_rules
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(challengerule.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "challenge_rule_challenge_member_rules" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (cmrq *ChallengeMemberRuleQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cmrq.querySpec()
	if len(cmrq.modifiers) > 0 {
		_spec.Modifiers = cmrq.modifiers
	}
	_spec.Node.Columns = cmrq.ctx.Fields
	if len(cmrq.ctx.Fields) > 0 {
		_spec.Unique = cmrq.ctx.Unique != nil && *cmrq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, cmrq.driver, _spec)
}

func (cmrq *ChallengeMemberRuleQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   challengememberrule.Table,
			Columns: challengememberrule.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: challengememberrule.FieldID,
			},
		},
		From:   cmrq.sql,
		Unique: true,
	}
	if unique := cmrq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := cmrq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, challengememberrule.FieldID)
		for i := range fields {
			if fields[i] != challengememberrule.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := cmrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cmrq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cmrq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cmrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cmrq *ChallengeMemberRuleQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cmrq.driver.Dialect())
	t1 := builder.Table(challengememberrule.Table)
	columns := cmrq.ctx.Fields
	if len(columns) == 0 {
		columns = challengememberrule.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cmrq.sql != nil {
		selector = cmrq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cmrq.ctx.Unique != nil && *cmrq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range cmrq.modifiers {
		m(selector)
	}
	for _, p := range cmrq.predicates {
		p(selector)
	}
	for _, p := range cmrq.order {
		p(selector)
	}
	if offset := cmrq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cmrq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (cmrq *ChallengeMemberRuleQuery) Modify(modifiers ...func(s *sql.Selector)) *ChallengeMemberRuleSelect {
	cmrq.modifiers = append(cmrq.modifiers, modifiers...)
	return cmrq.Select()
}

// ChallengeMemberRuleGroupBy is the group-by builder for ChallengeMemberRule entities.
type ChallengeMemberRuleGroupBy struct {
	selector
	build *ChallengeMemberRuleQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cmrgb *ChallengeMemberRuleGroupBy) Aggregate(fns ...AggregateFunc) *ChallengeMemberRuleGroupBy {
	cmrgb.fns = append(cmrgb.fns, fns...)
	return cmrgb
}

// Scan applies the selector query and scans the result into the given value.
func (cmrgb *ChallengeMemberRuleGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cmrgb.build.ctx, "GroupBy")
	if err := cmrgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ChallengeMemberRuleQuery, *ChallengeMemberRuleGroupBy](ctx, cmrgb.build, cmrgb, cmrgb.build.inters, v)
}

func (cmrgb *ChallengeMemberRuleGroupBy) sqlScan(ctx context.Context, root *ChallengeMemberRuleQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cmrgb.fns))
	for _, fn := range cmrgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cmrgb.flds)+len(cmrgb.fns))
		for _, f := range *cmrgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cmrgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cmrgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ChallengeMemberRuleSelect is the builder for selecting fields of ChallengeMemberRule entities.
type ChallengeMemberRuleSelect struct {
	*ChallengeMemberRuleQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cmrs *ChallengeMemberRuleSelect) Aggregate(fns ...AggregateFunc) *ChallengeMemberRuleSelect {
	cmrs.fns = append(cmrs.fns, fns...)
	return cmrs
}

// Scan applies the selector query and scans the result into the given value.
func (cmrs *ChallengeMemberRuleSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cmrs.ctx, "Select")
	if err := cmrs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ChallengeMemberRuleQuery, *ChallengeMemberRuleSelect](ctx, cmrs.ChallengeMemberRuleQuery, cmrs, cmrs.inters, v)
}

func (cmrs *ChallengeMemberRuleSelect) sqlScan(ctx context.Context, root *ChallengeMemberRuleQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cmrs.fns))
	for _, fn := range cmrs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cmrs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cmrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (cmrs *ChallengeMemberRuleSelect) Modify(modifiers ...func(s *sql.Selector)) *ChallengeMemberRuleSelect {
	cmrs.modifiers = append(cmrs.modifiers, modifiers...)
	return cmrs
}
