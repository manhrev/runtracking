// Code generated by ent, DO NOT EDIT.

package groupz

import (
	"time"
)

const (
	// Label holds the string label denoting the groupz type in the database.
	Label = "groupz"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldBackgroundPicture holds the string denoting the background_picture field in the database.
	FieldBackgroundPicture = "background_picture"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldLeaderID holds the string denoting the leader_id field in the database.
	FieldLeaderID = "leader_id"
	// EdgeMembers holds the string denoting the members edge name in mutations.
	EdgeMembers = "members"
	// EdgeChallenges holds the string denoting the challenges edge name in mutations.
	EdgeChallenges = "challenges"
	// Table holds the table name of the groupz in the database.
	Table = "groupzs"
	// MembersTable is the table that holds the members relation/edge.
	MembersTable = "members"
	// MembersInverseTable is the table name for the Member entity.
	// It exists in this package in order to avoid circular dependency with the "member" package.
	MembersInverseTable = "members"
	// MembersColumn is the table column denoting the members relation/edge.
	MembersColumn = "groupz_members"
	// ChallengesTable is the table that holds the challenges relation/edge.
	ChallengesTable = "challenges"
	// ChallengesInverseTable is the table name for the Challenge entity.
	// It exists in this package in order to avoid circular dependency with the "challenge" package.
	ChallengesInverseTable = "challenges"
	// ChallengesColumn is the table column denoting the challenges relation/edge.
	ChallengesColumn = "groupz_challenges"
)

// Columns holds all SQL columns for groupz fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldBackgroundPicture,
	FieldCreatedAt,
	FieldLeaderID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultBackgroundPicture holds the default value on creation for the "background_picture" field.
	DefaultBackgroundPicture string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)
