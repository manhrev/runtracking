// Code generated by ent, DO NOT EDIT.

package seasonmember

import (
	"time"
)

const (
	// Label holds the string label denoting the seasonmember type in the database.
	Label = "season_member"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPoint holds the string denoting the point field in the database.
	FieldPoint = "point"
	// FieldMemberID holds the string denoting the member_id field in the database.
	FieldMemberID = "member_id"
	// FieldSeasonID holds the string denoting the season_id field in the database.
	FieldSeasonID = "season_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeSeason holds the string denoting the season edge name in mutations.
	EdgeSeason = "season"
	// EdgeMember holds the string denoting the member edge name in mutations.
	EdgeMember = "member"
	// Table holds the table name of the seasonmember in the database.
	Table = "season_members"
	// SeasonTable is the table that holds the season relation/edge.
	SeasonTable = "season_members"
	// SeasonInverseTable is the table name for the Season entity.
	// It exists in this package in order to avoid circular dependency with the "season" package.
	SeasonInverseTable = "seasons"
	// SeasonColumn is the table column denoting the season relation/edge.
	SeasonColumn = "season_id"
	// MemberTable is the table that holds the member relation/edge.
	MemberTable = "season_members"
	// MemberInverseTable is the table name for the Member entity.
	// It exists in this package in order to avoid circular dependency with the "member" package.
	MemberInverseTable = "members"
	// MemberColumn is the table column denoting the member relation/edge.
	MemberColumn = "member_id"
)

// Columns holds all SQL columns for seasonmember fields.
var Columns = []string{
	FieldID,
	FieldPoint,
	FieldMemberID,
	FieldSeasonID,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultPoint holds the default value on creation for the "point" field.
	DefaultPoint int64
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)
