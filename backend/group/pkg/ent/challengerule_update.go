// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/manhrev/runtracking/backend/group/pkg/ent/challenge"
	"github.com/manhrev/runtracking/backend/group/pkg/ent/challengememberrule"
	"github.com/manhrev/runtracking/backend/group/pkg/ent/challengerule"
	"github.com/manhrev/runtracking/backend/group/pkg/ent/predicate"
)

// ChallengeRuleUpdate is the builder for updating ChallengeRule entities.
type ChallengeRuleUpdate struct {
	config
	hooks     []Hook
	mutation  *ChallengeRuleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ChallengeRuleUpdate builder.
func (cru *ChallengeRuleUpdate) Where(ps ...predicate.ChallengeRule) *ChallengeRuleUpdate {
	cru.mutation.Where(ps...)
	return cru
}

// SetGoal sets the "goal" field.
func (cru *ChallengeRuleUpdate) SetGoal(i int64) *ChallengeRuleUpdate {
	cru.mutation.ResetGoal()
	cru.mutation.SetGoal(i)
	return cru
}

// SetNillableGoal sets the "goal" field if the given value is not nil.
func (cru *ChallengeRuleUpdate) SetNillableGoal(i *int64) *ChallengeRuleUpdate {
	if i != nil {
		cru.SetGoal(*i)
	}
	return cru
}

// AddGoal adds i to the "goal" field.
func (cru *ChallengeRuleUpdate) AddGoal(i int64) *ChallengeRuleUpdate {
	cru.mutation.AddGoal(i)
	return cru
}

// SetRuleID sets the "rule_id" field.
func (cru *ChallengeRuleUpdate) SetRuleID(i int64) *ChallengeRuleUpdate {
	cru.mutation.ResetRuleID()
	cru.mutation.SetRuleID(i)
	return cru
}

// AddRuleID adds i to the "rule_id" field.
func (cru *ChallengeRuleUpdate) AddRuleID(i int64) *ChallengeRuleUpdate {
	cru.mutation.AddRuleID(i)
	return cru
}

// SetCreatedAt sets the "created_at" field.
func (cru *ChallengeRuleUpdate) SetCreatedAt(t time.Time) *ChallengeRuleUpdate {
	cru.mutation.SetCreatedAt(t)
	return cru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cru *ChallengeRuleUpdate) SetNillableCreatedAt(t *time.Time) *ChallengeRuleUpdate {
	if t != nil {
		cru.SetCreatedAt(*t)
	}
	return cru
}

// AddChallengeMemberRuleIDs adds the "challenge_member_rules" edge to the ChallengeMemberRule entity by IDs.
func (cru *ChallengeRuleUpdate) AddChallengeMemberRuleIDs(ids ...int64) *ChallengeRuleUpdate {
	cru.mutation.AddChallengeMemberRuleIDs(ids...)
	return cru
}

// AddChallengeMemberRules adds the "challenge_member_rules" edges to the ChallengeMemberRule entity.
func (cru *ChallengeRuleUpdate) AddChallengeMemberRules(c ...*ChallengeMemberRule) *ChallengeRuleUpdate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cru.AddChallengeMemberRuleIDs(ids...)
}

// SetChallengeID sets the "challenge" edge to the Challenge entity by ID.
func (cru *ChallengeRuleUpdate) SetChallengeID(id int64) *ChallengeRuleUpdate {
	cru.mutation.SetChallengeID(id)
	return cru
}

// SetNillableChallengeID sets the "challenge" edge to the Challenge entity by ID if the given value is not nil.
func (cru *ChallengeRuleUpdate) SetNillableChallengeID(id *int64) *ChallengeRuleUpdate {
	if id != nil {
		cru = cru.SetChallengeID(*id)
	}
	return cru
}

// SetChallenge sets the "challenge" edge to the Challenge entity.
func (cru *ChallengeRuleUpdate) SetChallenge(c *Challenge) *ChallengeRuleUpdate {
	return cru.SetChallengeID(c.ID)
}

// Mutation returns the ChallengeRuleMutation object of the builder.
func (cru *ChallengeRuleUpdate) Mutation() *ChallengeRuleMutation {
	return cru.mutation
}

// ClearChallengeMemberRules clears all "challenge_member_rules" edges to the ChallengeMemberRule entity.
func (cru *ChallengeRuleUpdate) ClearChallengeMemberRules() *ChallengeRuleUpdate {
	cru.mutation.ClearChallengeMemberRules()
	return cru
}

// RemoveChallengeMemberRuleIDs removes the "challenge_member_rules" edge to ChallengeMemberRule entities by IDs.
func (cru *ChallengeRuleUpdate) RemoveChallengeMemberRuleIDs(ids ...int64) *ChallengeRuleUpdate {
	cru.mutation.RemoveChallengeMemberRuleIDs(ids...)
	return cru
}

// RemoveChallengeMemberRules removes "challenge_member_rules" edges to ChallengeMemberRule entities.
func (cru *ChallengeRuleUpdate) RemoveChallengeMemberRules(c ...*ChallengeMemberRule) *ChallengeRuleUpdate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cru.RemoveChallengeMemberRuleIDs(ids...)
}

// ClearChallenge clears the "challenge" edge to the Challenge entity.
func (cru *ChallengeRuleUpdate) ClearChallenge() *ChallengeRuleUpdate {
	cru.mutation.ClearChallenge()
	return cru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cru *ChallengeRuleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ChallengeRuleMutation](ctx, cru.sqlSave, cru.mutation, cru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cru *ChallengeRuleUpdate) SaveX(ctx context.Context) int {
	affected, err := cru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cru *ChallengeRuleUpdate) Exec(ctx context.Context) error {
	_, err := cru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cru *ChallengeRuleUpdate) ExecX(ctx context.Context) {
	if err := cru.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cru *ChallengeRuleUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ChallengeRuleUpdate {
	cru.modifiers = append(cru.modifiers, modifiers...)
	return cru
}

func (cru *ChallengeRuleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   challengerule.Table,
			Columns: challengerule.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: challengerule.FieldID,
			},
		},
	}
	if ps := cru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cru.mutation.Goal(); ok {
		_spec.SetField(challengerule.FieldGoal, field.TypeInt64, value)
	}
	if value, ok := cru.mutation.AddedGoal(); ok {
		_spec.AddField(challengerule.FieldGoal, field.TypeInt64, value)
	}
	if value, ok := cru.mutation.RuleID(); ok {
		_spec.SetField(challengerule.FieldRuleID, field.TypeInt64, value)
	}
	if value, ok := cru.mutation.AddedRuleID(); ok {
		_spec.AddField(challengerule.FieldRuleID, field.TypeInt64, value)
	}
	if value, ok := cru.mutation.CreatedAt(); ok {
		_spec.SetField(challengerule.FieldCreatedAt, field.TypeTime, value)
	}
	if cru.mutation.ChallengeMemberRulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   challengerule.ChallengeMemberRulesTable,
			Columns: []string{challengerule.ChallengeMemberRulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: challengememberrule.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cru.mutation.RemovedChallengeMemberRulesIDs(); len(nodes) > 0 && !cru.mutation.ChallengeMemberRulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   challengerule.ChallengeMemberRulesTable,
			Columns: []string{challengerule.ChallengeMemberRulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: challengememberrule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cru.mutation.ChallengeMemberRulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   challengerule.ChallengeMemberRulesTable,
			Columns: []string{challengerule.ChallengeMemberRulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: challengememberrule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cru.mutation.ChallengeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   challengerule.ChallengeTable,
			Columns: []string{challengerule.ChallengeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: challenge.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cru.mutation.ChallengeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   challengerule.ChallengeTable,
			Columns: []string{challengerule.ChallengeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: challenge.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{challengerule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cru.mutation.done = true
	return n, nil
}

// ChallengeRuleUpdateOne is the builder for updating a single ChallengeRule entity.
type ChallengeRuleUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ChallengeRuleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetGoal sets the "goal" field.
func (cruo *ChallengeRuleUpdateOne) SetGoal(i int64) *ChallengeRuleUpdateOne {
	cruo.mutation.ResetGoal()
	cruo.mutation.SetGoal(i)
	return cruo
}

// SetNillableGoal sets the "goal" field if the given value is not nil.
func (cruo *ChallengeRuleUpdateOne) SetNillableGoal(i *int64) *ChallengeRuleUpdateOne {
	if i != nil {
		cruo.SetGoal(*i)
	}
	return cruo
}

// AddGoal adds i to the "goal" field.
func (cruo *ChallengeRuleUpdateOne) AddGoal(i int64) *ChallengeRuleUpdateOne {
	cruo.mutation.AddGoal(i)
	return cruo
}

// SetRuleID sets the "rule_id" field.
func (cruo *ChallengeRuleUpdateOne) SetRuleID(i int64) *ChallengeRuleUpdateOne {
	cruo.mutation.ResetRuleID()
	cruo.mutation.SetRuleID(i)
	return cruo
}

// AddRuleID adds i to the "rule_id" field.
func (cruo *ChallengeRuleUpdateOne) AddRuleID(i int64) *ChallengeRuleUpdateOne {
	cruo.mutation.AddRuleID(i)
	return cruo
}

// SetCreatedAt sets the "created_at" field.
func (cruo *ChallengeRuleUpdateOne) SetCreatedAt(t time.Time) *ChallengeRuleUpdateOne {
	cruo.mutation.SetCreatedAt(t)
	return cruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cruo *ChallengeRuleUpdateOne) SetNillableCreatedAt(t *time.Time) *ChallengeRuleUpdateOne {
	if t != nil {
		cruo.SetCreatedAt(*t)
	}
	return cruo
}

// AddChallengeMemberRuleIDs adds the "challenge_member_rules" edge to the ChallengeMemberRule entity by IDs.
func (cruo *ChallengeRuleUpdateOne) AddChallengeMemberRuleIDs(ids ...int64) *ChallengeRuleUpdateOne {
	cruo.mutation.AddChallengeMemberRuleIDs(ids...)
	return cruo
}

// AddChallengeMemberRules adds the "challenge_member_rules" edges to the ChallengeMemberRule entity.
func (cruo *ChallengeRuleUpdateOne) AddChallengeMemberRules(c ...*ChallengeMemberRule) *ChallengeRuleUpdateOne {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cruo.AddChallengeMemberRuleIDs(ids...)
}

// SetChallengeID sets the "challenge" edge to the Challenge entity by ID.
func (cruo *ChallengeRuleUpdateOne) SetChallengeID(id int64) *ChallengeRuleUpdateOne {
	cruo.mutation.SetChallengeID(id)
	return cruo
}

// SetNillableChallengeID sets the "challenge" edge to the Challenge entity by ID if the given value is not nil.
func (cruo *ChallengeRuleUpdateOne) SetNillableChallengeID(id *int64) *ChallengeRuleUpdateOne {
	if id != nil {
		cruo = cruo.SetChallengeID(*id)
	}
	return cruo
}

// SetChallenge sets the "challenge" edge to the Challenge entity.
func (cruo *ChallengeRuleUpdateOne) SetChallenge(c *Challenge) *ChallengeRuleUpdateOne {
	return cruo.SetChallengeID(c.ID)
}

// Mutation returns the ChallengeRuleMutation object of the builder.
func (cruo *ChallengeRuleUpdateOne) Mutation() *ChallengeRuleMutation {
	return cruo.mutation
}

// ClearChallengeMemberRules clears all "challenge_member_rules" edges to the ChallengeMemberRule entity.
func (cruo *ChallengeRuleUpdateOne) ClearChallengeMemberRules() *ChallengeRuleUpdateOne {
	cruo.mutation.ClearChallengeMemberRules()
	return cruo
}

// RemoveChallengeMemberRuleIDs removes the "challenge_member_rules" edge to ChallengeMemberRule entities by IDs.
func (cruo *ChallengeRuleUpdateOne) RemoveChallengeMemberRuleIDs(ids ...int64) *ChallengeRuleUpdateOne {
	cruo.mutation.RemoveChallengeMemberRuleIDs(ids...)
	return cruo
}

// RemoveChallengeMemberRules removes "challenge_member_rules" edges to ChallengeMemberRule entities.
func (cruo *ChallengeRuleUpdateOne) RemoveChallengeMemberRules(c ...*ChallengeMemberRule) *ChallengeRuleUpdateOne {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cruo.RemoveChallengeMemberRuleIDs(ids...)
}

// ClearChallenge clears the "challenge" edge to the Challenge entity.
func (cruo *ChallengeRuleUpdateOne) ClearChallenge() *ChallengeRuleUpdateOne {
	cruo.mutation.ClearChallenge()
	return cruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cruo *ChallengeRuleUpdateOne) Select(field string, fields ...string) *ChallengeRuleUpdateOne {
	cruo.fields = append([]string{field}, fields...)
	return cruo
}

// Save executes the query and returns the updated ChallengeRule entity.
func (cruo *ChallengeRuleUpdateOne) Save(ctx context.Context) (*ChallengeRule, error) {
	return withHooks[*ChallengeRule, ChallengeRuleMutation](ctx, cruo.sqlSave, cruo.mutation, cruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cruo *ChallengeRuleUpdateOne) SaveX(ctx context.Context) *ChallengeRule {
	node, err := cruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cruo *ChallengeRuleUpdateOne) Exec(ctx context.Context) error {
	_, err := cruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cruo *ChallengeRuleUpdateOne) ExecX(ctx context.Context) {
	if err := cruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cruo *ChallengeRuleUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ChallengeRuleUpdateOne {
	cruo.modifiers = append(cruo.modifiers, modifiers...)
	return cruo
}

func (cruo *ChallengeRuleUpdateOne) sqlSave(ctx context.Context) (_node *ChallengeRule, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   challengerule.Table,
			Columns: challengerule.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: challengerule.FieldID,
			},
		},
	}
	id, ok := cruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ChallengeRule.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, challengerule.FieldID)
		for _, f := range fields {
			if !challengerule.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != challengerule.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cruo.mutation.Goal(); ok {
		_spec.SetField(challengerule.FieldGoal, field.TypeInt64, value)
	}
	if value, ok := cruo.mutation.AddedGoal(); ok {
		_spec.AddField(challengerule.FieldGoal, field.TypeInt64, value)
	}
	if value, ok := cruo.mutation.RuleID(); ok {
		_spec.SetField(challengerule.FieldRuleID, field.TypeInt64, value)
	}
	if value, ok := cruo.mutation.AddedRuleID(); ok {
		_spec.AddField(challengerule.FieldRuleID, field.TypeInt64, value)
	}
	if value, ok := cruo.mutation.CreatedAt(); ok {
		_spec.SetField(challengerule.FieldCreatedAt, field.TypeTime, value)
	}
	if cruo.mutation.ChallengeMemberRulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   challengerule.ChallengeMemberRulesTable,
			Columns: []string{challengerule.ChallengeMemberRulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: challengememberrule.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cruo.mutation.RemovedChallengeMemberRulesIDs(); len(nodes) > 0 && !cruo.mutation.ChallengeMemberRulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   challengerule.ChallengeMemberRulesTable,
			Columns: []string{challengerule.ChallengeMemberRulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: challengememberrule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cruo.mutation.ChallengeMemberRulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   challengerule.ChallengeMemberRulesTable,
			Columns: []string{challengerule.ChallengeMemberRulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: challengememberrule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cruo.mutation.ChallengeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   challengerule.ChallengeTable,
			Columns: []string{challengerule.ChallengeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: challenge.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cruo.mutation.ChallengeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   challengerule.ChallengeTable,
			Columns: []string{challengerule.ChallengeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: challenge.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cruo.modifiers...)
	_node = &ChallengeRule{config: cruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{challengerule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cruo.mutation.done = true
	return _node, nil
}
