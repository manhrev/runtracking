// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/manhrev/runtracking/backend/group/pkg/ent/challenge"
	"github.com/manhrev/runtracking/backend/group/pkg/ent/challengemember"
	"github.com/manhrev/runtracking/backend/group/pkg/ent/challengerule"
	"github.com/manhrev/runtracking/backend/group/pkg/ent/groupz"
	"github.com/manhrev/runtracking/backend/group/pkg/ent/predicate"
)

// ChallengeUpdate is the builder for updating Challenge entities.
type ChallengeUpdate struct {
	config
	hooks     []Hook
	mutation  *ChallengeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ChallengeUpdate builder.
func (cu *ChallengeUpdate) Where(ps ...predicate.Challenge) *ChallengeUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetCreatedAt sets the "created_at" field.
func (cu *ChallengeUpdate) SetCreatedAt(t time.Time) *ChallengeUpdate {
	cu.mutation.SetCreatedAt(t)
	return cu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cu *ChallengeUpdate) SetNillableCreatedAt(t *time.Time) *ChallengeUpdate {
	if t != nil {
		cu.SetCreatedAt(*t)
	}
	return cu
}

// SetStartTime sets the "start_time" field.
func (cu *ChallengeUpdate) SetStartTime(t time.Time) *ChallengeUpdate {
	cu.mutation.SetStartTime(t)
	return cu
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (cu *ChallengeUpdate) SetNillableStartTime(t *time.Time) *ChallengeUpdate {
	if t != nil {
		cu.SetStartTime(*t)
	}
	return cu
}

// ClearStartTime clears the value of the "start_time" field.
func (cu *ChallengeUpdate) ClearStartTime() *ChallengeUpdate {
	cu.mutation.ClearStartTime()
	return cu
}

// SetEndTime sets the "end_time" field.
func (cu *ChallengeUpdate) SetEndTime(t time.Time) *ChallengeUpdate {
	cu.mutation.SetEndTime(t)
	return cu
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (cu *ChallengeUpdate) SetNillableEndTime(t *time.Time) *ChallengeUpdate {
	if t != nil {
		cu.SetEndTime(*t)
	}
	return cu
}

// ClearEndTime clears the value of the "end_time" field.
func (cu *ChallengeUpdate) ClearEndTime() *ChallengeUpdate {
	cu.mutation.ClearEndTime()
	return cu
}

// SetDescription sets the "description" field.
func (cu *ChallengeUpdate) SetDescription(s string) *ChallengeUpdate {
	cu.mutation.SetDescription(s)
	return cu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cu *ChallengeUpdate) SetNillableDescription(s *string) *ChallengeUpdate {
	if s != nil {
		cu.SetDescription(*s)
	}
	return cu
}

// ClearDescription clears the value of the "description" field.
func (cu *ChallengeUpdate) ClearDescription() *ChallengeUpdate {
	cu.mutation.ClearDescription()
	return cu
}

// SetTypeID sets the "type_id" field.
func (cu *ChallengeUpdate) SetTypeID(i int64) *ChallengeUpdate {
	cu.mutation.ResetTypeID()
	cu.mutation.SetTypeID(i)
	return cu
}

// AddTypeID adds i to the "type_id" field.
func (cu *ChallengeUpdate) AddTypeID(i int64) *ChallengeUpdate {
	cu.mutation.AddTypeID(i)
	return cu
}

// SetCompletedFirstMemberID sets the "completed_first_member_id" field.
func (cu *ChallengeUpdate) SetCompletedFirstMemberID(i int64) *ChallengeUpdate {
	cu.mutation.ResetCompletedFirstMemberID()
	cu.mutation.SetCompletedFirstMemberID(i)
	return cu
}

// SetNillableCompletedFirstMemberID sets the "completed_first_member_id" field if the given value is not nil.
func (cu *ChallengeUpdate) SetNillableCompletedFirstMemberID(i *int64) *ChallengeUpdate {
	if i != nil {
		cu.SetCompletedFirstMemberID(*i)
	}
	return cu
}

// AddCompletedFirstMemberID adds i to the "completed_first_member_id" field.
func (cu *ChallengeUpdate) AddCompletedFirstMemberID(i int64) *ChallengeUpdate {
	cu.mutation.AddCompletedFirstMemberID(i)
	return cu
}

// ClearCompletedFirstMemberID clears the value of the "completed_first_member_id" field.
func (cu *ChallengeUpdate) ClearCompletedFirstMemberID() *ChallengeUpdate {
	cu.mutation.ClearCompletedFirstMemberID()
	return cu
}

// AddChallengeMemberIDs adds the "challenge_members" edge to the ChallengeMember entity by IDs.
func (cu *ChallengeUpdate) AddChallengeMemberIDs(ids ...int64) *ChallengeUpdate {
	cu.mutation.AddChallengeMemberIDs(ids...)
	return cu
}

// AddChallengeMembers adds the "challenge_members" edges to the ChallengeMember entity.
func (cu *ChallengeUpdate) AddChallengeMembers(c ...*ChallengeMember) *ChallengeUpdate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddChallengeMemberIDs(ids...)
}

// SetGroupzID sets the "groupz" edge to the Groupz entity by ID.
func (cu *ChallengeUpdate) SetGroupzID(id int64) *ChallengeUpdate {
	cu.mutation.SetGroupzID(id)
	return cu
}

// SetNillableGroupzID sets the "groupz" edge to the Groupz entity by ID if the given value is not nil.
func (cu *ChallengeUpdate) SetNillableGroupzID(id *int64) *ChallengeUpdate {
	if id != nil {
		cu = cu.SetGroupzID(*id)
	}
	return cu
}

// SetGroupz sets the "groupz" edge to the Groupz entity.
func (cu *ChallengeUpdate) SetGroupz(g *Groupz) *ChallengeUpdate {
	return cu.SetGroupzID(g.ID)
}

// AddChallengeRuleIDs adds the "challenge_rules" edge to the ChallengeRule entity by IDs.
func (cu *ChallengeUpdate) AddChallengeRuleIDs(ids ...int64) *ChallengeUpdate {
	cu.mutation.AddChallengeRuleIDs(ids...)
	return cu
}

// AddChallengeRules adds the "challenge_rules" edges to the ChallengeRule entity.
func (cu *ChallengeUpdate) AddChallengeRules(c ...*ChallengeRule) *ChallengeUpdate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddChallengeRuleIDs(ids...)
}

// Mutation returns the ChallengeMutation object of the builder.
func (cu *ChallengeUpdate) Mutation() *ChallengeMutation {
	return cu.mutation
}

// ClearChallengeMembers clears all "challenge_members" edges to the ChallengeMember entity.
func (cu *ChallengeUpdate) ClearChallengeMembers() *ChallengeUpdate {
	cu.mutation.ClearChallengeMembers()
	return cu
}

// RemoveChallengeMemberIDs removes the "challenge_members" edge to ChallengeMember entities by IDs.
func (cu *ChallengeUpdate) RemoveChallengeMemberIDs(ids ...int64) *ChallengeUpdate {
	cu.mutation.RemoveChallengeMemberIDs(ids...)
	return cu
}

// RemoveChallengeMembers removes "challenge_members" edges to ChallengeMember entities.
func (cu *ChallengeUpdate) RemoveChallengeMembers(c ...*ChallengeMember) *ChallengeUpdate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveChallengeMemberIDs(ids...)
}

// ClearGroupz clears the "groupz" edge to the Groupz entity.
func (cu *ChallengeUpdate) ClearGroupz() *ChallengeUpdate {
	cu.mutation.ClearGroupz()
	return cu
}

// ClearChallengeRules clears all "challenge_rules" edges to the ChallengeRule entity.
func (cu *ChallengeUpdate) ClearChallengeRules() *ChallengeUpdate {
	cu.mutation.ClearChallengeRules()
	return cu
}

// RemoveChallengeRuleIDs removes the "challenge_rules" edge to ChallengeRule entities by IDs.
func (cu *ChallengeUpdate) RemoveChallengeRuleIDs(ids ...int64) *ChallengeUpdate {
	cu.mutation.RemoveChallengeRuleIDs(ids...)
	return cu
}

// RemoveChallengeRules removes "challenge_rules" edges to ChallengeRule entities.
func (cu *ChallengeUpdate) RemoveChallengeRules(c ...*ChallengeRule) *ChallengeUpdate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveChallengeRuleIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ChallengeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ChallengeMutation](ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ChallengeUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ChallengeUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ChallengeUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cu *ChallengeUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ChallengeUpdate {
	cu.modifiers = append(cu.modifiers, modifiers...)
	return cu
}

func (cu *ChallengeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   challenge.Table,
			Columns: challenge.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: challenge.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.CreatedAt(); ok {
		_spec.SetField(challenge.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.StartTime(); ok {
		_spec.SetField(challenge.FieldStartTime, field.TypeTime, value)
	}
	if cu.mutation.StartTimeCleared() {
		_spec.ClearField(challenge.FieldStartTime, field.TypeTime)
	}
	if value, ok := cu.mutation.EndTime(); ok {
		_spec.SetField(challenge.FieldEndTime, field.TypeTime, value)
	}
	if cu.mutation.EndTimeCleared() {
		_spec.ClearField(challenge.FieldEndTime, field.TypeTime)
	}
	if value, ok := cu.mutation.Description(); ok {
		_spec.SetField(challenge.FieldDescription, field.TypeString, value)
	}
	if cu.mutation.DescriptionCleared() {
		_spec.ClearField(challenge.FieldDescription, field.TypeString)
	}
	if value, ok := cu.mutation.TypeID(); ok {
		_spec.SetField(challenge.FieldTypeID, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedTypeID(); ok {
		_spec.AddField(challenge.FieldTypeID, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.CompletedFirstMemberID(); ok {
		_spec.SetField(challenge.FieldCompletedFirstMemberID, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedCompletedFirstMemberID(); ok {
		_spec.AddField(challenge.FieldCompletedFirstMemberID, field.TypeInt64, value)
	}
	if cu.mutation.CompletedFirstMemberIDCleared() {
		_spec.ClearField(challenge.FieldCompletedFirstMemberID, field.TypeInt64)
	}
	if cu.mutation.ChallengeMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   challenge.ChallengeMembersTable,
			Columns: []string{challenge.ChallengeMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: challengemember.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedChallengeMembersIDs(); len(nodes) > 0 && !cu.mutation.ChallengeMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   challenge.ChallengeMembersTable,
			Columns: []string{challenge.ChallengeMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: challengemember.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ChallengeMembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   challenge.ChallengeMembersTable,
			Columns: []string{challenge.ChallengeMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: challengemember.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.GroupzCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   challenge.GroupzTable,
			Columns: []string{challenge.GroupzColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: groupz.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.GroupzIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   challenge.GroupzTable,
			Columns: []string{challenge.GroupzColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: groupz.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ChallengeRulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   challenge.ChallengeRulesTable,
			Columns: []string{challenge.ChallengeRulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: challengerule.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedChallengeRulesIDs(); len(nodes) > 0 && !cu.mutation.ChallengeRulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   challenge.ChallengeRulesTable,
			Columns: []string{challenge.ChallengeRulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: challengerule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ChallengeRulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   challenge.ChallengeRulesTable,
			Columns: []string{challenge.ChallengeRulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: challengerule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{challenge.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ChallengeUpdateOne is the builder for updating a single Challenge entity.
type ChallengeUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ChallengeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (cuo *ChallengeUpdateOne) SetCreatedAt(t time.Time) *ChallengeUpdateOne {
	cuo.mutation.SetCreatedAt(t)
	return cuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cuo *ChallengeUpdateOne) SetNillableCreatedAt(t *time.Time) *ChallengeUpdateOne {
	if t != nil {
		cuo.SetCreatedAt(*t)
	}
	return cuo
}

// SetStartTime sets the "start_time" field.
func (cuo *ChallengeUpdateOne) SetStartTime(t time.Time) *ChallengeUpdateOne {
	cuo.mutation.SetStartTime(t)
	return cuo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (cuo *ChallengeUpdateOne) SetNillableStartTime(t *time.Time) *ChallengeUpdateOne {
	if t != nil {
		cuo.SetStartTime(*t)
	}
	return cuo
}

// ClearStartTime clears the value of the "start_time" field.
func (cuo *ChallengeUpdateOne) ClearStartTime() *ChallengeUpdateOne {
	cuo.mutation.ClearStartTime()
	return cuo
}

// SetEndTime sets the "end_time" field.
func (cuo *ChallengeUpdateOne) SetEndTime(t time.Time) *ChallengeUpdateOne {
	cuo.mutation.SetEndTime(t)
	return cuo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (cuo *ChallengeUpdateOne) SetNillableEndTime(t *time.Time) *ChallengeUpdateOne {
	if t != nil {
		cuo.SetEndTime(*t)
	}
	return cuo
}

// ClearEndTime clears the value of the "end_time" field.
func (cuo *ChallengeUpdateOne) ClearEndTime() *ChallengeUpdateOne {
	cuo.mutation.ClearEndTime()
	return cuo
}

// SetDescription sets the "description" field.
func (cuo *ChallengeUpdateOne) SetDescription(s string) *ChallengeUpdateOne {
	cuo.mutation.SetDescription(s)
	return cuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cuo *ChallengeUpdateOne) SetNillableDescription(s *string) *ChallengeUpdateOne {
	if s != nil {
		cuo.SetDescription(*s)
	}
	return cuo
}

// ClearDescription clears the value of the "description" field.
func (cuo *ChallengeUpdateOne) ClearDescription() *ChallengeUpdateOne {
	cuo.mutation.ClearDescription()
	return cuo
}

// SetTypeID sets the "type_id" field.
func (cuo *ChallengeUpdateOne) SetTypeID(i int64) *ChallengeUpdateOne {
	cuo.mutation.ResetTypeID()
	cuo.mutation.SetTypeID(i)
	return cuo
}

// AddTypeID adds i to the "type_id" field.
func (cuo *ChallengeUpdateOne) AddTypeID(i int64) *ChallengeUpdateOne {
	cuo.mutation.AddTypeID(i)
	return cuo
}

// SetCompletedFirstMemberID sets the "completed_first_member_id" field.
func (cuo *ChallengeUpdateOne) SetCompletedFirstMemberID(i int64) *ChallengeUpdateOne {
	cuo.mutation.ResetCompletedFirstMemberID()
	cuo.mutation.SetCompletedFirstMemberID(i)
	return cuo
}

// SetNillableCompletedFirstMemberID sets the "completed_first_member_id" field if the given value is not nil.
func (cuo *ChallengeUpdateOne) SetNillableCompletedFirstMemberID(i *int64) *ChallengeUpdateOne {
	if i != nil {
		cuo.SetCompletedFirstMemberID(*i)
	}
	return cuo
}

// AddCompletedFirstMemberID adds i to the "completed_first_member_id" field.
func (cuo *ChallengeUpdateOne) AddCompletedFirstMemberID(i int64) *ChallengeUpdateOne {
	cuo.mutation.AddCompletedFirstMemberID(i)
	return cuo
}

// ClearCompletedFirstMemberID clears the value of the "completed_first_member_id" field.
func (cuo *ChallengeUpdateOne) ClearCompletedFirstMemberID() *ChallengeUpdateOne {
	cuo.mutation.ClearCompletedFirstMemberID()
	return cuo
}

// AddChallengeMemberIDs adds the "challenge_members" edge to the ChallengeMember entity by IDs.
func (cuo *ChallengeUpdateOne) AddChallengeMemberIDs(ids ...int64) *ChallengeUpdateOne {
	cuo.mutation.AddChallengeMemberIDs(ids...)
	return cuo
}

// AddChallengeMembers adds the "challenge_members" edges to the ChallengeMember entity.
func (cuo *ChallengeUpdateOne) AddChallengeMembers(c ...*ChallengeMember) *ChallengeUpdateOne {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddChallengeMemberIDs(ids...)
}

// SetGroupzID sets the "groupz" edge to the Groupz entity by ID.
func (cuo *ChallengeUpdateOne) SetGroupzID(id int64) *ChallengeUpdateOne {
	cuo.mutation.SetGroupzID(id)
	return cuo
}

// SetNillableGroupzID sets the "groupz" edge to the Groupz entity by ID if the given value is not nil.
func (cuo *ChallengeUpdateOne) SetNillableGroupzID(id *int64) *ChallengeUpdateOne {
	if id != nil {
		cuo = cuo.SetGroupzID(*id)
	}
	return cuo
}

// SetGroupz sets the "groupz" edge to the Groupz entity.
func (cuo *ChallengeUpdateOne) SetGroupz(g *Groupz) *ChallengeUpdateOne {
	return cuo.SetGroupzID(g.ID)
}

// AddChallengeRuleIDs adds the "challenge_rules" edge to the ChallengeRule entity by IDs.
func (cuo *ChallengeUpdateOne) AddChallengeRuleIDs(ids ...int64) *ChallengeUpdateOne {
	cuo.mutation.AddChallengeRuleIDs(ids...)
	return cuo
}

// AddChallengeRules adds the "challenge_rules" edges to the ChallengeRule entity.
func (cuo *ChallengeUpdateOne) AddChallengeRules(c ...*ChallengeRule) *ChallengeUpdateOne {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddChallengeRuleIDs(ids...)
}

// Mutation returns the ChallengeMutation object of the builder.
func (cuo *ChallengeUpdateOne) Mutation() *ChallengeMutation {
	return cuo.mutation
}

// ClearChallengeMembers clears all "challenge_members" edges to the ChallengeMember entity.
func (cuo *ChallengeUpdateOne) ClearChallengeMembers() *ChallengeUpdateOne {
	cuo.mutation.ClearChallengeMembers()
	return cuo
}

// RemoveChallengeMemberIDs removes the "challenge_members" edge to ChallengeMember entities by IDs.
func (cuo *ChallengeUpdateOne) RemoveChallengeMemberIDs(ids ...int64) *ChallengeUpdateOne {
	cuo.mutation.RemoveChallengeMemberIDs(ids...)
	return cuo
}

// RemoveChallengeMembers removes "challenge_members" edges to ChallengeMember entities.
func (cuo *ChallengeUpdateOne) RemoveChallengeMembers(c ...*ChallengeMember) *ChallengeUpdateOne {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveChallengeMemberIDs(ids...)
}

// ClearGroupz clears the "groupz" edge to the Groupz entity.
func (cuo *ChallengeUpdateOne) ClearGroupz() *ChallengeUpdateOne {
	cuo.mutation.ClearGroupz()
	return cuo
}

// ClearChallengeRules clears all "challenge_rules" edges to the ChallengeRule entity.
func (cuo *ChallengeUpdateOne) ClearChallengeRules() *ChallengeUpdateOne {
	cuo.mutation.ClearChallengeRules()
	return cuo
}

// RemoveChallengeRuleIDs removes the "challenge_rules" edge to ChallengeRule entities by IDs.
func (cuo *ChallengeUpdateOne) RemoveChallengeRuleIDs(ids ...int64) *ChallengeUpdateOne {
	cuo.mutation.RemoveChallengeRuleIDs(ids...)
	return cuo
}

// RemoveChallengeRules removes "challenge_rules" edges to ChallengeRule entities.
func (cuo *ChallengeUpdateOne) RemoveChallengeRules(c ...*ChallengeRule) *ChallengeUpdateOne {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveChallengeRuleIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ChallengeUpdateOne) Select(field string, fields ...string) *ChallengeUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Challenge entity.
func (cuo *ChallengeUpdateOne) Save(ctx context.Context) (*Challenge, error) {
	return withHooks[*Challenge, ChallengeMutation](ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ChallengeUpdateOne) SaveX(ctx context.Context) *Challenge {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ChallengeUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ChallengeUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cuo *ChallengeUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ChallengeUpdateOne {
	cuo.modifiers = append(cuo.modifiers, modifiers...)
	return cuo
}

func (cuo *ChallengeUpdateOne) sqlSave(ctx context.Context) (_node *Challenge, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   challenge.Table,
			Columns: challenge.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: challenge.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Challenge.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, challenge.FieldID)
		for _, f := range fields {
			if !challenge.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != challenge.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.CreatedAt(); ok {
		_spec.SetField(challenge.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.StartTime(); ok {
		_spec.SetField(challenge.FieldStartTime, field.TypeTime, value)
	}
	if cuo.mutation.StartTimeCleared() {
		_spec.ClearField(challenge.FieldStartTime, field.TypeTime)
	}
	if value, ok := cuo.mutation.EndTime(); ok {
		_spec.SetField(challenge.FieldEndTime, field.TypeTime, value)
	}
	if cuo.mutation.EndTimeCleared() {
		_spec.ClearField(challenge.FieldEndTime, field.TypeTime)
	}
	if value, ok := cuo.mutation.Description(); ok {
		_spec.SetField(challenge.FieldDescription, field.TypeString, value)
	}
	if cuo.mutation.DescriptionCleared() {
		_spec.ClearField(challenge.FieldDescription, field.TypeString)
	}
	if value, ok := cuo.mutation.TypeID(); ok {
		_spec.SetField(challenge.FieldTypeID, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedTypeID(); ok {
		_spec.AddField(challenge.FieldTypeID, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.CompletedFirstMemberID(); ok {
		_spec.SetField(challenge.FieldCompletedFirstMemberID, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedCompletedFirstMemberID(); ok {
		_spec.AddField(challenge.FieldCompletedFirstMemberID, field.TypeInt64, value)
	}
	if cuo.mutation.CompletedFirstMemberIDCleared() {
		_spec.ClearField(challenge.FieldCompletedFirstMemberID, field.TypeInt64)
	}
	if cuo.mutation.ChallengeMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   challenge.ChallengeMembersTable,
			Columns: []string{challenge.ChallengeMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: challengemember.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedChallengeMembersIDs(); len(nodes) > 0 && !cuo.mutation.ChallengeMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   challenge.ChallengeMembersTable,
			Columns: []string{challenge.ChallengeMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: challengemember.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ChallengeMembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   challenge.ChallengeMembersTable,
			Columns: []string{challenge.ChallengeMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: challengemember.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.GroupzCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   challenge.GroupzTable,
			Columns: []string{challenge.GroupzColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: groupz.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.GroupzIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   challenge.GroupzTable,
			Columns: []string{challenge.GroupzColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: groupz.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ChallengeRulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   challenge.ChallengeRulesTable,
			Columns: []string{challenge.ChallengeRulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: challengerule.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedChallengeRulesIDs(); len(nodes) > 0 && !cuo.mutation.ChallengeRulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   challenge.ChallengeRulesTable,
			Columns: []string{challenge.ChallengeRulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: challengerule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ChallengeRulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   challenge.ChallengeRulesTable,
			Columns: []string{challenge.ChallengeRulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: challengerule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cuo.modifiers...)
	_node = &Challenge{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{challenge.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
