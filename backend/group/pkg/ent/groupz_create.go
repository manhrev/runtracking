// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/manhrev/runtracking/backend/group/pkg/ent/challenge"
	"github.com/manhrev/runtracking/backend/group/pkg/ent/groupz"
	"github.com/manhrev/runtracking/backend/group/pkg/ent/member"
)

// GroupzCreate is the builder for creating a Groupz entity.
type GroupzCreate struct {
	config
	mutation *GroupzMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (gc *GroupzCreate) SetName(s string) *GroupzCreate {
	gc.mutation.SetName(s)
	return gc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (gc *GroupzCreate) SetNillableName(s *string) *GroupzCreate {
	if s != nil {
		gc.SetName(*s)
	}
	return gc
}

// SetDescription sets the "description" field.
func (gc *GroupzCreate) SetDescription(s string) *GroupzCreate {
	gc.mutation.SetDescription(s)
	return gc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (gc *GroupzCreate) SetNillableDescription(s *string) *GroupzCreate {
	if s != nil {
		gc.SetDescription(*s)
	}
	return gc
}

// SetBackgroundPicture sets the "background_picture" field.
func (gc *GroupzCreate) SetBackgroundPicture(s string) *GroupzCreate {
	gc.mutation.SetBackgroundPicture(s)
	return gc
}

// SetNillableBackgroundPicture sets the "background_picture" field if the given value is not nil.
func (gc *GroupzCreate) SetNillableBackgroundPicture(s *string) *GroupzCreate {
	if s != nil {
		gc.SetBackgroundPicture(*s)
	}
	return gc
}

// SetCreatedAt sets the "created_at" field.
func (gc *GroupzCreate) SetCreatedAt(t time.Time) *GroupzCreate {
	gc.mutation.SetCreatedAt(t)
	return gc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gc *GroupzCreate) SetNillableCreatedAt(t *time.Time) *GroupzCreate {
	if t != nil {
		gc.SetCreatedAt(*t)
	}
	return gc
}

// SetLeaderID sets the "leader_id" field.
func (gc *GroupzCreate) SetLeaderID(i int64) *GroupzCreate {
	gc.mutation.SetLeaderID(i)
	return gc
}

// SetID sets the "id" field.
func (gc *GroupzCreate) SetID(i int64) *GroupzCreate {
	gc.mutation.SetID(i)
	return gc
}

// AddMemberIDs adds the "members" edge to the Member entity by IDs.
func (gc *GroupzCreate) AddMemberIDs(ids ...int64) *GroupzCreate {
	gc.mutation.AddMemberIDs(ids...)
	return gc
}

// AddMembers adds the "members" edges to the Member entity.
func (gc *GroupzCreate) AddMembers(m ...*Member) *GroupzCreate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return gc.AddMemberIDs(ids...)
}

// AddChallengeIDs adds the "challenges" edge to the Challenge entity by IDs.
func (gc *GroupzCreate) AddChallengeIDs(ids ...int64) *GroupzCreate {
	gc.mutation.AddChallengeIDs(ids...)
	return gc
}

// AddChallenges adds the "challenges" edges to the Challenge entity.
func (gc *GroupzCreate) AddChallenges(c ...*Challenge) *GroupzCreate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return gc.AddChallengeIDs(ids...)
}

// Mutation returns the GroupzMutation object of the builder.
func (gc *GroupzCreate) Mutation() *GroupzMutation {
	return gc.mutation
}

// Save creates the Groupz in the database.
func (gc *GroupzCreate) Save(ctx context.Context) (*Groupz, error) {
	gc.defaults()
	return withHooks[*Groupz, GroupzMutation](ctx, gc.sqlSave, gc.mutation, gc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gc *GroupzCreate) SaveX(ctx context.Context) *Groupz {
	v, err := gc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gc *GroupzCreate) Exec(ctx context.Context) error {
	_, err := gc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gc *GroupzCreate) ExecX(ctx context.Context) {
	if err := gc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gc *GroupzCreate) defaults() {
	if _, ok := gc.mutation.BackgroundPicture(); !ok {
		v := groupz.DefaultBackgroundPicture
		gc.mutation.SetBackgroundPicture(v)
	}
	if _, ok := gc.mutation.CreatedAt(); !ok {
		v := groupz.DefaultCreatedAt()
		gc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gc *GroupzCreate) check() error {
	if _, ok := gc.mutation.BackgroundPicture(); !ok {
		return &ValidationError{Name: "background_picture", err: errors.New(`ent: missing required field "Groupz.background_picture"`)}
	}
	if _, ok := gc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Groupz.created_at"`)}
	}
	if _, ok := gc.mutation.LeaderID(); !ok {
		return &ValidationError{Name: "leader_id", err: errors.New(`ent: missing required field "Groupz.leader_id"`)}
	}
	return nil
}

func (gc *GroupzCreate) sqlSave(ctx context.Context) (*Groupz, error) {
	if err := gc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	gc.mutation.id = &_node.ID
	gc.mutation.done = true
	return _node, nil
}

func (gc *GroupzCreate) createSpec() (*Groupz, *sqlgraph.CreateSpec) {
	var (
		_node = &Groupz{config: gc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: groupz.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: groupz.FieldID,
			},
		}
	)
	if id, ok := gc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := gc.mutation.Name(); ok {
		_spec.SetField(groupz.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := gc.mutation.Description(); ok {
		_spec.SetField(groupz.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := gc.mutation.BackgroundPicture(); ok {
		_spec.SetField(groupz.FieldBackgroundPicture, field.TypeString, value)
		_node.BackgroundPicture = value
	}
	if value, ok := gc.mutation.CreatedAt(); ok {
		_spec.SetField(groupz.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := gc.mutation.LeaderID(); ok {
		_spec.SetField(groupz.FieldLeaderID, field.TypeInt64, value)
		_node.LeaderID = value
	}
	if nodes := gc.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   groupz.MembersTable,
			Columns: []string{groupz.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: member.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gc.mutation.ChallengesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   groupz.ChallengesTable,
			Columns: []string{groupz.ChallengesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: challenge.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GroupzCreateBulk is the builder for creating many Groupz entities in bulk.
type GroupzCreateBulk struct {
	config
	builders []*GroupzCreate
}

// Save creates the Groupz entities in the database.
func (gcb *GroupzCreateBulk) Save(ctx context.Context) ([]*Groupz, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gcb.builders))
	nodes := make([]*Groupz, len(gcb.builders))
	mutators := make([]Mutator, len(gcb.builders))
	for i := range gcb.builders {
		func(i int, root context.Context) {
			builder := gcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GroupzMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gcb *GroupzCreateBulk) SaveX(ctx context.Context) []*Groupz {
	v, err := gcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gcb *GroupzCreateBulk) Exec(ctx context.Context) error {
	_, err := gcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcb *GroupzCreateBulk) ExecX(ctx context.Context) {
	if err := gcb.Exec(ctx); err != nil {
		panic(err)
	}
}
