// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/manhrev/runtracking/backend/group/pkg/ent/challenge"
	"github.com/manhrev/runtracking/backend/group/pkg/ent/challengemember"
	"github.com/manhrev/runtracking/backend/group/pkg/ent/challengememberrule"
	"github.com/manhrev/runtracking/backend/group/pkg/ent/member"
)

// ChallengeMemberCreate is the builder for creating a ChallengeMember entity.
type ChallengeMemberCreate struct {
	config
	mutation *ChallengeMemberMutation
	hooks    []Hook
}

// SetPoint sets the "point" field.
func (cmc *ChallengeMemberCreate) SetPoint(i int64) *ChallengeMemberCreate {
	cmc.mutation.SetPoint(i)
	return cmc
}

// SetNillablePoint sets the "point" field if the given value is not nil.
func (cmc *ChallengeMemberCreate) SetNillablePoint(i *int64) *ChallengeMemberCreate {
	if i != nil {
		cmc.SetPoint(*i)
	}
	return cmc
}

// SetMemberID sets the "member_id" field.
func (cmc *ChallengeMemberCreate) SetMemberID(i int64) *ChallengeMemberCreate {
	cmc.mutation.SetMemberID(i)
	return cmc
}

// SetChallengeID sets the "challenge_id" field.
func (cmc *ChallengeMemberCreate) SetChallengeID(i int64) *ChallengeMemberCreate {
	cmc.mutation.SetChallengeID(i)
	return cmc
}

// SetIsCompleted sets the "is_completed" field.
func (cmc *ChallengeMemberCreate) SetIsCompleted(b bool) *ChallengeMemberCreate {
	cmc.mutation.SetIsCompleted(b)
	return cmc
}

// SetNillableIsCompleted sets the "is_completed" field if the given value is not nil.
func (cmc *ChallengeMemberCreate) SetNillableIsCompleted(b *bool) *ChallengeMemberCreate {
	if b != nil {
		cmc.SetIsCompleted(*b)
	}
	return cmc
}

// SetTimeCompleted sets the "time_completed" field.
func (cmc *ChallengeMemberCreate) SetTimeCompleted(t time.Time) *ChallengeMemberCreate {
	cmc.mutation.SetTimeCompleted(t)
	return cmc
}

// SetNillableTimeCompleted sets the "time_completed" field if the given value is not nil.
func (cmc *ChallengeMemberCreate) SetNillableTimeCompleted(t *time.Time) *ChallengeMemberCreate {
	if t != nil {
		cmc.SetTimeCompleted(*t)
	}
	return cmc
}

// SetUpdatedAt sets the "updated_at" field.
func (cmc *ChallengeMemberCreate) SetUpdatedAt(t time.Time) *ChallengeMemberCreate {
	cmc.mutation.SetUpdatedAt(t)
	return cmc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cmc *ChallengeMemberCreate) SetNillableUpdatedAt(t *time.Time) *ChallengeMemberCreate {
	if t != nil {
		cmc.SetUpdatedAt(*t)
	}
	return cmc
}

// SetID sets the "id" field.
func (cmc *ChallengeMemberCreate) SetID(i int64) *ChallengeMemberCreate {
	cmc.mutation.SetID(i)
	return cmc
}

// AddChallengeMemberRuleIDs adds the "challenge_member_rules" edge to the ChallengeMemberRule entity by IDs.
func (cmc *ChallengeMemberCreate) AddChallengeMemberRuleIDs(ids ...int64) *ChallengeMemberCreate {
	cmc.mutation.AddChallengeMemberRuleIDs(ids...)
	return cmc
}

// AddChallengeMemberRules adds the "challenge_member_rules" edges to the ChallengeMemberRule entity.
func (cmc *ChallengeMemberCreate) AddChallengeMemberRules(c ...*ChallengeMemberRule) *ChallengeMemberCreate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cmc.AddChallengeMemberRuleIDs(ids...)
}

// SetChallenge sets the "challenge" edge to the Challenge entity.
func (cmc *ChallengeMemberCreate) SetChallenge(c *Challenge) *ChallengeMemberCreate {
	return cmc.SetChallengeID(c.ID)
}

// SetMember sets the "member" edge to the Member entity.
func (cmc *ChallengeMemberCreate) SetMember(m *Member) *ChallengeMemberCreate {
	return cmc.SetMemberID(m.ID)
}

// Mutation returns the ChallengeMemberMutation object of the builder.
func (cmc *ChallengeMemberCreate) Mutation() *ChallengeMemberMutation {
	return cmc.mutation
}

// Save creates the ChallengeMember in the database.
func (cmc *ChallengeMemberCreate) Save(ctx context.Context) (*ChallengeMember, error) {
	cmc.defaults()
	return withHooks[*ChallengeMember, ChallengeMemberMutation](ctx, cmc.sqlSave, cmc.mutation, cmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cmc *ChallengeMemberCreate) SaveX(ctx context.Context) *ChallengeMember {
	v, err := cmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cmc *ChallengeMemberCreate) Exec(ctx context.Context) error {
	_, err := cmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmc *ChallengeMemberCreate) ExecX(ctx context.Context) {
	if err := cmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cmc *ChallengeMemberCreate) defaults() {
	if _, ok := cmc.mutation.Point(); !ok {
		v := challengemember.DefaultPoint
		cmc.mutation.SetPoint(v)
	}
	if _, ok := cmc.mutation.IsCompleted(); !ok {
		v := challengemember.DefaultIsCompleted
		cmc.mutation.SetIsCompleted(v)
	}
	if _, ok := cmc.mutation.UpdatedAt(); !ok {
		v := challengemember.DefaultUpdatedAt()
		cmc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmc *ChallengeMemberCreate) check() error {
	if _, ok := cmc.mutation.Point(); !ok {
		return &ValidationError{Name: "point", err: errors.New(`ent: missing required field "ChallengeMember.point"`)}
	}
	if _, ok := cmc.mutation.MemberID(); !ok {
		return &ValidationError{Name: "member_id", err: errors.New(`ent: missing required field "ChallengeMember.member_id"`)}
	}
	if _, ok := cmc.mutation.ChallengeID(); !ok {
		return &ValidationError{Name: "challenge_id", err: errors.New(`ent: missing required field "ChallengeMember.challenge_id"`)}
	}
	if _, ok := cmc.mutation.IsCompleted(); !ok {
		return &ValidationError{Name: "is_completed", err: errors.New(`ent: missing required field "ChallengeMember.is_completed"`)}
	}
	if _, ok := cmc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ChallengeMember.updated_at"`)}
	}
	if _, ok := cmc.mutation.ChallengeID(); !ok {
		return &ValidationError{Name: "challenge", err: errors.New(`ent: missing required edge "ChallengeMember.challenge"`)}
	}
	if _, ok := cmc.mutation.MemberID(); !ok {
		return &ValidationError{Name: "member", err: errors.New(`ent: missing required edge "ChallengeMember.member"`)}
	}
	return nil
}

func (cmc *ChallengeMemberCreate) sqlSave(ctx context.Context) (*ChallengeMember, error) {
	if err := cmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	cmc.mutation.id = &_node.ID
	cmc.mutation.done = true
	return _node, nil
}

func (cmc *ChallengeMemberCreate) createSpec() (*ChallengeMember, *sqlgraph.CreateSpec) {
	var (
		_node = &ChallengeMember{config: cmc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: challengemember.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: challengemember.FieldID,
			},
		}
	)
	if id, ok := cmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cmc.mutation.Point(); ok {
		_spec.SetField(challengemember.FieldPoint, field.TypeInt64, value)
		_node.Point = value
	}
	if value, ok := cmc.mutation.IsCompleted(); ok {
		_spec.SetField(challengemember.FieldIsCompleted, field.TypeBool, value)
		_node.IsCompleted = value
	}
	if value, ok := cmc.mutation.TimeCompleted(); ok {
		_spec.SetField(challengemember.FieldTimeCompleted, field.TypeTime, value)
		_node.TimeCompleted = value
	}
	if value, ok := cmc.mutation.UpdatedAt(); ok {
		_spec.SetField(challengemember.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := cmc.mutation.ChallengeMemberRulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   challengemember.ChallengeMemberRulesTable,
			Columns: []string{challengemember.ChallengeMemberRulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: challengememberrule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cmc.mutation.ChallengeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   challengemember.ChallengeTable,
			Columns: []string{challengemember.ChallengeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: challenge.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ChallengeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cmc.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   challengemember.MemberTable,
			Columns: []string{challengemember.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: member.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MemberID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ChallengeMemberCreateBulk is the builder for creating many ChallengeMember entities in bulk.
type ChallengeMemberCreateBulk struct {
	config
	builders []*ChallengeMemberCreate
}

// Save creates the ChallengeMember entities in the database.
func (cmcb *ChallengeMemberCreateBulk) Save(ctx context.Context) ([]*ChallengeMember, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cmcb.builders))
	nodes := make([]*ChallengeMember, len(cmcb.builders))
	mutators := make([]Mutator, len(cmcb.builders))
	for i := range cmcb.builders {
		func(i int, root context.Context) {
			builder := cmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChallengeMemberMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cmcb *ChallengeMemberCreateBulk) SaveX(ctx context.Context) []*ChallengeMember {
	v, err := cmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cmcb *ChallengeMemberCreateBulk) Exec(ctx context.Context) error {
	_, err := cmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmcb *ChallengeMemberCreateBulk) ExecX(ctx context.Context) {
	if err := cmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
