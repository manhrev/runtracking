// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/manhrev/runtracking/backend/group/pkg/ent/predicate"
	"github.com/manhrev/runtracking/backend/group/pkg/ent/seasonmember"
)

// SeasonMemberDelete is the builder for deleting a SeasonMember entity.
type SeasonMemberDelete struct {
	config
	hooks    []Hook
	mutation *SeasonMemberMutation
}

// Where appends a list predicates to the SeasonMemberDelete builder.
func (smd *SeasonMemberDelete) Where(ps ...predicate.SeasonMember) *SeasonMemberDelete {
	smd.mutation.Where(ps...)
	return smd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (smd *SeasonMemberDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, SeasonMemberMutation](ctx, smd.sqlExec, smd.mutation, smd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (smd *SeasonMemberDelete) ExecX(ctx context.Context) int {
	n, err := smd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (smd *SeasonMemberDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := &sqlgraph.DeleteSpec{
		Node: &sqlgraph.NodeSpec{
			Table: seasonmember.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: seasonmember.FieldID,
			},
		},
	}
	if ps := smd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, smd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	smd.mutation.done = true
	return affected, err
}

// SeasonMemberDeleteOne is the builder for deleting a single SeasonMember entity.
type SeasonMemberDeleteOne struct {
	smd *SeasonMemberDelete
}

// Where appends a list predicates to the SeasonMemberDelete builder.
func (smdo *SeasonMemberDeleteOne) Where(ps ...predicate.SeasonMember) *SeasonMemberDeleteOne {
	smdo.smd.mutation.Where(ps...)
	return smdo
}

// Exec executes the deletion query.
func (smdo *SeasonMemberDeleteOne) Exec(ctx context.Context) error {
	n, err := smdo.smd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{seasonmember.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (smdo *SeasonMemberDeleteOne) ExecX(ctx context.Context) {
	if err := smdo.Exec(ctx); err != nil {
		panic(err)
	}
}
