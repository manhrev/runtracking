// Code generated by ent, DO NOT EDIT.

package challengememberrule

import (
	"time"
)

const (
	// Label holds the string label denoting the challengememberrule type in the database.
	Label = "challenge_member_rule"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTotal holds the string denoting the total field in the database.
	FieldTotal = "total"
	// FieldRuleID holds the string denoting the rule_id field in the database.
	FieldRuleID = "rule_id"
	// FieldIsCompleted holds the string denoting the is_completed field in the database.
	FieldIsCompleted = "is_completed"
	// FieldTimeCompleted holds the string denoting the time_completed field in the database.
	FieldTimeCompleted = "time_completed"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeChallengeMember holds the string denoting the challenge_member edge name in mutations.
	EdgeChallengeMember = "challenge_member"
	// Table holds the table name of the challengememberrule in the database.
	Table = "challenge_member_rules"
	// ChallengeMemberTable is the table that holds the challenge_member relation/edge.
	ChallengeMemberTable = "challenge_member_rules"
	// ChallengeMemberInverseTable is the table name for the ChallengeMember entity.
	// It exists in this package in order to avoid circular dependency with the "challengemember" package.
	ChallengeMemberInverseTable = "challenge_members"
	// ChallengeMemberColumn is the table column denoting the challenge_member relation/edge.
	ChallengeMemberColumn = "challenge_member_challenge_member_rules"
)

// Columns holds all SQL columns for challengememberrule fields.
var Columns = []string{
	FieldID,
	FieldTotal,
	FieldRuleID,
	FieldIsCompleted,
	FieldTimeCompleted,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "challenge_member_rules"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"challenge_member_challenge_member_rules",
	"challenge_rule_challenge_member_rules",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultTotal holds the default value on creation for the "total" field.
	DefaultTotal int64
	// DefaultIsCompleted holds the default value on creation for the "is_completed" field.
	DefaultIsCompleted bool
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)
