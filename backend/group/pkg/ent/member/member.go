// Code generated by ent, DO NOT EDIT.

package member

import (
	"time"
)

const (
	// Label holds the string label denoting the member type in the database.
	Label = "member"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldJoiningAt holds the string denoting the joining_at field in the database.
	FieldJoiningAt = "joining_at"
	// EdgeGroupz holds the string denoting the groupz edge name in mutations.
	EdgeGroupz = "groupz"
	// EdgeChallengeMembers holds the string denoting the challenge_members edge name in mutations.
	EdgeChallengeMembers = "challenge_members"
	// EdgeSeasonMembers holds the string denoting the season_members edge name in mutations.
	EdgeSeasonMembers = "season_members"
	// EdgeChallenge holds the string denoting the challenge edge name in mutations.
	EdgeChallenge = "challenge"
	// Table holds the table name of the member in the database.
	Table = "members"
	// GroupzTable is the table that holds the groupz relation/edge.
	GroupzTable = "members"
	// GroupzInverseTable is the table name for the Groupz entity.
	// It exists in this package in order to avoid circular dependency with the "groupz" package.
	GroupzInverseTable = "groupzs"
	// GroupzColumn is the table column denoting the groupz relation/edge.
	GroupzColumn = "groupz_members"
	// ChallengeMembersTable is the table that holds the challenge_members relation/edge.
	ChallengeMembersTable = "challenge_members"
	// ChallengeMembersInverseTable is the table name for the ChallengeMember entity.
	// It exists in this package in order to avoid circular dependency with the "challengemember" package.
	ChallengeMembersInverseTable = "challenge_members"
	// ChallengeMembersColumn is the table column denoting the challenge_members relation/edge.
	ChallengeMembersColumn = "member_id"
	// SeasonMembersTable is the table that holds the season_members relation/edge.
	SeasonMembersTable = "season_members"
	// SeasonMembersInverseTable is the table name for the SeasonMember entity.
	// It exists in this package in order to avoid circular dependency with the "seasonmember" package.
	SeasonMembersInverseTable = "season_members"
	// SeasonMembersColumn is the table column denoting the season_members relation/edge.
	SeasonMembersColumn = "member_id"
	// ChallengeTable is the table that holds the challenge relation/edge.
	ChallengeTable = "challenges"
	// ChallengeInverseTable is the table name for the Challenge entity.
	// It exists in this package in order to avoid circular dependency with the "challenge" package.
	ChallengeInverseTable = "challenges"
	// ChallengeColumn is the table column denoting the challenge relation/edge.
	ChallengeColumn = "completed_first_member_id"
)

// Columns holds all SQL columns for member fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUserID,
	FieldStatus,
	FieldJoiningAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "members"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"groupz_members",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus uint32
)
