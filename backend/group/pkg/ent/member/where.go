// Code generated by ent, DO NOT EDIT.

package member

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/manhrev/runtracking/backend/group/pkg/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldCreatedAt, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int64) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldUserID, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v uint32) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldStatus, v))
}

// JoiningAt applies equality check predicate on the "joining_at" field. It's identical to JoiningAtEQ.
func JoiningAt(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldJoiningAt, v))
}

// Point applies equality check predicate on the "point" field. It's identical to PointEQ.
func Point(v int64) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldPoint, v))
}

// CompletedChallengeCount applies equality check predicate on the "completed_challenge_count" field. It's identical to CompletedChallengeCountEQ.
func CompletedChallengeCount(v int64) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldCompletedChallengeCount, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldCreatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int64) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int64) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int64) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int64) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v int64) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v int64) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v int64) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v int64) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldUserID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v uint32) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v uint32) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...uint32) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...uint32) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v uint32) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v uint32) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v uint32) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v uint32) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldStatus, v))
}

// JoiningAtEQ applies the EQ predicate on the "joining_at" field.
func JoiningAtEQ(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldJoiningAt, v))
}

// JoiningAtNEQ applies the NEQ predicate on the "joining_at" field.
func JoiningAtNEQ(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldJoiningAt, v))
}

// JoiningAtIn applies the In predicate on the "joining_at" field.
func JoiningAtIn(vs ...time.Time) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldJoiningAt, vs...))
}

// JoiningAtNotIn applies the NotIn predicate on the "joining_at" field.
func JoiningAtNotIn(vs ...time.Time) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldJoiningAt, vs...))
}

// JoiningAtGT applies the GT predicate on the "joining_at" field.
func JoiningAtGT(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldJoiningAt, v))
}

// JoiningAtGTE applies the GTE predicate on the "joining_at" field.
func JoiningAtGTE(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldJoiningAt, v))
}

// JoiningAtLT applies the LT predicate on the "joining_at" field.
func JoiningAtLT(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldJoiningAt, v))
}

// JoiningAtLTE applies the LTE predicate on the "joining_at" field.
func JoiningAtLTE(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldJoiningAt, v))
}

// JoiningAtIsNil applies the IsNil predicate on the "joining_at" field.
func JoiningAtIsNil() predicate.Member {
	return predicate.Member(sql.FieldIsNull(FieldJoiningAt))
}

// JoiningAtNotNil applies the NotNil predicate on the "joining_at" field.
func JoiningAtNotNil() predicate.Member {
	return predicate.Member(sql.FieldNotNull(FieldJoiningAt))
}

// PointEQ applies the EQ predicate on the "point" field.
func PointEQ(v int64) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldPoint, v))
}

// PointNEQ applies the NEQ predicate on the "point" field.
func PointNEQ(v int64) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldPoint, v))
}

// PointIn applies the In predicate on the "point" field.
func PointIn(vs ...int64) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldPoint, vs...))
}

// PointNotIn applies the NotIn predicate on the "point" field.
func PointNotIn(vs ...int64) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldPoint, vs...))
}

// PointGT applies the GT predicate on the "point" field.
func PointGT(v int64) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldPoint, v))
}

// PointGTE applies the GTE predicate on the "point" field.
func PointGTE(v int64) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldPoint, v))
}

// PointLT applies the LT predicate on the "point" field.
func PointLT(v int64) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldPoint, v))
}

// PointLTE applies the LTE predicate on the "point" field.
func PointLTE(v int64) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldPoint, v))
}

// CompletedChallengeCountEQ applies the EQ predicate on the "completed_challenge_count" field.
func CompletedChallengeCountEQ(v int64) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldCompletedChallengeCount, v))
}

// CompletedChallengeCountNEQ applies the NEQ predicate on the "completed_challenge_count" field.
func CompletedChallengeCountNEQ(v int64) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldCompletedChallengeCount, v))
}

// CompletedChallengeCountIn applies the In predicate on the "completed_challenge_count" field.
func CompletedChallengeCountIn(vs ...int64) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldCompletedChallengeCount, vs...))
}

// CompletedChallengeCountNotIn applies the NotIn predicate on the "completed_challenge_count" field.
func CompletedChallengeCountNotIn(vs ...int64) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldCompletedChallengeCount, vs...))
}

// CompletedChallengeCountGT applies the GT predicate on the "completed_challenge_count" field.
func CompletedChallengeCountGT(v int64) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldCompletedChallengeCount, v))
}

// CompletedChallengeCountGTE applies the GTE predicate on the "completed_challenge_count" field.
func CompletedChallengeCountGTE(v int64) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldCompletedChallengeCount, v))
}

// CompletedChallengeCountLT applies the LT predicate on the "completed_challenge_count" field.
func CompletedChallengeCountLT(v int64) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldCompletedChallengeCount, v))
}

// CompletedChallengeCountLTE applies the LTE predicate on the "completed_challenge_count" field.
func CompletedChallengeCountLTE(v int64) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldCompletedChallengeCount, v))
}

// HasGroupz applies the HasEdge predicate on the "groupz" edge.
func HasGroupz() predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GroupzTable, GroupzColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGroupzWith applies the HasEdge predicate on the "groupz" edge with a given conditions (other predicates).
func HasGroupzWith(preds ...predicate.Groupz) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GroupzInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GroupzTable, GroupzColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChallengeMembers applies the HasEdge predicate on the "challenge_members" edge.
func HasChallengeMembers() predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChallengeMembersTable, ChallengeMembersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChallengeMembersWith applies the HasEdge predicate on the "challenge_members" edge with a given conditions (other predicates).
func HasChallengeMembersWith(preds ...predicate.ChallengeMember) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChallengeMembersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChallengeMembersTable, ChallengeMembersColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSeasonMembers applies the HasEdge predicate on the "season_members" edge.
func HasSeasonMembers() predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SeasonMembersTable, SeasonMembersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSeasonMembersWith applies the HasEdge predicate on the "season_members" edge with a given conditions (other predicates).
func HasSeasonMembersWith(preds ...predicate.SeasonMember) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SeasonMembersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SeasonMembersTable, SeasonMembersColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChallenge applies the HasEdge predicate on the "challenge" edge.
func HasChallenge() predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ChallengeTable, ChallengeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChallengeWith applies the HasEdge predicate on the "challenge" edge with a given conditions (other predicates).
func HasChallengeWith(preds ...predicate.Challenge) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChallengeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ChallengeTable, ChallengeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Member) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Member) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Member) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		p(s.Not())
	})
}
