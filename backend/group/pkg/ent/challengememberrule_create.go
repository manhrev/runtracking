// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/manhrev/runtracking/backend/group/pkg/ent/challengemember"
	"github.com/manhrev/runtracking/backend/group/pkg/ent/challengememberrule"
	"github.com/manhrev/runtracking/backend/group/pkg/ent/challengerule"
)

// ChallengeMemberRuleCreate is the builder for creating a ChallengeMemberRule entity.
type ChallengeMemberRuleCreate struct {
	config
	mutation *ChallengeMemberRuleMutation
	hooks    []Hook
}

// SetTotal sets the "total" field.
func (cmrc *ChallengeMemberRuleCreate) SetTotal(i int64) *ChallengeMemberRuleCreate {
	cmrc.mutation.SetTotal(i)
	return cmrc
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (cmrc *ChallengeMemberRuleCreate) SetNillableTotal(i *int64) *ChallengeMemberRuleCreate {
	if i != nil {
		cmrc.SetTotal(*i)
	}
	return cmrc
}

// SetRuleID sets the "rule_id" field.
func (cmrc *ChallengeMemberRuleCreate) SetRuleID(i int64) *ChallengeMemberRuleCreate {
	cmrc.mutation.SetRuleID(i)
	return cmrc
}

// SetStatus sets the "status" field.
func (cmrc *ChallengeMemberRuleCreate) SetStatus(i int64) *ChallengeMemberRuleCreate {
	cmrc.mutation.SetStatus(i)
	return cmrc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cmrc *ChallengeMemberRuleCreate) SetNillableStatus(i *int64) *ChallengeMemberRuleCreate {
	if i != nil {
		cmrc.SetStatus(*i)
	}
	return cmrc
}

// SetTimeCompleted sets the "time_completed" field.
func (cmrc *ChallengeMemberRuleCreate) SetTimeCompleted(t time.Time) *ChallengeMemberRuleCreate {
	cmrc.mutation.SetTimeCompleted(t)
	return cmrc
}

// SetNillableTimeCompleted sets the "time_completed" field if the given value is not nil.
func (cmrc *ChallengeMemberRuleCreate) SetNillableTimeCompleted(t *time.Time) *ChallengeMemberRuleCreate {
	if t != nil {
		cmrc.SetTimeCompleted(*t)
	}
	return cmrc
}

// SetUpdatedAt sets the "updated_at" field.
func (cmrc *ChallengeMemberRuleCreate) SetUpdatedAt(t time.Time) *ChallengeMemberRuleCreate {
	cmrc.mutation.SetUpdatedAt(t)
	return cmrc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cmrc *ChallengeMemberRuleCreate) SetNillableUpdatedAt(t *time.Time) *ChallengeMemberRuleCreate {
	if t != nil {
		cmrc.SetUpdatedAt(*t)
	}
	return cmrc
}

// SetID sets the "id" field.
func (cmrc *ChallengeMemberRuleCreate) SetID(i int64) *ChallengeMemberRuleCreate {
	cmrc.mutation.SetID(i)
	return cmrc
}

// SetChallengeMemberID sets the "challenge_member" edge to the ChallengeMember entity by ID.
func (cmrc *ChallengeMemberRuleCreate) SetChallengeMemberID(id int64) *ChallengeMemberRuleCreate {
	cmrc.mutation.SetChallengeMemberID(id)
	return cmrc
}

// SetNillableChallengeMemberID sets the "challenge_member" edge to the ChallengeMember entity by ID if the given value is not nil.
func (cmrc *ChallengeMemberRuleCreate) SetNillableChallengeMemberID(id *int64) *ChallengeMemberRuleCreate {
	if id != nil {
		cmrc = cmrc.SetChallengeMemberID(*id)
	}
	return cmrc
}

// SetChallengeMember sets the "challenge_member" edge to the ChallengeMember entity.
func (cmrc *ChallengeMemberRuleCreate) SetChallengeMember(c *ChallengeMember) *ChallengeMemberRuleCreate {
	return cmrc.SetChallengeMemberID(c.ID)
}

// SetChallengeRuleID sets the "challenge_rule" edge to the ChallengeRule entity by ID.
func (cmrc *ChallengeMemberRuleCreate) SetChallengeRuleID(id int64) *ChallengeMemberRuleCreate {
	cmrc.mutation.SetChallengeRuleID(id)
	return cmrc
}

// SetNillableChallengeRuleID sets the "challenge_rule" edge to the ChallengeRule entity by ID if the given value is not nil.
func (cmrc *ChallengeMemberRuleCreate) SetNillableChallengeRuleID(id *int64) *ChallengeMemberRuleCreate {
	if id != nil {
		cmrc = cmrc.SetChallengeRuleID(*id)
	}
	return cmrc
}

// SetChallengeRule sets the "challenge_rule" edge to the ChallengeRule entity.
func (cmrc *ChallengeMemberRuleCreate) SetChallengeRule(c *ChallengeRule) *ChallengeMemberRuleCreate {
	return cmrc.SetChallengeRuleID(c.ID)
}

// Mutation returns the ChallengeMemberRuleMutation object of the builder.
func (cmrc *ChallengeMemberRuleCreate) Mutation() *ChallengeMemberRuleMutation {
	return cmrc.mutation
}

// Save creates the ChallengeMemberRule in the database.
func (cmrc *ChallengeMemberRuleCreate) Save(ctx context.Context) (*ChallengeMemberRule, error) {
	cmrc.defaults()
	return withHooks[*ChallengeMemberRule, ChallengeMemberRuleMutation](ctx, cmrc.sqlSave, cmrc.mutation, cmrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cmrc *ChallengeMemberRuleCreate) SaveX(ctx context.Context) *ChallengeMemberRule {
	v, err := cmrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cmrc *ChallengeMemberRuleCreate) Exec(ctx context.Context) error {
	_, err := cmrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmrc *ChallengeMemberRuleCreate) ExecX(ctx context.Context) {
	if err := cmrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cmrc *ChallengeMemberRuleCreate) defaults() {
	if _, ok := cmrc.mutation.Total(); !ok {
		v := challengememberrule.DefaultTotal
		cmrc.mutation.SetTotal(v)
	}
	if _, ok := cmrc.mutation.Status(); !ok {
		v := challengememberrule.DefaultStatus
		cmrc.mutation.SetStatus(v)
	}
	if _, ok := cmrc.mutation.UpdatedAt(); !ok {
		v := challengememberrule.DefaultUpdatedAt()
		cmrc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmrc *ChallengeMemberRuleCreate) check() error {
	if _, ok := cmrc.mutation.Total(); !ok {
		return &ValidationError{Name: "total", err: errors.New(`ent: missing required field "ChallengeMemberRule.total"`)}
	}
	if _, ok := cmrc.mutation.RuleID(); !ok {
		return &ValidationError{Name: "rule_id", err: errors.New(`ent: missing required field "ChallengeMemberRule.rule_id"`)}
	}
	if _, ok := cmrc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "ChallengeMemberRule.status"`)}
	}
	if _, ok := cmrc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ChallengeMemberRule.updated_at"`)}
	}
	return nil
}

func (cmrc *ChallengeMemberRuleCreate) sqlSave(ctx context.Context) (*ChallengeMemberRule, error) {
	if err := cmrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cmrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cmrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	cmrc.mutation.id = &_node.ID
	cmrc.mutation.done = true
	return _node, nil
}

func (cmrc *ChallengeMemberRuleCreate) createSpec() (*ChallengeMemberRule, *sqlgraph.CreateSpec) {
	var (
		_node = &ChallengeMemberRule{config: cmrc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: challengememberrule.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: challengememberrule.FieldID,
			},
		}
	)
	if id, ok := cmrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cmrc.mutation.Total(); ok {
		_spec.SetField(challengememberrule.FieldTotal, field.TypeInt64, value)
		_node.Total = value
	}
	if value, ok := cmrc.mutation.RuleID(); ok {
		_spec.SetField(challengememberrule.FieldRuleID, field.TypeInt64, value)
		_node.RuleID = value
	}
	if value, ok := cmrc.mutation.Status(); ok {
		_spec.SetField(challengememberrule.FieldStatus, field.TypeInt64, value)
		_node.Status = value
	}
	if value, ok := cmrc.mutation.TimeCompleted(); ok {
		_spec.SetField(challengememberrule.FieldTimeCompleted, field.TypeTime, value)
		_node.TimeCompleted = value
	}
	if value, ok := cmrc.mutation.UpdatedAt(); ok {
		_spec.SetField(challengememberrule.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := cmrc.mutation.ChallengeMemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   challengememberrule.ChallengeMemberTable,
			Columns: []string{challengememberrule.ChallengeMemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: challengemember.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.challenge_member_challenge_member_rules = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cmrc.mutation.ChallengeRuleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   challengememberrule.ChallengeRuleTable,
			Columns: []string{challengememberrule.ChallengeRuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: challengerule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.challenge_rule_challenge_member_rules = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ChallengeMemberRuleCreateBulk is the builder for creating many ChallengeMemberRule entities in bulk.
type ChallengeMemberRuleCreateBulk struct {
	config
	builders []*ChallengeMemberRuleCreate
}

// Save creates the ChallengeMemberRule entities in the database.
func (cmrcb *ChallengeMemberRuleCreateBulk) Save(ctx context.Context) ([]*ChallengeMemberRule, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cmrcb.builders))
	nodes := make([]*ChallengeMemberRule, len(cmrcb.builders))
	mutators := make([]Mutator, len(cmrcb.builders))
	for i := range cmrcb.builders {
		func(i int, root context.Context) {
			builder := cmrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChallengeMemberRuleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cmrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cmrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cmrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cmrcb *ChallengeMemberRuleCreateBulk) SaveX(ctx context.Context) []*ChallengeMemberRule {
	v, err := cmrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cmrcb *ChallengeMemberRuleCreateBulk) Exec(ctx context.Context) error {
	_, err := cmrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmrcb *ChallengeMemberRuleCreateBulk) ExecX(ctx context.Context) {
	if err := cmrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
