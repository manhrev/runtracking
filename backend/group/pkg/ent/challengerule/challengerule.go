// Code generated by ent, DO NOT EDIT.

package challengerule

import (
	"time"
)

const (
	// Label holds the string label denoting the challengerule type in the database.
	Label = "challenge_rule"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldGoal holds the string denoting the goal field in the database.
	FieldGoal = "goal"
	// FieldRuleID holds the string denoting the rule_id field in the database.
	FieldRuleID = "rule_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeChallengeMemberRules holds the string denoting the challenge_member_rules edge name in mutations.
	EdgeChallengeMemberRules = "challenge_member_rules"
	// EdgeChallenge holds the string denoting the challenge edge name in mutations.
	EdgeChallenge = "challenge"
	// Table holds the table name of the challengerule in the database.
	Table = "challenge_rules"
	// ChallengeMemberRulesTable is the table that holds the challenge_member_rules relation/edge.
	ChallengeMemberRulesTable = "challenge_member_rules"
	// ChallengeMemberRulesInverseTable is the table name for the ChallengeMemberRule entity.
	// It exists in this package in order to avoid circular dependency with the "challengememberrule" package.
	ChallengeMemberRulesInverseTable = "challenge_member_rules"
	// ChallengeMemberRulesColumn is the table column denoting the challenge_member_rules relation/edge.
	ChallengeMemberRulesColumn = "challenge_rule_challenge_member_rules"
	// ChallengeTable is the table that holds the challenge relation/edge.
	ChallengeTable = "challenge_rules"
	// ChallengeInverseTable is the table name for the Challenge entity.
	// It exists in this package in order to avoid circular dependency with the "challenge" package.
	ChallengeInverseTable = "challenges"
	// ChallengeColumn is the table column denoting the challenge relation/edge.
	ChallengeColumn = "challenge_challenge_rules"
)

// Columns holds all SQL columns for challengerule fields.
var Columns = []string{
	FieldID,
	FieldGoal,
	FieldRuleID,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "challenge_rules"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"challenge_challenge_rules",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultGoal holds the default value on creation for the "goal" field.
	DefaultGoal int64
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
)
