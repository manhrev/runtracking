// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/manhrev/runtracking/backend/group/pkg/ent/challengemember"
	"github.com/manhrev/runtracking/backend/group/pkg/ent/challengememberrule"
)

// ChallengeMemberRule is the model entity for the ChallengeMemberRule schema.
type ChallengeMemberRule struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Total holds the value of the "total" field.
	Total int64 `json:"total,omitempty"`
	// RuleID holds the value of the "rule_id" field.
	RuleID int64 `json:"rule_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ChallengeMemberRuleQuery when eager-loading is set.
	Edges                                   ChallengeMemberRuleEdges `json:"edges"`
	challenge_member_challenge_member_rules *int64
}

// ChallengeMemberRuleEdges holds the relations/edges for other nodes in the graph.
type ChallengeMemberRuleEdges struct {
	// ChallengeMember holds the value of the challenge_member edge.
	ChallengeMember *ChallengeMember `json:"challenge_member,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ChallengeMemberOrErr returns the ChallengeMember value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChallengeMemberRuleEdges) ChallengeMemberOrErr() (*ChallengeMember, error) {
	if e.loadedTypes[0] {
		if e.ChallengeMember == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: challengemember.Label}
		}
		return e.ChallengeMember, nil
	}
	return nil, &NotLoadedError{edge: "challenge_member"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ChallengeMemberRule) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case challengememberrule.FieldID, challengememberrule.FieldTotal, challengememberrule.FieldRuleID:
			values[i] = new(sql.NullInt64)
		case challengememberrule.ForeignKeys[0]: // challenge_member_challenge_member_rules
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ChallengeMemberRule", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ChallengeMemberRule fields.
func (cmr *ChallengeMemberRule) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case challengememberrule.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cmr.ID = int64(value.Int64)
		case challengememberrule.FieldTotal:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total", values[i])
			} else if value.Valid {
				cmr.Total = value.Int64
			}
		case challengememberrule.FieldRuleID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rule_id", values[i])
			} else if value.Valid {
				cmr.RuleID = value.Int64
			}
		case challengememberrule.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field challenge_member_challenge_member_rules", value)
			} else if value.Valid {
				cmr.challenge_member_challenge_member_rules = new(int64)
				*cmr.challenge_member_challenge_member_rules = int64(value.Int64)
			}
		}
	}
	return nil
}

// QueryChallengeMember queries the "challenge_member" edge of the ChallengeMemberRule entity.
func (cmr *ChallengeMemberRule) QueryChallengeMember() *ChallengeMemberQuery {
	return NewChallengeMemberRuleClient(cmr.config).QueryChallengeMember(cmr)
}

// Update returns a builder for updating this ChallengeMemberRule.
// Note that you need to call ChallengeMemberRule.Unwrap() before calling this method if this ChallengeMemberRule
// was returned from a transaction, and the transaction was committed or rolled back.
func (cmr *ChallengeMemberRule) Update() *ChallengeMemberRuleUpdateOne {
	return NewChallengeMemberRuleClient(cmr.config).UpdateOne(cmr)
}

// Unwrap unwraps the ChallengeMemberRule entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cmr *ChallengeMemberRule) Unwrap() *ChallengeMemberRule {
	_tx, ok := cmr.config.driver.(*txDriver)
	if !ok {
		panic("ent: ChallengeMemberRule is not a transactional entity")
	}
	cmr.config.driver = _tx.drv
	return cmr
}

// String implements the fmt.Stringer.
func (cmr *ChallengeMemberRule) String() string {
	var builder strings.Builder
	builder.WriteString("ChallengeMemberRule(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cmr.ID))
	builder.WriteString("total=")
	builder.WriteString(fmt.Sprintf("%v", cmr.Total))
	builder.WriteString(", ")
	builder.WriteString("rule_id=")
	builder.WriteString(fmt.Sprintf("%v", cmr.RuleID))
	builder.WriteByte(')')
	return builder.String()
}

// ChallengeMemberRules is a parsable slice of ChallengeMemberRule.
type ChallengeMemberRules []*ChallengeMemberRule

func (cmr ChallengeMemberRules) config(cfg config) {
	for _i := range cmr {
		cmr[_i].config = cfg
	}
}
