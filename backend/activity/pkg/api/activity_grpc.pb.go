// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/activity.proto

package activity

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ActivityClient is the client API for Activity service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActivityClient interface {
	// for each user
	CreateActivityInfo(ctx context.Context, in *CreateActivityInfoRequest, opts ...grpc.CallOption) (*CreateActivityInfoReply, error)
	ListActivityInfo(ctx context.Context, in *ListActivityInfoRequest, opts ...grpc.CallOption) (*ListActivityInfoReply, error)
	DeleteActivityInfo(ctx context.Context, in *DeleteActivityInfoRequest, opts ...grpc.CallOption) (*DeleteActivityInfoReply, error)
	GetActivityStatistic(ctx context.Context, in *GetActivityStatisticRequest, opts ...grpc.CallOption) (*GetActivityStatisticReply, error)
	CommitActivity(ctx context.Context, in *CommitActivityRequest, opts ...grpc.CallOption) (*CommitActivityReply, error)
	GetUsersAchievement(ctx context.Context, in *GetUsersAchievementRequest, opts ...grpc.CallOption) (*GetUsersAchievementReply, error)
}

type activityClient struct {
	cc grpc.ClientConnInterface
}

func NewActivityClient(cc grpc.ClientConnInterface) ActivityClient {
	return &activityClient{cc}
}

func (c *activityClient) CreateActivityInfo(ctx context.Context, in *CreateActivityInfoRequest, opts ...grpc.CallOption) (*CreateActivityInfoReply, error) {
	out := new(CreateActivityInfoReply)
	err := c.cc.Invoke(ctx, "/activity.Activity/CreateActivityInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) ListActivityInfo(ctx context.Context, in *ListActivityInfoRequest, opts ...grpc.CallOption) (*ListActivityInfoReply, error) {
	out := new(ListActivityInfoReply)
	err := c.cc.Invoke(ctx, "/activity.Activity/ListActivityInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) DeleteActivityInfo(ctx context.Context, in *DeleteActivityInfoRequest, opts ...grpc.CallOption) (*DeleteActivityInfoReply, error) {
	out := new(DeleteActivityInfoReply)
	err := c.cc.Invoke(ctx, "/activity.Activity/DeleteActivityInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) GetActivityStatistic(ctx context.Context, in *GetActivityStatisticRequest, opts ...grpc.CallOption) (*GetActivityStatisticReply, error) {
	out := new(GetActivityStatisticReply)
	err := c.cc.Invoke(ctx, "/activity.Activity/GetActivityStatistic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) CommitActivity(ctx context.Context, in *CommitActivityRequest, opts ...grpc.CallOption) (*CommitActivityReply, error) {
	out := new(CommitActivityReply)
	err := c.cc.Invoke(ctx, "/activity.Activity/CommitActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) GetUsersAchievement(ctx context.Context, in *GetUsersAchievementRequest, opts ...grpc.CallOption) (*GetUsersAchievementReply, error) {
	out := new(GetUsersAchievementReply)
	err := c.cc.Invoke(ctx, "/activity.Activity/GetUsersAchievement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActivityServer is the server API for Activity service.
// All implementations must embed UnimplementedActivityServer
// for forward compatibility
type ActivityServer interface {
	// for each user
	CreateActivityInfo(context.Context, *CreateActivityInfoRequest) (*CreateActivityInfoReply, error)
	ListActivityInfo(context.Context, *ListActivityInfoRequest) (*ListActivityInfoReply, error)
	DeleteActivityInfo(context.Context, *DeleteActivityInfoRequest) (*DeleteActivityInfoReply, error)
	GetActivityStatistic(context.Context, *GetActivityStatisticRequest) (*GetActivityStatisticReply, error)
	CommitActivity(context.Context, *CommitActivityRequest) (*CommitActivityReply, error)
	GetUsersAchievement(context.Context, *GetUsersAchievementRequest) (*GetUsersAchievementReply, error)
	mustEmbedUnimplementedActivityServer()
}

// UnimplementedActivityServer must be embedded to have forward compatible implementations.
type UnimplementedActivityServer struct {
}

func (UnimplementedActivityServer) CreateActivityInfo(context.Context, *CreateActivityInfoRequest) (*CreateActivityInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateActivityInfo not implemented")
}
func (UnimplementedActivityServer) ListActivityInfo(context.Context, *ListActivityInfoRequest) (*ListActivityInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListActivityInfo not implemented")
}
func (UnimplementedActivityServer) DeleteActivityInfo(context.Context, *DeleteActivityInfoRequest) (*DeleteActivityInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteActivityInfo not implemented")
}
func (UnimplementedActivityServer) GetActivityStatistic(context.Context, *GetActivityStatisticRequest) (*GetActivityStatisticReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActivityStatistic not implemented")
}
func (UnimplementedActivityServer) CommitActivity(context.Context, *CommitActivityRequest) (*CommitActivityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitActivity not implemented")
}
func (UnimplementedActivityServer) GetUsersAchievement(context.Context, *GetUsersAchievementRequest) (*GetUsersAchievementReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersAchievement not implemented")
}
func (UnimplementedActivityServer) mustEmbedUnimplementedActivityServer() {}

// UnsafeActivityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActivityServer will
// result in compilation errors.
type UnsafeActivityServer interface {
	mustEmbedUnimplementedActivityServer()
}

func RegisterActivityServer(s grpc.ServiceRegistrar, srv ActivityServer) {
	s.RegisterService(&Activity_ServiceDesc, srv)
}

func _Activity_CreateActivityInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateActivityInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).CreateActivityInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.Activity/CreateActivityInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).CreateActivityInfo(ctx, req.(*CreateActivityInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_ListActivityInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListActivityInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).ListActivityInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.Activity/ListActivityInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).ListActivityInfo(ctx, req.(*ListActivityInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_DeleteActivityInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteActivityInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).DeleteActivityInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.Activity/DeleteActivityInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).DeleteActivityInfo(ctx, req.(*DeleteActivityInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_GetActivityStatistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActivityStatisticRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).GetActivityStatistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.Activity/GetActivityStatistic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).GetActivityStatistic(ctx, req.(*GetActivityStatisticRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_CommitActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).CommitActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.Activity/CommitActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).CommitActivity(ctx, req.(*CommitActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_GetUsersAchievement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersAchievementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).GetUsersAchievement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.Activity/GetUsersAchievement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).GetUsersAchievement(ctx, req.(*GetUsersAchievementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Activity_ServiceDesc is the grpc.ServiceDesc for Activity service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Activity_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "activity.Activity",
	HandlerType: (*ActivityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateActivityInfo",
			Handler:    _Activity_CreateActivityInfo_Handler,
		},
		{
			MethodName: "ListActivityInfo",
			Handler:    _Activity_ListActivityInfo_Handler,
		},
		{
			MethodName: "DeleteActivityInfo",
			Handler:    _Activity_DeleteActivityInfo_Handler,
		},
		{
			MethodName: "GetActivityStatistic",
			Handler:    _Activity_GetActivityStatistic_Handler,
		},
		{
			MethodName: "CommitActivity",
			Handler:    _Activity_CommitActivity_Handler,
		},
		{
			MethodName: "GetUsersAchievement",
			Handler:    _Activity_GetUsersAchievement_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/activity.proto",
}
