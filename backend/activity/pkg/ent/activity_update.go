// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	activity "github.com/manhrev/runtracking/backend/activity/pkg/api"
	"github.com/manhrev/runtracking/backend/activity/pkg/ent/predicate"

	entactivity "github.com/manhrev/runtracking/backend/activity/pkg/ent/activity"
)

// ActivityUpdate is the builder for updating Activity entities.
type ActivityUpdate struct {
	config
	hooks     []Hook
	mutation  *ActivityMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ActivityUpdate builder.
func (au *ActivityUpdate) Where(ps ...predicate.Activity) *ActivityUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetActivityName sets the "activity_name" field.
func (au *ActivityUpdate) SetActivityName(s string) *ActivityUpdate {
	au.mutation.SetActivityName(s)
	return au
}

// SetActivityNote sets the "activity_note" field.
func (au *ActivityUpdate) SetActivityNote(s string) *ActivityUpdate {
	au.mutation.SetActivityNote(s)
	return au
}

// SetUserID sets the "user_id" field.
func (au *ActivityUpdate) SetUserID(i int64) *ActivityUpdate {
	au.mutation.ResetUserID()
	au.mutation.SetUserID(i)
	return au
}

// AddUserID adds i to the "user_id" field.
func (au *ActivityUpdate) AddUserID(i int64) *ActivityUpdate {
	au.mutation.AddUserID(i)
	return au
}

// SetType sets the "type" field.
func (au *ActivityUpdate) SetType(u uint32) *ActivityUpdate {
	au.mutation.ResetType()
	au.mutation.SetType(u)
	return au
}

// SetNillableType sets the "type" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableType(u *uint32) *ActivityUpdate {
	if u != nil {
		au.SetType(*u)
	}
	return au
}

// AddType adds u to the "type" field.
func (au *ActivityUpdate) AddType(u int32) *ActivityUpdate {
	au.mutation.AddType(u)
	return au
}

// SetTotalDistance sets the "total_distance" field.
func (au *ActivityUpdate) SetTotalDistance(f float64) *ActivityUpdate {
	au.mutation.ResetTotalDistance()
	au.mutation.SetTotalDistance(f)
	return au
}

// AddTotalDistance adds f to the "total_distance" field.
func (au *ActivityUpdate) AddTotalDistance(f float64) *ActivityUpdate {
	au.mutation.AddTotalDistance(f)
	return au
}

// SetKcal sets the "kcal" field.
func (au *ActivityUpdate) SetKcal(f float32) *ActivityUpdate {
	au.mutation.ResetKcal()
	au.mutation.SetKcal(f)
	return au
}

// AddKcal adds f to the "kcal" field.
func (au *ActivityUpdate) AddKcal(f float32) *ActivityUpdate {
	au.mutation.AddKcal(f)
	return au
}

// SetStartTime sets the "start_time" field.
func (au *ActivityUpdate) SetStartTime(t time.Time) *ActivityUpdate {
	au.mutation.SetStartTime(t)
	return au
}

// SetEndTime sets the "end_time" field.
func (au *ActivityUpdate) SetEndTime(t time.Time) *ActivityUpdate {
	au.mutation.SetEndTime(t)
	return au
}

// SetDuration sets the "duration" field.
func (au *ActivityUpdate) SetDuration(u uint64) *ActivityUpdate {
	au.mutation.ResetDuration()
	au.mutation.SetDuration(u)
	return au
}

// AddDuration adds u to the "duration" field.
func (au *ActivityUpdate) AddDuration(u int64) *ActivityUpdate {
	au.mutation.AddDuration(u)
	return au
}

// SetRoute sets the "route" field.
func (au *ActivityUpdate) SetRoute(ap []*activity.TrackPoint) *ActivityUpdate {
	au.mutation.SetRoute(ap)
	return au
}

// AppendRoute appends ap to the "route" field.
func (au *ActivityUpdate) AppendRoute(ap []*activity.TrackPoint) *ActivityUpdate {
	au.mutation.AppendRoute(ap)
	return au
}

// SetCreatedAt sets the "created_at" field.
func (au *ActivityUpdate) SetCreatedAt(t time.Time) *ActivityUpdate {
	au.mutation.SetCreatedAt(t)
	return au
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableCreatedAt(t *time.Time) *ActivityUpdate {
	if t != nil {
		au.SetCreatedAt(*t)
	}
	return au
}

// Mutation returns the ActivityMutation object of the builder.
func (au *ActivityUpdate) Mutation() *ActivityMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *ActivityUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(au.hooks) == 0 {
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ActivityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			if au.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *ActivityUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *ActivityUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *ActivityUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (au *ActivityUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ActivityUpdate {
	au.modifiers = append(au.modifiers, modifiers...)
	return au
}

func (au *ActivityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   entactivity.Table,
			Columns: entactivity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: entactivity.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.ActivityName(); ok {
		_spec.SetField(entactivity.FieldActivityName, field.TypeString, value)
	}
	if value, ok := au.mutation.ActivityNote(); ok {
		_spec.SetField(entactivity.FieldActivityNote, field.TypeString, value)
	}
	if value, ok := au.mutation.UserID(); ok {
		_spec.SetField(entactivity.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := au.mutation.AddedUserID(); ok {
		_spec.AddField(entactivity.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := au.mutation.GetType(); ok {
		_spec.SetField(entactivity.FieldType, field.TypeUint32, value)
	}
	if value, ok := au.mutation.AddedType(); ok {
		_spec.AddField(entactivity.FieldType, field.TypeUint32, value)
	}
	if value, ok := au.mutation.TotalDistance(); ok {
		_spec.SetField(entactivity.FieldTotalDistance, field.TypeFloat64, value)
	}
	if value, ok := au.mutation.AddedTotalDistance(); ok {
		_spec.AddField(entactivity.FieldTotalDistance, field.TypeFloat64, value)
	}
	if value, ok := au.mutation.Kcal(); ok {
		_spec.SetField(entactivity.FieldKcal, field.TypeFloat32, value)
	}
	if value, ok := au.mutation.AddedKcal(); ok {
		_spec.AddField(entactivity.FieldKcal, field.TypeFloat32, value)
	}
	if value, ok := au.mutation.StartTime(); ok {
		_spec.SetField(entactivity.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := au.mutation.EndTime(); ok {
		_spec.SetField(entactivity.FieldEndTime, field.TypeTime, value)
	}
	if value, ok := au.mutation.Duration(); ok {
		_spec.SetField(entactivity.FieldDuration, field.TypeUint64, value)
	}
	if value, ok := au.mutation.AddedDuration(); ok {
		_spec.AddField(entactivity.FieldDuration, field.TypeUint64, value)
	}
	if value, ok := au.mutation.Route(); ok {
		_spec.SetField(entactivity.FieldRoute, field.TypeJSON, value)
	}
	if value, ok := au.mutation.AppendedRoute(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, entactivity.FieldRoute, value)
		})
	}
	if value, ok := au.mutation.CreatedAt(); ok {
		_spec.SetField(entactivity.FieldCreatedAt, field.TypeTime, value)
	}
	_spec.AddModifiers(au.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entactivity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ActivityUpdateOne is the builder for updating a single Activity entity.
type ActivityUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ActivityMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetActivityName sets the "activity_name" field.
func (auo *ActivityUpdateOne) SetActivityName(s string) *ActivityUpdateOne {
	auo.mutation.SetActivityName(s)
	return auo
}

// SetActivityNote sets the "activity_note" field.
func (auo *ActivityUpdateOne) SetActivityNote(s string) *ActivityUpdateOne {
	auo.mutation.SetActivityNote(s)
	return auo
}

// SetUserID sets the "user_id" field.
func (auo *ActivityUpdateOne) SetUserID(i int64) *ActivityUpdateOne {
	auo.mutation.ResetUserID()
	auo.mutation.SetUserID(i)
	return auo
}

// AddUserID adds i to the "user_id" field.
func (auo *ActivityUpdateOne) AddUserID(i int64) *ActivityUpdateOne {
	auo.mutation.AddUserID(i)
	return auo
}

// SetType sets the "type" field.
func (auo *ActivityUpdateOne) SetType(u uint32) *ActivityUpdateOne {
	auo.mutation.ResetType()
	auo.mutation.SetType(u)
	return auo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableType(u *uint32) *ActivityUpdateOne {
	if u != nil {
		auo.SetType(*u)
	}
	return auo
}

// AddType adds u to the "type" field.
func (auo *ActivityUpdateOne) AddType(u int32) *ActivityUpdateOne {
	auo.mutation.AddType(u)
	return auo
}

// SetTotalDistance sets the "total_distance" field.
func (auo *ActivityUpdateOne) SetTotalDistance(f float64) *ActivityUpdateOne {
	auo.mutation.ResetTotalDistance()
	auo.mutation.SetTotalDistance(f)
	return auo
}

// AddTotalDistance adds f to the "total_distance" field.
func (auo *ActivityUpdateOne) AddTotalDistance(f float64) *ActivityUpdateOne {
	auo.mutation.AddTotalDistance(f)
	return auo
}

// SetKcal sets the "kcal" field.
func (auo *ActivityUpdateOne) SetKcal(f float32) *ActivityUpdateOne {
	auo.mutation.ResetKcal()
	auo.mutation.SetKcal(f)
	return auo
}

// AddKcal adds f to the "kcal" field.
func (auo *ActivityUpdateOne) AddKcal(f float32) *ActivityUpdateOne {
	auo.mutation.AddKcal(f)
	return auo
}

// SetStartTime sets the "start_time" field.
func (auo *ActivityUpdateOne) SetStartTime(t time.Time) *ActivityUpdateOne {
	auo.mutation.SetStartTime(t)
	return auo
}

// SetEndTime sets the "end_time" field.
func (auo *ActivityUpdateOne) SetEndTime(t time.Time) *ActivityUpdateOne {
	auo.mutation.SetEndTime(t)
	return auo
}

// SetDuration sets the "duration" field.
func (auo *ActivityUpdateOne) SetDuration(u uint64) *ActivityUpdateOne {
	auo.mutation.ResetDuration()
	auo.mutation.SetDuration(u)
	return auo
}

// AddDuration adds u to the "duration" field.
func (auo *ActivityUpdateOne) AddDuration(u int64) *ActivityUpdateOne {
	auo.mutation.AddDuration(u)
	return auo
}

// SetRoute sets the "route" field.
func (auo *ActivityUpdateOne) SetRoute(ap []*activity.TrackPoint) *ActivityUpdateOne {
	auo.mutation.SetRoute(ap)
	return auo
}

// AppendRoute appends ap to the "route" field.
func (auo *ActivityUpdateOne) AppendRoute(ap []*activity.TrackPoint) *ActivityUpdateOne {
	auo.mutation.AppendRoute(ap)
	return auo
}

// SetCreatedAt sets the "created_at" field.
func (auo *ActivityUpdateOne) SetCreatedAt(t time.Time) *ActivityUpdateOne {
	auo.mutation.SetCreatedAt(t)
	return auo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableCreatedAt(t *time.Time) *ActivityUpdateOne {
	if t != nil {
		auo.SetCreatedAt(*t)
	}
	return auo
}

// Mutation returns the ActivityMutation object of the builder.
func (auo *ActivityUpdateOne) Mutation() *ActivityMutation {
	return auo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *ActivityUpdateOne) Select(field string, fields ...string) *ActivityUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Activity entity.
func (auo *ActivityUpdateOne) Save(ctx context.Context) (*Activity, error) {
	var (
		err  error
		node *Activity
	)
	if len(auo.hooks) == 0 {
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ActivityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			if auo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = auo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, auo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Activity)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ActivityMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *ActivityUpdateOne) SaveX(ctx context.Context) *Activity {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *ActivityUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *ActivityUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (auo *ActivityUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ActivityUpdateOne {
	auo.modifiers = append(auo.modifiers, modifiers...)
	return auo
}

func (auo *ActivityUpdateOne) sqlSave(ctx context.Context) (_node *Activity, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   entactivity.Table,
			Columns: entactivity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: entactivity.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Activity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, entactivity.FieldID)
		for _, f := range fields {
			if !entactivity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != entactivity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.ActivityName(); ok {
		_spec.SetField(entactivity.FieldActivityName, field.TypeString, value)
	}
	if value, ok := auo.mutation.ActivityNote(); ok {
		_spec.SetField(entactivity.FieldActivityNote, field.TypeString, value)
	}
	if value, ok := auo.mutation.UserID(); ok {
		_spec.SetField(entactivity.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := auo.mutation.AddedUserID(); ok {
		_spec.AddField(entactivity.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := auo.mutation.GetType(); ok {
		_spec.SetField(entactivity.FieldType, field.TypeUint32, value)
	}
	if value, ok := auo.mutation.AddedType(); ok {
		_spec.AddField(entactivity.FieldType, field.TypeUint32, value)
	}
	if value, ok := auo.mutation.TotalDistance(); ok {
		_spec.SetField(entactivity.FieldTotalDistance, field.TypeFloat64, value)
	}
	if value, ok := auo.mutation.AddedTotalDistance(); ok {
		_spec.AddField(entactivity.FieldTotalDistance, field.TypeFloat64, value)
	}
	if value, ok := auo.mutation.Kcal(); ok {
		_spec.SetField(entactivity.FieldKcal, field.TypeFloat32, value)
	}
	if value, ok := auo.mutation.AddedKcal(); ok {
		_spec.AddField(entactivity.FieldKcal, field.TypeFloat32, value)
	}
	if value, ok := auo.mutation.StartTime(); ok {
		_spec.SetField(entactivity.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := auo.mutation.EndTime(); ok {
		_spec.SetField(entactivity.FieldEndTime, field.TypeTime, value)
	}
	if value, ok := auo.mutation.Duration(); ok {
		_spec.SetField(entactivity.FieldDuration, field.TypeUint64, value)
	}
	if value, ok := auo.mutation.AddedDuration(); ok {
		_spec.AddField(entactivity.FieldDuration, field.TypeUint64, value)
	}
	if value, ok := auo.mutation.Route(); ok {
		_spec.SetField(entactivity.FieldRoute, field.TypeJSON, value)
	}
	if value, ok := auo.mutation.AppendedRoute(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, entactivity.FieldRoute, value)
		})
	}
	if value, ok := auo.mutation.CreatedAt(); ok {
		_spec.SetField(entactivity.FieldCreatedAt, field.TypeTime, value)
	}
	_spec.AddModifiers(auo.modifiers...)
	_node = &Activity{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entactivity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
