// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	activity "github.com/manhrev/runtracking/backend/activity/pkg/api"
	entactivity "github.com/manhrev/runtracking/backend/activity/pkg/ent/activity"
	"github.com/manhrev/runtracking/backend/activity/pkg/ent/predicate"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeActivity = "Activity"
)

// ActivityMutation represents an operation that mutates the Activity nodes in the graph.
type ActivityMutation struct {
	config
	op                Op
	typ               string
	id                *int64
	activity_name     *string
	activity_note     *string
	user_id           *int64
	adduser_id        *int64
	_type             *uint32
	add_type          *int32
	total_distance    *float64
	addtotal_distance *float64
	kcal              *float32
	addkcal           *float32
	start_time        *time.Time
	duration          *uint64
	addduration       *int64
	end_time          *time.Time
	route             *[]*activity.TrackPoint
	appendroute       []*activity.TrackPoint
	plan_id           *int64
	addplan_id        *int64
	challenge_id      *int64
	addchallenge_id   *int64
	event_id          *int64
	addevent_id       *int64
	created_at        *time.Time
	clearedFields     map[string]struct{}
	done              bool
	oldValue          func(context.Context) (*Activity, error)
	predicates        []predicate.Activity
}

var _ ent.Mutation = (*ActivityMutation)(nil)

// activityOption allows management of the mutation configuration using functional options.
type activityOption func(*ActivityMutation)

// newActivityMutation creates new mutation for the Activity entity.
func newActivityMutation(c config, op Op, opts ...activityOption) *ActivityMutation {
	m := &ActivityMutation{
		config:        c,
		op:            op,
		typ:           TypeActivity,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withActivityID sets the ID field of the mutation.
func withActivityID(id int64) activityOption {
	return func(m *ActivityMutation) {
		var (
			err   error
			once  sync.Once
			value *Activity
		)
		m.oldValue = func(ctx context.Context) (*Activity, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Activity.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withActivity sets the old Activity of the mutation.
func withActivity(node *Activity) activityOption {
	return func(m *ActivityMutation) {
		m.oldValue = func(context.Context) (*Activity, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ActivityMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ActivityMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Activity entities.
func (m *ActivityMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ActivityMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ActivityMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Activity.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetActivityName sets the "activity_name" field.
func (m *ActivityMutation) SetActivityName(s string) {
	m.activity_name = &s
}

// ActivityName returns the value of the "activity_name" field in the mutation.
func (m *ActivityMutation) ActivityName() (r string, exists bool) {
	v := m.activity_name
	if v == nil {
		return
	}
	return *v, true
}

// OldActivityName returns the old "activity_name" field's value of the Activity entity.
// If the Activity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivityMutation) OldActivityName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActivityName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActivityName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActivityName: %w", err)
	}
	return oldValue.ActivityName, nil
}

// ResetActivityName resets all changes to the "activity_name" field.
func (m *ActivityMutation) ResetActivityName() {
	m.activity_name = nil
}

// SetActivityNote sets the "activity_note" field.
func (m *ActivityMutation) SetActivityNote(s string) {
	m.activity_note = &s
}

// ActivityNote returns the value of the "activity_note" field in the mutation.
func (m *ActivityMutation) ActivityNote() (r string, exists bool) {
	v := m.activity_note
	if v == nil {
		return
	}
	return *v, true
}

// OldActivityNote returns the old "activity_note" field's value of the Activity entity.
// If the Activity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivityMutation) OldActivityNote(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActivityNote is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActivityNote requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActivityNote: %w", err)
	}
	return oldValue.ActivityNote, nil
}

// ResetActivityNote resets all changes to the "activity_note" field.
func (m *ActivityMutation) ResetActivityNote() {
	m.activity_note = nil
}

// SetUserID sets the "user_id" field.
func (m *ActivityMutation) SetUserID(i int64) {
	m.user_id = &i
	m.adduser_id = nil
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *ActivityMutation) UserID() (r int64, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Activity entity.
// If the Activity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivityMutation) OldUserID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// AddUserID adds i to the "user_id" field.
func (m *ActivityMutation) AddUserID(i int64) {
	if m.adduser_id != nil {
		*m.adduser_id += i
	} else {
		m.adduser_id = &i
	}
}

// AddedUserID returns the value that was added to the "user_id" field in this mutation.
func (m *ActivityMutation) AddedUserID() (r int64, exists bool) {
	v := m.adduser_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *ActivityMutation) ResetUserID() {
	m.user_id = nil
	m.adduser_id = nil
}

// SetType sets the "type" field.
func (m *ActivityMutation) SetType(u uint32) {
	m._type = &u
	m.add_type = nil
}

// GetType returns the value of the "type" field in the mutation.
func (m *ActivityMutation) GetType() (r uint32, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Activity entity.
// If the Activity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivityMutation) OldType(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// AddType adds u to the "type" field.
func (m *ActivityMutation) AddType(u int32) {
	if m.add_type != nil {
		*m.add_type += u
	} else {
		m.add_type = &u
	}
}

// AddedType returns the value that was added to the "type" field in this mutation.
func (m *ActivityMutation) AddedType() (r int32, exists bool) {
	v := m.add_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetType resets all changes to the "type" field.
func (m *ActivityMutation) ResetType() {
	m._type = nil
	m.add_type = nil
}

// SetTotalDistance sets the "total_distance" field.
func (m *ActivityMutation) SetTotalDistance(f float64) {
	m.total_distance = &f
	m.addtotal_distance = nil
}

// TotalDistance returns the value of the "total_distance" field in the mutation.
func (m *ActivityMutation) TotalDistance() (r float64, exists bool) {
	v := m.total_distance
	if v == nil {
		return
	}
	return *v, true
}

// OldTotalDistance returns the old "total_distance" field's value of the Activity entity.
// If the Activity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivityMutation) OldTotalDistance(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTotalDistance is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTotalDistance requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTotalDistance: %w", err)
	}
	return oldValue.TotalDistance, nil
}

// AddTotalDistance adds f to the "total_distance" field.
func (m *ActivityMutation) AddTotalDistance(f float64) {
	if m.addtotal_distance != nil {
		*m.addtotal_distance += f
	} else {
		m.addtotal_distance = &f
	}
}

// AddedTotalDistance returns the value that was added to the "total_distance" field in this mutation.
func (m *ActivityMutation) AddedTotalDistance() (r float64, exists bool) {
	v := m.addtotal_distance
	if v == nil {
		return
	}
	return *v, true
}

// ResetTotalDistance resets all changes to the "total_distance" field.
func (m *ActivityMutation) ResetTotalDistance() {
	m.total_distance = nil
	m.addtotal_distance = nil
}

// SetKcal sets the "kcal" field.
func (m *ActivityMutation) SetKcal(f float32) {
	m.kcal = &f
	m.addkcal = nil
}

// Kcal returns the value of the "kcal" field in the mutation.
func (m *ActivityMutation) Kcal() (r float32, exists bool) {
	v := m.kcal
	if v == nil {
		return
	}
	return *v, true
}

// OldKcal returns the old "kcal" field's value of the Activity entity.
// If the Activity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivityMutation) OldKcal(ctx context.Context) (v float32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKcal is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKcal requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKcal: %w", err)
	}
	return oldValue.Kcal, nil
}

// AddKcal adds f to the "kcal" field.
func (m *ActivityMutation) AddKcal(f float32) {
	if m.addkcal != nil {
		*m.addkcal += f
	} else {
		m.addkcal = &f
	}
}

// AddedKcal returns the value that was added to the "kcal" field in this mutation.
func (m *ActivityMutation) AddedKcal() (r float32, exists bool) {
	v := m.addkcal
	if v == nil {
		return
	}
	return *v, true
}

// ResetKcal resets all changes to the "kcal" field.
func (m *ActivityMutation) ResetKcal() {
	m.kcal = nil
	m.addkcal = nil
}

// SetStartTime sets the "start_time" field.
func (m *ActivityMutation) SetStartTime(t time.Time) {
	m.start_time = &t
}

// StartTime returns the value of the "start_time" field in the mutation.
func (m *ActivityMutation) StartTime() (r time.Time, exists bool) {
	v := m.start_time
	if v == nil {
		return
	}
	return *v, true
}

// OldStartTime returns the old "start_time" field's value of the Activity entity.
// If the Activity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivityMutation) OldStartTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartTime: %w", err)
	}
	return oldValue.StartTime, nil
}

// ResetStartTime resets all changes to the "start_time" field.
func (m *ActivityMutation) ResetStartTime() {
	m.start_time = nil
}

// SetDuration sets the "duration" field.
func (m *ActivityMutation) SetDuration(u uint64) {
	m.duration = &u
	m.addduration = nil
}

// Duration returns the value of the "duration" field in the mutation.
func (m *ActivityMutation) Duration() (r uint64, exists bool) {
	v := m.duration
	if v == nil {
		return
	}
	return *v, true
}

// OldDuration returns the old "duration" field's value of the Activity entity.
// If the Activity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivityMutation) OldDuration(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDuration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDuration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDuration: %w", err)
	}
	return oldValue.Duration, nil
}

// AddDuration adds u to the "duration" field.
func (m *ActivityMutation) AddDuration(u int64) {
	if m.addduration != nil {
		*m.addduration += u
	} else {
		m.addduration = &u
	}
}

// AddedDuration returns the value that was added to the "duration" field in this mutation.
func (m *ActivityMutation) AddedDuration() (r int64, exists bool) {
	v := m.addduration
	if v == nil {
		return
	}
	return *v, true
}

// ResetDuration resets all changes to the "duration" field.
func (m *ActivityMutation) ResetDuration() {
	m.duration = nil
	m.addduration = nil
}

// SetEndTime sets the "end_time" field.
func (m *ActivityMutation) SetEndTime(t time.Time) {
	m.end_time = &t
}

// EndTime returns the value of the "end_time" field in the mutation.
func (m *ActivityMutation) EndTime() (r time.Time, exists bool) {
	v := m.end_time
	if v == nil {
		return
	}
	return *v, true
}

// OldEndTime returns the old "end_time" field's value of the Activity entity.
// If the Activity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivityMutation) OldEndTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndTime: %w", err)
	}
	return oldValue.EndTime, nil
}

// ResetEndTime resets all changes to the "end_time" field.
func (m *ActivityMutation) ResetEndTime() {
	m.end_time = nil
}

// SetRoute sets the "route" field.
func (m *ActivityMutation) SetRoute(ap []*activity.TrackPoint) {
	m.route = &ap
	m.appendroute = nil
}

// Route returns the value of the "route" field in the mutation.
func (m *ActivityMutation) Route() (r []*activity.TrackPoint, exists bool) {
	v := m.route
	if v == nil {
		return
	}
	return *v, true
}

// OldRoute returns the old "route" field's value of the Activity entity.
// If the Activity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivityMutation) OldRoute(ctx context.Context) (v []*activity.TrackPoint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRoute is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRoute requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoute: %w", err)
	}
	return oldValue.Route, nil
}

// AppendRoute adds ap to the "route" field.
func (m *ActivityMutation) AppendRoute(ap []*activity.TrackPoint) {
	m.appendroute = append(m.appendroute, ap...)
}

// AppendedRoute returns the list of values that were appended to the "route" field in this mutation.
func (m *ActivityMutation) AppendedRoute() ([]*activity.TrackPoint, bool) {
	if len(m.appendroute) == 0 {
		return nil, false
	}
	return m.appendroute, true
}

// ResetRoute resets all changes to the "route" field.
func (m *ActivityMutation) ResetRoute() {
	m.route = nil
	m.appendroute = nil
}

// SetPlanID sets the "plan_id" field.
func (m *ActivityMutation) SetPlanID(i int64) {
	m.plan_id = &i
	m.addplan_id = nil
}

// PlanID returns the value of the "plan_id" field in the mutation.
func (m *ActivityMutation) PlanID() (r int64, exists bool) {
	v := m.plan_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPlanID returns the old "plan_id" field's value of the Activity entity.
// If the Activity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivityMutation) OldPlanID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlanID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlanID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlanID: %w", err)
	}
	return oldValue.PlanID, nil
}

// AddPlanID adds i to the "plan_id" field.
func (m *ActivityMutation) AddPlanID(i int64) {
	if m.addplan_id != nil {
		*m.addplan_id += i
	} else {
		m.addplan_id = &i
	}
}

// AddedPlanID returns the value that was added to the "plan_id" field in this mutation.
func (m *ActivityMutation) AddedPlanID() (r int64, exists bool) {
	v := m.addplan_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearPlanID clears the value of the "plan_id" field.
func (m *ActivityMutation) ClearPlanID() {
	m.plan_id = nil
	m.addplan_id = nil
	m.clearedFields[entactivity.FieldPlanID] = struct{}{}
}

// PlanIDCleared returns if the "plan_id" field was cleared in this mutation.
func (m *ActivityMutation) PlanIDCleared() bool {
	_, ok := m.clearedFields[entactivity.FieldPlanID]
	return ok
}

// ResetPlanID resets all changes to the "plan_id" field.
func (m *ActivityMutation) ResetPlanID() {
	m.plan_id = nil
	m.addplan_id = nil
	delete(m.clearedFields, entactivity.FieldPlanID)
}

// SetChallengeID sets the "challenge_id" field.
func (m *ActivityMutation) SetChallengeID(i int64) {
	m.challenge_id = &i
	m.addchallenge_id = nil
}

// ChallengeID returns the value of the "challenge_id" field in the mutation.
func (m *ActivityMutation) ChallengeID() (r int64, exists bool) {
	v := m.challenge_id
	if v == nil {
		return
	}
	return *v, true
}

// OldChallengeID returns the old "challenge_id" field's value of the Activity entity.
// If the Activity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivityMutation) OldChallengeID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChallengeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChallengeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChallengeID: %w", err)
	}
	return oldValue.ChallengeID, nil
}

// AddChallengeID adds i to the "challenge_id" field.
func (m *ActivityMutation) AddChallengeID(i int64) {
	if m.addchallenge_id != nil {
		*m.addchallenge_id += i
	} else {
		m.addchallenge_id = &i
	}
}

// AddedChallengeID returns the value that was added to the "challenge_id" field in this mutation.
func (m *ActivityMutation) AddedChallengeID() (r int64, exists bool) {
	v := m.addchallenge_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearChallengeID clears the value of the "challenge_id" field.
func (m *ActivityMutation) ClearChallengeID() {
	m.challenge_id = nil
	m.addchallenge_id = nil
	m.clearedFields[entactivity.FieldChallengeID] = struct{}{}
}

// ChallengeIDCleared returns if the "challenge_id" field was cleared in this mutation.
func (m *ActivityMutation) ChallengeIDCleared() bool {
	_, ok := m.clearedFields[entactivity.FieldChallengeID]
	return ok
}

// ResetChallengeID resets all changes to the "challenge_id" field.
func (m *ActivityMutation) ResetChallengeID() {
	m.challenge_id = nil
	m.addchallenge_id = nil
	delete(m.clearedFields, entactivity.FieldChallengeID)
}

// SetEventID sets the "event_id" field.
func (m *ActivityMutation) SetEventID(i int64) {
	m.event_id = &i
	m.addevent_id = nil
}

// EventID returns the value of the "event_id" field in the mutation.
func (m *ActivityMutation) EventID() (r int64, exists bool) {
	v := m.event_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEventID returns the old "event_id" field's value of the Activity entity.
// If the Activity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivityMutation) OldEventID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEventID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEventID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEventID: %w", err)
	}
	return oldValue.EventID, nil
}

// AddEventID adds i to the "event_id" field.
func (m *ActivityMutation) AddEventID(i int64) {
	if m.addevent_id != nil {
		*m.addevent_id += i
	} else {
		m.addevent_id = &i
	}
}

// AddedEventID returns the value that was added to the "event_id" field in this mutation.
func (m *ActivityMutation) AddedEventID() (r int64, exists bool) {
	v := m.addevent_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearEventID clears the value of the "event_id" field.
func (m *ActivityMutation) ClearEventID() {
	m.event_id = nil
	m.addevent_id = nil
	m.clearedFields[entactivity.FieldEventID] = struct{}{}
}

// EventIDCleared returns if the "event_id" field was cleared in this mutation.
func (m *ActivityMutation) EventIDCleared() bool {
	_, ok := m.clearedFields[entactivity.FieldEventID]
	return ok
}

// ResetEventID resets all changes to the "event_id" field.
func (m *ActivityMutation) ResetEventID() {
	m.event_id = nil
	m.addevent_id = nil
	delete(m.clearedFields, entactivity.FieldEventID)
}

// SetCreatedAt sets the "created_at" field.
func (m *ActivityMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ActivityMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Activity entity.
// If the Activity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivityMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ActivityMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Where appends a list predicates to the ActivityMutation builder.
func (m *ActivityMutation) Where(ps ...predicate.Activity) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ActivityMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Activity).
func (m *ActivityMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ActivityMutation) Fields() []string {
	fields := make([]string, 0, 14)
	if m.activity_name != nil {
		fields = append(fields, entactivity.FieldActivityName)
	}
	if m.activity_note != nil {
		fields = append(fields, entactivity.FieldActivityNote)
	}
	if m.user_id != nil {
		fields = append(fields, entactivity.FieldUserID)
	}
	if m._type != nil {
		fields = append(fields, entactivity.FieldType)
	}
	if m.total_distance != nil {
		fields = append(fields, entactivity.FieldTotalDistance)
	}
	if m.kcal != nil {
		fields = append(fields, entactivity.FieldKcal)
	}
	if m.start_time != nil {
		fields = append(fields, entactivity.FieldStartTime)
	}
	if m.duration != nil {
		fields = append(fields, entactivity.FieldDuration)
	}
	if m.end_time != nil {
		fields = append(fields, entactivity.FieldEndTime)
	}
	if m.route != nil {
		fields = append(fields, entactivity.FieldRoute)
	}
	if m.plan_id != nil {
		fields = append(fields, entactivity.FieldPlanID)
	}
	if m.challenge_id != nil {
		fields = append(fields, entactivity.FieldChallengeID)
	}
	if m.event_id != nil {
		fields = append(fields, entactivity.FieldEventID)
	}
	if m.created_at != nil {
		fields = append(fields, entactivity.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ActivityMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case entactivity.FieldActivityName:
		return m.ActivityName()
	case entactivity.FieldActivityNote:
		return m.ActivityNote()
	case entactivity.FieldUserID:
		return m.UserID()
	case entactivity.FieldType:
		return m.GetType()
	case entactivity.FieldTotalDistance:
		return m.TotalDistance()
	case entactivity.FieldKcal:
		return m.Kcal()
	case entactivity.FieldStartTime:
		return m.StartTime()
	case entactivity.FieldDuration:
		return m.Duration()
	case entactivity.FieldEndTime:
		return m.EndTime()
	case entactivity.FieldRoute:
		return m.Route()
	case entactivity.FieldPlanID:
		return m.PlanID()
	case entactivity.FieldChallengeID:
		return m.ChallengeID()
	case entactivity.FieldEventID:
		return m.EventID()
	case entactivity.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ActivityMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case entactivity.FieldActivityName:
		return m.OldActivityName(ctx)
	case entactivity.FieldActivityNote:
		return m.OldActivityNote(ctx)
	case entactivity.FieldUserID:
		return m.OldUserID(ctx)
	case entactivity.FieldType:
		return m.OldType(ctx)
	case entactivity.FieldTotalDistance:
		return m.OldTotalDistance(ctx)
	case entactivity.FieldKcal:
		return m.OldKcal(ctx)
	case entactivity.FieldStartTime:
		return m.OldStartTime(ctx)
	case entactivity.FieldDuration:
		return m.OldDuration(ctx)
	case entactivity.FieldEndTime:
		return m.OldEndTime(ctx)
	case entactivity.FieldRoute:
		return m.OldRoute(ctx)
	case entactivity.FieldPlanID:
		return m.OldPlanID(ctx)
	case entactivity.FieldChallengeID:
		return m.OldChallengeID(ctx)
	case entactivity.FieldEventID:
		return m.OldEventID(ctx)
	case entactivity.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Activity field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ActivityMutation) SetField(name string, value ent.Value) error {
	switch name {
	case entactivity.FieldActivityName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActivityName(v)
		return nil
	case entactivity.FieldActivityNote:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActivityNote(v)
		return nil
	case entactivity.FieldUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case entactivity.FieldType:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case entactivity.FieldTotalDistance:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTotalDistance(v)
		return nil
	case entactivity.FieldKcal:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKcal(v)
		return nil
	case entactivity.FieldStartTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartTime(v)
		return nil
	case entactivity.FieldDuration:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDuration(v)
		return nil
	case entactivity.FieldEndTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndTime(v)
		return nil
	case entactivity.FieldRoute:
		v, ok := value.([]*activity.TrackPoint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoute(v)
		return nil
	case entactivity.FieldPlanID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlanID(v)
		return nil
	case entactivity.FieldChallengeID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChallengeID(v)
		return nil
	case entactivity.FieldEventID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEventID(v)
		return nil
	case entactivity.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Activity field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ActivityMutation) AddedFields() []string {
	var fields []string
	if m.adduser_id != nil {
		fields = append(fields, entactivity.FieldUserID)
	}
	if m.add_type != nil {
		fields = append(fields, entactivity.FieldType)
	}
	if m.addtotal_distance != nil {
		fields = append(fields, entactivity.FieldTotalDistance)
	}
	if m.addkcal != nil {
		fields = append(fields, entactivity.FieldKcal)
	}
	if m.addduration != nil {
		fields = append(fields, entactivity.FieldDuration)
	}
	if m.addplan_id != nil {
		fields = append(fields, entactivity.FieldPlanID)
	}
	if m.addchallenge_id != nil {
		fields = append(fields, entactivity.FieldChallengeID)
	}
	if m.addevent_id != nil {
		fields = append(fields, entactivity.FieldEventID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ActivityMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case entactivity.FieldUserID:
		return m.AddedUserID()
	case entactivity.FieldType:
		return m.AddedType()
	case entactivity.FieldTotalDistance:
		return m.AddedTotalDistance()
	case entactivity.FieldKcal:
		return m.AddedKcal()
	case entactivity.FieldDuration:
		return m.AddedDuration()
	case entactivity.FieldPlanID:
		return m.AddedPlanID()
	case entactivity.FieldChallengeID:
		return m.AddedChallengeID()
	case entactivity.FieldEventID:
		return m.AddedEventID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ActivityMutation) AddField(name string, value ent.Value) error {
	switch name {
	case entactivity.FieldUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserID(v)
		return nil
	case entactivity.FieldType:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddType(v)
		return nil
	case entactivity.FieldTotalDistance:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTotalDistance(v)
		return nil
	case entactivity.FieldKcal:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddKcal(v)
		return nil
	case entactivity.FieldDuration:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDuration(v)
		return nil
	case entactivity.FieldPlanID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPlanID(v)
		return nil
	case entactivity.FieldChallengeID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddChallengeID(v)
		return nil
	case entactivity.FieldEventID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEventID(v)
		return nil
	}
	return fmt.Errorf("unknown Activity numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ActivityMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(entactivity.FieldPlanID) {
		fields = append(fields, entactivity.FieldPlanID)
	}
	if m.FieldCleared(entactivity.FieldChallengeID) {
		fields = append(fields, entactivity.FieldChallengeID)
	}
	if m.FieldCleared(entactivity.FieldEventID) {
		fields = append(fields, entactivity.FieldEventID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ActivityMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ActivityMutation) ClearField(name string) error {
	switch name {
	case entactivity.FieldPlanID:
		m.ClearPlanID()
		return nil
	case entactivity.FieldChallengeID:
		m.ClearChallengeID()
		return nil
	case entactivity.FieldEventID:
		m.ClearEventID()
		return nil
	}
	return fmt.Errorf("unknown Activity nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ActivityMutation) ResetField(name string) error {
	switch name {
	case entactivity.FieldActivityName:
		m.ResetActivityName()
		return nil
	case entactivity.FieldActivityNote:
		m.ResetActivityNote()
		return nil
	case entactivity.FieldUserID:
		m.ResetUserID()
		return nil
	case entactivity.FieldType:
		m.ResetType()
		return nil
	case entactivity.FieldTotalDistance:
		m.ResetTotalDistance()
		return nil
	case entactivity.FieldKcal:
		m.ResetKcal()
		return nil
	case entactivity.FieldStartTime:
		m.ResetStartTime()
		return nil
	case entactivity.FieldDuration:
		m.ResetDuration()
		return nil
	case entactivity.FieldEndTime:
		m.ResetEndTime()
		return nil
	case entactivity.FieldRoute:
		m.ResetRoute()
		return nil
	case entactivity.FieldPlanID:
		m.ResetPlanID()
		return nil
	case entactivity.FieldChallengeID:
		m.ResetChallengeID()
		return nil
	case entactivity.FieldEventID:
		m.ResetEventID()
		return nil
	case entactivity.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Activity field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ActivityMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ActivityMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ActivityMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ActivityMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ActivityMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ActivityMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ActivityMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Activity unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ActivityMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Activity edge %s", name)
}
