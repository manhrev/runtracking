syntax = "proto3";

package activity;

option go_package = "github.com/manhrev/runtracking/backend/activity/pkg/api;activity";

import "google/protobuf/timestamp.proto";

service Activity {
    // for each user
    rpc CreateActivityInfo(CreateActivityInfoRequest) returns (CreateActivityInfoReply);
    rpc ListActivityInfo(ListActivityInfoRequest) returns (ListActivityInfoReply);
    rpc DeleteActivityInfo(DeleteActivityInfoRequest) returns (DeleteActivityInfoReply);
    rpc GetActivityStatistic(GetActivityStatisticRequest) returns (GetActivityStatisticReply);
    rpc CommitActivity(CommitActivityRequest) returns (CommitActivityReply);

    rpc GetUsersAchievement(GetUsersAchievementRequest) returns (GetUsersAchievementReply);
}

enum ActivityType {
    ACTIVITY_TYPE_UNSPECIFIED = 0;
    ACTIVITY_TYPE_RUNNING = 1;
    ACTIVITY_TYPE_CYCLING = 2;
    ACTIVITY_TYPE_WALKING = 3;
}

message TrackPoint {
    double longtitude = 1;
    double latitude = 2;
    double altitude = 3;
    google.protobuf.Timestamp created_at = 4;
    bool is_stop_point = 5;
}

message ActivityInfo {
    int64 id = 11;
    ActivityType type = 1;
    double total_distance = 2; // meters
    float kcal = 3; // kcal
    google.protobuf.Timestamp start_time = 4;
    google.protobuf.Timestamp end_time = 6;
    uint64 duration = 7; // seconds
    repeated TrackPoint route = 8;
    string activity_name = 9;
    string activity_note = 10;
    CommitType commit_type = 12;
    int64 commit_id = 13;
}

message CreateActivityInfoRequest {
    ActivityInfo activity_info = 1;
}

message CreateActivityInfoReply {
    int64 id_created = 1;
}

message ListActivityInfoRequest {
    uint32 limit = 1;
    uint64 offset = 2;
    bool ascending = 3;
    ActivitySortBy sort_by = 4;
    ActivityType activity_type = 5; // only get activity with this type, to get all, pass ACTIVITY_TYPE_UNSPECIFIED
    google.protobuf.Timestamp from = 6;
    google.protobuf.Timestamp to = 7;
}

message ListActivityInfoReply {
    repeated ActivityInfo activity_list = 1;
    int64 total = 2;
}

enum ActivitySortBy {
    ACTIVITY_SORT_BY_UNSPECIFIED = 0;
    ACTIVITY_SORT_BY_END_TIME = 1; // Same as Date created
    ACTIVITY_SORT_BY_TOTAL_DISTANCE = 2;
    ACTIVITY_SORT_BY_ENERGY = 3;
    ACTIVITY_SORT_BY_DURATION = 4;
}

message DeleteActivityInfoRequest { //check if user owns this activity before delete
    repeated int64 ids_to_delete = 1;
}

message DeleteActivityInfoReply {}

message GetActivityStatisticRequest{
    ActivityType type = 5;
    google.protobuf.Timestamp from = 1; // from day a
    google.protobuf.Timestamp to = 2;   // to day b
    GroupBy group_by = 4;
    uint32 tz = 6; // timezone

    enum GroupBy {
        GROUP_BY_UNSPECIFIED = 0;
        GROUP_BY_DAY = 1; // show each day in week (mon, tues,...), show each day in month (1,2,...30)
        GROUP_BY_WEEK = 2; // show each week in quater (week1.Aug ...)
        GORUP_BY_MONTH = 3; // show each month in year (jan, feb, march ...) 
        GORUP_BY_YEAR = 5; // show each year (2022, 2023...)
    }
}

message GetActivityStatisticReply {
    repeated ActivityStatisticData data = 1;
}

// data for each week/month/year
message ActivityStatisticData {
    google.protobuf.Timestamp datetime = 1;
    uint64 total_distance = 2; // meters
    uint64 total_duration = 3; // seconds
    uint32 number_of_activities = 4;
}

enum CommitType {
    COMMIT_TYPE_UNSPECIFIED = 0;
    COMMIT_TYPE_PLAN = 1; // personal plan
    COMMIT_TYPE_CHALLENGE = 2; // group challenge
    COMMIT_TYPE_EVENT = 3; // event between group
}

message CommitActivityRequest {
    int64 activity_id = 1;
    repeated CommitObject commit_to = 2;
}

message CommitObject {
    int64 commit_id = 1;
    CommitType commit_type = 2;
    uint32 rule = 4; //rule for commit type: challenge, event or plan, view plan, group,.. api for detail 
    // when call plani or other internal api to commit, convert rule to their RuleType
    // if not needed, just pass 0
}

message CommitActivityReply {
}

message GetUsersAchievementRequest {
    repeated int64 user_ids = 1;
}

message GetUsersAchievementReply {
    map<int64, UserAchievement> user_achievements = 1;
}

message UserAchievement {
    // activity type -> achievementDetail
    map<uint32, AchievementDetail> achievements = 1;
}

message AchievementDetail {
    AchievementLevel level = 1;
    uint32 number_of_activities = 2;
    double total_distance = 3;
    uint64 total_duration = 4;
    double total_kcal = 5; 
}

enum AchievementLevel {
    ACHIEVEMENT_LEVEL_UNSPECIFIED = 0;
    ACHIEVEMENT_LEVEL_BEGINNER = 1;
    ACHIEVEMENT_LEVEL_INTERMEDIATE = 2;
    ACHIEVEMENT_LEVEL_ADVANCED = 3;
    ACHIEVEMENT_LEVEL_EXPERT = 4;
}