// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/event.proto

package event

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EventClient is the client API for Event service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventClient interface {
	// for group admin or app admin
	CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*CreateEventReply, error)
	UpdateEventInfo(ctx context.Context, in *UpdateEventInfoRequest, opts ...grpc.CallOption) (*UpdateEventInfoReply, error)
	JoinEvent(ctx context.Context, in *JoinEventRequest, opts ...grpc.CallOption) (*JoinEventReply, error)
	ApproveJoinEvent(ctx context.Context, in *ApproveJoinEventRequest, opts ...grpc.CallOption) (*ApproveJoinEventReply, error)
	AddSubEventToEvent(ctx context.Context, in *AddSubEventToEventRequest, opts ...grpc.CallOption) (*AddSubEventToEventReply, error)
	RemoveSubEventFromEvent(ctx context.Context, in *RemoveSubEventFromEventRequest, opts ...grpc.CallOption) (*RemoveSubEventFromEventReply, error)
	// for all
	ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*ListEventsReply, error)
	ListSubEvents(ctx context.Context, in *ListSubEventsRequest, opts ...grpc.CallOption) (*ListSubEventsReply, error)
	ListGroupsInEvent(ctx context.Context, in *ListGroupsInEventRequest, opts ...grpc.CallOption) (*ListGroupsInEventReply, error)
	ListGroupProgressInEvent(ctx context.Context, in *ListGroupProgressInEventRequest, opts ...grpc.CallOption) (*ListGroupProgressInEventReply, error)
}

type eventClient struct {
	cc grpc.ClientConnInterface
}

func NewEventClient(cc grpc.ClientConnInterface) EventClient {
	return &eventClient{cc}
}

func (c *eventClient) CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*CreateEventReply, error) {
	out := new(CreateEventReply)
	err := c.cc.Invoke(ctx, "/event.Event/CreateEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventClient) UpdateEventInfo(ctx context.Context, in *UpdateEventInfoRequest, opts ...grpc.CallOption) (*UpdateEventInfoReply, error) {
	out := new(UpdateEventInfoReply)
	err := c.cc.Invoke(ctx, "/event.Event/UpdateEventInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventClient) JoinEvent(ctx context.Context, in *JoinEventRequest, opts ...grpc.CallOption) (*JoinEventReply, error) {
	out := new(JoinEventReply)
	err := c.cc.Invoke(ctx, "/event.Event/JoinEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventClient) ApproveJoinEvent(ctx context.Context, in *ApproveJoinEventRequest, opts ...grpc.CallOption) (*ApproveJoinEventReply, error) {
	out := new(ApproveJoinEventReply)
	err := c.cc.Invoke(ctx, "/event.Event/ApproveJoinEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventClient) AddSubEventToEvent(ctx context.Context, in *AddSubEventToEventRequest, opts ...grpc.CallOption) (*AddSubEventToEventReply, error) {
	out := new(AddSubEventToEventReply)
	err := c.cc.Invoke(ctx, "/event.Event/AddSubEventToEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventClient) RemoveSubEventFromEvent(ctx context.Context, in *RemoveSubEventFromEventRequest, opts ...grpc.CallOption) (*RemoveSubEventFromEventReply, error) {
	out := new(RemoveSubEventFromEventReply)
	err := c.cc.Invoke(ctx, "/event.Event/RemoveSubEventFromEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventClient) ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*ListEventsReply, error) {
	out := new(ListEventsReply)
	err := c.cc.Invoke(ctx, "/event.Event/ListEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventClient) ListSubEvents(ctx context.Context, in *ListSubEventsRequest, opts ...grpc.CallOption) (*ListSubEventsReply, error) {
	out := new(ListSubEventsReply)
	err := c.cc.Invoke(ctx, "/event.Event/ListSubEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventClient) ListGroupsInEvent(ctx context.Context, in *ListGroupsInEventRequest, opts ...grpc.CallOption) (*ListGroupsInEventReply, error) {
	out := new(ListGroupsInEventReply)
	err := c.cc.Invoke(ctx, "/event.Event/ListGroupsInEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventClient) ListGroupProgressInEvent(ctx context.Context, in *ListGroupProgressInEventRequest, opts ...grpc.CallOption) (*ListGroupProgressInEventReply, error) {
	out := new(ListGroupProgressInEventReply)
	err := c.cc.Invoke(ctx, "/event.Event/ListGroupProgressInEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventServer is the server API for Event service.
// All implementations must embed UnimplementedEventServer
// for forward compatibility
type EventServer interface {
	// for group admin or app admin
	CreateEvent(context.Context, *CreateEventRequest) (*CreateEventReply, error)
	UpdateEventInfo(context.Context, *UpdateEventInfoRequest) (*UpdateEventInfoReply, error)
	JoinEvent(context.Context, *JoinEventRequest) (*JoinEventReply, error)
	ApproveJoinEvent(context.Context, *ApproveJoinEventRequest) (*ApproveJoinEventReply, error)
	AddSubEventToEvent(context.Context, *AddSubEventToEventRequest) (*AddSubEventToEventReply, error)
	RemoveSubEventFromEvent(context.Context, *RemoveSubEventFromEventRequest) (*RemoveSubEventFromEventReply, error)
	// for all
	ListEvents(context.Context, *ListEventsRequest) (*ListEventsReply, error)
	ListSubEvents(context.Context, *ListSubEventsRequest) (*ListSubEventsReply, error)
	ListGroupsInEvent(context.Context, *ListGroupsInEventRequest) (*ListGroupsInEventReply, error)
	ListGroupProgressInEvent(context.Context, *ListGroupProgressInEventRequest) (*ListGroupProgressInEventReply, error)
	mustEmbedUnimplementedEventServer()
}

// UnimplementedEventServer must be embedded to have forward compatible implementations.
type UnimplementedEventServer struct {
}

func (UnimplementedEventServer) CreateEvent(context.Context, *CreateEventRequest) (*CreateEventReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEvent not implemented")
}
func (UnimplementedEventServer) UpdateEventInfo(context.Context, *UpdateEventInfoRequest) (*UpdateEventInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEventInfo not implemented")
}
func (UnimplementedEventServer) JoinEvent(context.Context, *JoinEventRequest) (*JoinEventReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinEvent not implemented")
}
func (UnimplementedEventServer) ApproveJoinEvent(context.Context, *ApproveJoinEventRequest) (*ApproveJoinEventReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveJoinEvent not implemented")
}
func (UnimplementedEventServer) AddSubEventToEvent(context.Context, *AddSubEventToEventRequest) (*AddSubEventToEventReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSubEventToEvent not implemented")
}
func (UnimplementedEventServer) RemoveSubEventFromEvent(context.Context, *RemoveSubEventFromEventRequest) (*RemoveSubEventFromEventReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSubEventFromEvent not implemented")
}
func (UnimplementedEventServer) ListEvents(context.Context, *ListEventsRequest) (*ListEventsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEvents not implemented")
}
func (UnimplementedEventServer) ListSubEvents(context.Context, *ListSubEventsRequest) (*ListSubEventsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubEvents not implemented")
}
func (UnimplementedEventServer) ListGroupsInEvent(context.Context, *ListGroupsInEventRequest) (*ListGroupsInEventReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroupsInEvent not implemented")
}
func (UnimplementedEventServer) ListGroupProgressInEvent(context.Context, *ListGroupProgressInEventRequest) (*ListGroupProgressInEventReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroupProgressInEvent not implemented")
}
func (UnimplementedEventServer) mustEmbedUnimplementedEventServer() {}

// UnsafeEventServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventServer will
// result in compilation errors.
type UnsafeEventServer interface {
	mustEmbedUnimplementedEventServer()
}

func RegisterEventServer(s grpc.ServiceRegistrar, srv EventServer) {
	s.RegisterService(&Event_ServiceDesc, srv)
}

func _Event_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.Event/CreateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServer).CreateEvent(ctx, req.(*CreateEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Event_UpdateEventInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEventInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServer).UpdateEventInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.Event/UpdateEventInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServer).UpdateEventInfo(ctx, req.(*UpdateEventInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Event_JoinEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServer).JoinEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.Event/JoinEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServer).JoinEvent(ctx, req.(*JoinEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Event_ApproveJoinEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveJoinEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServer).ApproveJoinEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.Event/ApproveJoinEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServer).ApproveJoinEvent(ctx, req.(*ApproveJoinEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Event_AddSubEventToEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSubEventToEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServer).AddSubEventToEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.Event/AddSubEventToEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServer).AddSubEventToEvent(ctx, req.(*AddSubEventToEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Event_RemoveSubEventFromEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSubEventFromEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServer).RemoveSubEventFromEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.Event/RemoveSubEventFromEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServer).RemoveSubEventFromEvent(ctx, req.(*RemoveSubEventFromEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Event_ListEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServer).ListEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.Event/ListEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServer).ListEvents(ctx, req.(*ListEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Event_ListSubEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServer).ListSubEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.Event/ListSubEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServer).ListSubEvents(ctx, req.(*ListSubEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Event_ListGroupsInEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupsInEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServer).ListGroupsInEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.Event/ListGroupsInEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServer).ListGroupsInEvent(ctx, req.(*ListGroupsInEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Event_ListGroupProgressInEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupProgressInEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServer).ListGroupProgressInEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.Event/ListGroupProgressInEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServer).ListGroupProgressInEvent(ctx, req.(*ListGroupProgressInEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Event_ServiceDesc is the grpc.ServiceDesc for Event service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Event_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "event.Event",
	HandlerType: (*EventServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEvent",
			Handler:    _Event_CreateEvent_Handler,
		},
		{
			MethodName: "UpdateEventInfo",
			Handler:    _Event_UpdateEventInfo_Handler,
		},
		{
			MethodName: "JoinEvent",
			Handler:    _Event_JoinEvent_Handler,
		},
		{
			MethodName: "ApproveJoinEvent",
			Handler:    _Event_ApproveJoinEvent_Handler,
		},
		{
			MethodName: "AddSubEventToEvent",
			Handler:    _Event_AddSubEventToEvent_Handler,
		},
		{
			MethodName: "RemoveSubEventFromEvent",
			Handler:    _Event_RemoveSubEventFromEvent_Handler,
		},
		{
			MethodName: "ListEvents",
			Handler:    _Event_ListEvents_Handler,
		},
		{
			MethodName: "ListSubEvents",
			Handler:    _Event_ListSubEvents_Handler,
		},
		{
			MethodName: "ListGroupsInEvent",
			Handler:    _Event_ListGroupsInEvent_Handler,
		},
		{
			MethodName: "ListGroupProgressInEvent",
			Handler:    _Event_ListGroupProgressInEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/event.proto",
}
