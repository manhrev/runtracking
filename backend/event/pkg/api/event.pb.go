// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.2
// source: api/event.proto

package event

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ActivityType int32

const (
	ActivityType_ACTIVITY_TYPE_UNSPECIFIED ActivityType = 0
	ActivityType_ACTIVITY_TYPE_RUNNING     ActivityType = 1
	ActivityType_ACTIVITY_TYPE_CYCLING     ActivityType = 2
	ActivityType_ACTIVITY_TYPE_WALKING     ActivityType = 3
)

// Enum value maps for ActivityType.
var (
	ActivityType_name = map[int32]string{
		0: "ACTIVITY_TYPE_UNSPECIFIED",
		1: "ACTIVITY_TYPE_RUNNING",
		2: "ACTIVITY_TYPE_CYCLING",
		3: "ACTIVITY_TYPE_WALKING",
	}
	ActivityType_value = map[string]int32{
		"ACTIVITY_TYPE_UNSPECIFIED": 0,
		"ACTIVITY_TYPE_RUNNING":     1,
		"ACTIVITY_TYPE_CYCLING":     2,
		"ACTIVITY_TYPE_WALKING":     3,
	}
)

func (x ActivityType) Enum() *ActivityType {
	p := new(ActivityType)
	*p = x
	return p
}

func (x ActivityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActivityType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_event_proto_enumTypes[0].Descriptor()
}

func (ActivityType) Type() protoreflect.EnumType {
	return &file_api_event_proto_enumTypes[0]
}

func (x ActivityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActivityType.Descriptor instead.
func (ActivityType) EnumDescriptor() ([]byte, []int) {
	return file_api_event_proto_rawDescGZIP(), []int{0}
}

type Rule int32

const (
	Rule_RULE_UNSPECIFIED    Rule = 0
	Rule_RULE_TOTAL_DISTANCE Rule = 1
	Rule_RULE_TOTAL_TIME     Rule = 2
	Rule_RULE_TOTAL_ACTIVITY Rule = 3
	Rule_RULE_TOTAL_CALORIES Rule = 4
)

// Enum value maps for Rule.
var (
	Rule_name = map[int32]string{
		0: "RULE_UNSPECIFIED",
		1: "RULE_TOTAL_DISTANCE",
		2: "RULE_TOTAL_TIME",
		3: "RULE_TOTAL_ACTIVITY",
		4: "RULE_TOTAL_CALORIES",
	}
	Rule_value = map[string]int32{
		"RULE_UNSPECIFIED":    0,
		"RULE_TOTAL_DISTANCE": 1,
		"RULE_TOTAL_TIME":     2,
		"RULE_TOTAL_ACTIVITY": 3,
		"RULE_TOTAL_CALORIES": 4,
	}
)

func (x Rule) Enum() *Rule {
	p := new(Rule)
	*p = x
	return p
}

func (x Rule) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Rule) Descriptor() protoreflect.EnumDescriptor {
	return file_api_event_proto_enumTypes[1].Descriptor()
}

func (Rule) Type() protoreflect.EnumType {
	return &file_api_event_proto_enumTypes[1]
}

func (x Rule) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Rule.Descriptor instead.
func (Rule) EnumDescriptor() ([]byte, []int) {
	return file_api_event_proto_rawDescGZIP(), []int{1}
}

type RuleStatus int32

const (
	RuleStatus_RULE_STATUS_UNSPECIFIED RuleStatus = 0
	RuleStatus_RULE_STATUS_FAILED      RuleStatus = 1
	RuleStatus_RULE_STATUS_COMPLETED   RuleStatus = 2
	RuleStatus_RULE_STATUS_INPROGRESS  RuleStatus = 3
)

// Enum value maps for RuleStatus.
var (
	RuleStatus_name = map[int32]string{
		0: "RULE_STATUS_UNSPECIFIED",
		1: "RULE_STATUS_FAILED",
		2: "RULE_STATUS_COMPLETED",
		3: "RULE_STATUS_INPROGRESS",
	}
	RuleStatus_value = map[string]int32{
		"RULE_STATUS_UNSPECIFIED": 0,
		"RULE_STATUS_FAILED":      1,
		"RULE_STATUS_COMPLETED":   2,
		"RULE_STATUS_INPROGRESS":  3,
	}
)

func (x RuleStatus) Enum() *RuleStatus {
	p := new(RuleStatus)
	*p = x
	return p
}

func (x RuleStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RuleStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_event_proto_enumTypes[2].Descriptor()
}

func (RuleStatus) Type() protoreflect.EnumType {
	return &file_api_event_proto_enumTypes[2]
}

func (x RuleStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RuleStatus.Descriptor instead.
func (RuleStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_event_proto_rawDescGZIP(), []int{2}
}

type SubEventStatus int32

const (
	SubEventStatus_SUB_EVENT_STATUS_UNSPECIFIED SubEventStatus = 0
	SubEventStatus_SUB_EVENT_STATUS_NEW         SubEventStatus = 1
	SubEventStatus_SUB_EVENT_STATUS_IN_PROGRESS SubEventStatus = 2
	SubEventStatus_SUB_EVENT_STATUS_ENDED       SubEventStatus = 3
)

// Enum value maps for SubEventStatus.
var (
	SubEventStatus_name = map[int32]string{
		0: "SUB_EVENT_STATUS_UNSPECIFIED",
		1: "SUB_EVENT_STATUS_NEW",
		2: "SUB_EVENT_STATUS_IN_PROGRESS",
		3: "SUB_EVENT_STATUS_ENDED",
	}
	SubEventStatus_value = map[string]int32{
		"SUB_EVENT_STATUS_UNSPECIFIED": 0,
		"SUB_EVENT_STATUS_NEW":         1,
		"SUB_EVENT_STATUS_IN_PROGRESS": 2,
		"SUB_EVENT_STATUS_ENDED":       3,
	}
)

func (x SubEventStatus) Enum() *SubEventStatus {
	p := new(SubEventStatus)
	*p = x
	return p
}

func (x SubEventStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubEventStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_event_proto_enumTypes[3].Descriptor()
}

func (SubEventStatus) Type() protoreflect.EnumType {
	return &file_api_event_proto_enumTypes[3]
}

func (x SubEventStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubEventStatus.Descriptor instead.
func (SubEventStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_event_proto_rawDescGZIP(), []int{3}
}

type GroupStatus int32

const (
	GroupStatus_GROUP_STATUS_UNSPECIFIED GroupStatus = 0
	GroupStatus_GROUP_STATUS_REQUESTED   GroupStatus = 1
	GroupStatus_GROUP_STATUS_ACTIVE      GroupStatus = 2
	GroupStatus_GROUP_STATUS_BANNED      GroupStatus = 5
	GroupStatus_GROUP_STATUS_REJECTED    GroupStatus = 3
	GroupStatus_GROUP_STATUS_LEFT        GroupStatus = 4
)

// Enum value maps for GroupStatus.
var (
	GroupStatus_name = map[int32]string{
		0: "GROUP_STATUS_UNSPECIFIED",
		1: "GROUP_STATUS_REQUESTED",
		2: "GROUP_STATUS_ACTIVE",
		5: "GROUP_STATUS_BANNED",
		3: "GROUP_STATUS_REJECTED",
		4: "GROUP_STATUS_LEFT",
	}
	GroupStatus_value = map[string]int32{
		"GROUP_STATUS_UNSPECIFIED": 0,
		"GROUP_STATUS_REQUESTED":   1,
		"GROUP_STATUS_ACTIVE":      2,
		"GROUP_STATUS_BANNED":      5,
		"GROUP_STATUS_REJECTED":    3,
		"GROUP_STATUS_LEFT":        4,
	}
)

func (x GroupStatus) Enum() *GroupStatus {
	p := new(GroupStatus)
	*p = x
	return p
}

func (x GroupStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_event_proto_enumTypes[4].Descriptor()
}

func (GroupStatus) Type() protoreflect.EnumType {
	return &file_api_event_proto_enumTypes[4]
}

func (x GroupStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupStatus.Descriptor instead.
func (GroupStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_event_proto_rawDescGZIP(), []int{4}
}

type ListEventsRequest_SortBy int32

const (
	ListEventsRequest_SORT_BY_UNSPECIFIED   ListEventsRequest_SortBy = 0
	ListEventsRequest_SORT_BY_NAME          ListEventsRequest_SortBy = 1
	ListEventsRequest_SORT_BY_START_AT      ListEventsRequest_SortBy = 2
	ListEventsRequest_SORT_BY_NUM_OF_GROUPS ListEventsRequest_SortBy = 3
)

// Enum value maps for ListEventsRequest_SortBy.
var (
	ListEventsRequest_SortBy_name = map[int32]string{
		0: "SORT_BY_UNSPECIFIED",
		1: "SORT_BY_NAME",
		2: "SORT_BY_START_AT",
		3: "SORT_BY_NUM_OF_GROUPS",
	}
	ListEventsRequest_SortBy_value = map[string]int32{
		"SORT_BY_UNSPECIFIED":   0,
		"SORT_BY_NAME":          1,
		"SORT_BY_START_AT":      2,
		"SORT_BY_NUM_OF_GROUPS": 3,
	}
)

func (x ListEventsRequest_SortBy) Enum() *ListEventsRequest_SortBy {
	p := new(ListEventsRequest_SortBy)
	*p = x
	return p
}

func (x ListEventsRequest_SortBy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListEventsRequest_SortBy) Descriptor() protoreflect.EnumDescriptor {
	return file_api_event_proto_enumTypes[5].Descriptor()
}

func (ListEventsRequest_SortBy) Type() protoreflect.EnumType {
	return &file_api_event_proto_enumTypes[5]
}

func (x ListEventsRequest_SortBy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListEventsRequest_SortBy.Descriptor instead.
func (ListEventsRequest_SortBy) EnumDescriptor() ([]byte, []int) {
	return file_api_event_proto_rawDescGZIP(), []int{18, 0}
}

type ListEventsRequest_Visibility int32

const (
	ListEventsRequest_VISIBILITY_UNSPECIFIED ListEventsRequest_Visibility = 0
	ListEventsRequest_VISIBILITY_GLOBAL      ListEventsRequest_Visibility = 1
	ListEventsRequest_VISIBILITY_NO_GLOBAL   ListEventsRequest_Visibility = 2
)

// Enum value maps for ListEventsRequest_Visibility.
var (
	ListEventsRequest_Visibility_name = map[int32]string{
		0: "VISIBILITY_UNSPECIFIED",
		1: "VISIBILITY_GLOBAL",
		2: "VISIBILITY_NO_GLOBAL",
	}
	ListEventsRequest_Visibility_value = map[string]int32{
		"VISIBILITY_UNSPECIFIED": 0,
		"VISIBILITY_GLOBAL":      1,
		"VISIBILITY_NO_GLOBAL":   2,
	}
)

func (x ListEventsRequest_Visibility) Enum() *ListEventsRequest_Visibility {
	p := new(ListEventsRequest_Visibility)
	*p = x
	return p
}

func (x ListEventsRequest_Visibility) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListEventsRequest_Visibility) Descriptor() protoreflect.EnumDescriptor {
	return file_api_event_proto_enumTypes[6].Descriptor()
}

func (ListEventsRequest_Visibility) Type() protoreflect.EnumType {
	return &file_api_event_proto_enumTypes[6]
}

func (x ListEventsRequest_Visibility) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListEventsRequest_Visibility.Descriptor instead.
func (ListEventsRequest_Visibility) EnumDescriptor() ([]byte, []int) {
	return file_api_event_proto_rawDescGZIP(), []int{18, 1}
}

type SubEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description  string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Picture      string                 `protobuf:"bytes,4,opt,name=picture,proto3" json:"picture,omitempty"`
	Goal         int64                  `protobuf:"varint,5,opt,name=goal,proto3" json:"goal,omitempty"`
	Rule         Rule                   `protobuf:"varint,6,opt,name=rule,proto3,enum=event.Rule" json:"rule,omitempty"`
	StartAt      *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	EndAt        *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`
	Status       SubEventStatus         `protobuf:"varint,9,opt,name=status,proto3,enum=event.SubEventStatus" json:"status,omitempty"`
	ActivityType ActivityType           `protobuf:"varint,10,opt,name=activity_type,json=activityType,proto3,enum=event.ActivityType" json:"activity_type,omitempty"`
}

func (x *SubEvent) Reset() {
	*x = SubEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_event_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubEvent) ProtoMessage() {}

func (x *SubEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_event_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubEvent.ProtoReflect.Descriptor instead.
func (*SubEvent) Descriptor() ([]byte, []int) {
	return file_api_event_proto_rawDescGZIP(), []int{0}
}

func (x *SubEvent) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SubEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SubEvent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SubEvent) GetPicture() string {
	if x != nil {
		return x.Picture
	}
	return ""
}

func (x *SubEvent) GetGoal() int64 {
	if x != nil {
		return x.Goal
	}
	return 0
}

func (x *SubEvent) GetRule() Rule {
	if x != nil {
		return x.Rule
	}
	return Rule_RULE_UNSPECIFIED
}

func (x *SubEvent) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *SubEvent) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *SubEvent) GetStatus() SubEventStatus {
	if x != nil {
		return x.Status
	}
	return SubEventStatus_SUB_EVENT_STATUS_UNSPECIFIED
}

func (x *SubEvent) GetActivityType() ActivityType {
	if x != nil {
		return x.ActivityType
	}
	return ActivityType_ACTIVITY_TYPE_UNSPECIFIED
}

type EventDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name            string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description     string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Picture         string                 `protobuf:"bytes,4,opt,name=picture,proto3" json:"picture,omitempty"`
	IsGlobal        bool                   `protobuf:"varint,5,opt,name=is_global,json=isGlobal,proto3" json:"is_global,omitempty"`
	StartAt         *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	EndAt           *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`
	OwnerGroupId    int64                  `protobuf:"varint,9,opt,name=owner_group_id,json=ownerGroupId,proto3" json:"owner_group_id,omitempty"`
	NumOfGroups     uint32                 `protobuf:"varint,10,opt,name=num_of_groups,json=numOfGroups,proto3" json:"num_of_groups,omitempty"`
	YourGroupStatus GroupStatus            `protobuf:"varint,11,opt,name=your_group_status,json=yourGroupStatus,proto3,enum=event.GroupStatus" json:"your_group_status,omitempty"`
}

func (x *EventDetail) Reset() {
	*x = EventDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_event_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventDetail) ProtoMessage() {}

func (x *EventDetail) ProtoReflect() protoreflect.Message {
	mi := &file_api_event_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventDetail.ProtoReflect.Descriptor instead.
func (*EventDetail) Descriptor() ([]byte, []int) {
	return file_api_event_proto_rawDescGZIP(), []int{1}
}

func (x *EventDetail) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EventDetail) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EventDetail) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *EventDetail) GetPicture() string {
	if x != nil {
		return x.Picture
	}
	return ""
}

func (x *EventDetail) GetIsGlobal() bool {
	if x != nil {
		return x.IsGlobal
	}
	return false
}

func (x *EventDetail) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *EventDetail) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *EventDetail) GetOwnerGroupId() int64 {
	if x != nil {
		return x.OwnerGroupId
	}
	return 0
}

func (x *EventDetail) GetNumOfGroups() uint32 {
	if x != nil {
		return x.NumOfGroups
	}
	return 0
}

func (x *EventDetail) GetYourGroupStatus() GroupStatus {
	if x != nil {
		return x.YourGroupStatus
	}
	return GroupStatus_GROUP_STATUS_UNSPECIFIED
}

type CreateEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description  string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Picture      string                 `protobuf:"bytes,3,opt,name=picture,proto3" json:"picture,omitempty"`
	IsGlobal     bool                   `protobuf:"varint,4,opt,name=is_global,json=isGlobal,proto3" json:"is_global,omitempty"` // only app admin can use, if not admin, this field will be ignored
	SubEvents    []*CreateSubEvent      `protobuf:"bytes,5,rep,name=sub_events,json=subEvents,proto3" json:"sub_events,omitempty"`
	OwnerGroupId int64                  `protobuf:"varint,6,opt,name=owner_group_id,json=ownerGroupId,proto3" json:"owner_group_id,omitempty"`
	StartAt      *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
}

func (x *CreateEventRequest) Reset() {
	*x = CreateEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_event_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEventRequest) ProtoMessage() {}

func (x *CreateEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_event_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEventRequest.ProtoReflect.Descriptor instead.
func (*CreateEventRequest) Descriptor() ([]byte, []int) {
	return file_api_event_proto_rawDescGZIP(), []int{2}
}

func (x *CreateEventRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateEventRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateEventRequest) GetPicture() string {
	if x != nil {
		return x.Picture
	}
	return ""
}

func (x *CreateEventRequest) GetIsGlobal() bool {
	if x != nil {
		return x.IsGlobal
	}
	return false
}

func (x *CreateEventRequest) GetSubEvents() []*CreateSubEvent {
	if x != nil {
		return x.SubEvents
	}
	return nil
}

func (x *CreateEventRequest) GetOwnerGroupId() int64 {
	if x != nil {
		return x.OwnerGroupId
	}
	return 0
}

func (x *CreateEventRequest) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

type CreateSubEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description  string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Picture      string                 `protobuf:"bytes,3,opt,name=picture,proto3" json:"picture,omitempty"`
	Goal         int64                  `protobuf:"varint,4,opt,name=goal,proto3" json:"goal,omitempty"`
	Rule         Rule                   `protobuf:"varint,5,opt,name=rule,proto3,enum=event.Rule" json:"rule,omitempty"`
	StartAt      *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	EndAt        *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`
	ActivityType ActivityType           `protobuf:"varint,8,opt,name=activity_type,json=activityType,proto3,enum=event.ActivityType" json:"activity_type,omitempty"`
}

func (x *CreateSubEvent) Reset() {
	*x = CreateSubEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_event_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSubEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubEvent) ProtoMessage() {}

func (x *CreateSubEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_event_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubEvent.ProtoReflect.Descriptor instead.
func (*CreateSubEvent) Descriptor() ([]byte, []int) {
	return file_api_event_proto_rawDescGZIP(), []int{3}
}

func (x *CreateSubEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateSubEvent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateSubEvent) GetPicture() string {
	if x != nil {
		return x.Picture
	}
	return ""
}

func (x *CreateSubEvent) GetGoal() int64 {
	if x != nil {
		return x.Goal
	}
	return 0
}

func (x *CreateSubEvent) GetRule() Rule {
	if x != nil {
		return x.Rule
	}
	return Rule_RULE_UNSPECIFIED
}

func (x *CreateSubEvent) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *CreateSubEvent) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *CreateSubEvent) GetActivityType() ActivityType {
	if x != nil {
		return x.ActivityType
	}
	return ActivityType_ACTIVITY_TYPE_UNSPECIFIED
}

type CreateEventReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdCreated int64 `protobuf:"varint,1,opt,name=id_created,json=idCreated,proto3" json:"id_created,omitempty"`
}

func (x *CreateEventReply) Reset() {
	*x = CreateEventReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_event_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEventReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEventReply) ProtoMessage() {}

func (x *CreateEventReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_event_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEventReply.ProtoReflect.Descriptor instead.
func (*CreateEventReply) Descriptor() ([]byte, []int) {
	return file_api_event_proto_rawDescGZIP(), []int{4}
}

func (x *CreateEventReply) GetIdCreated() int64 {
	if x != nil {
		return x.IdCreated
	}
	return 0
}

type UpdateEventInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// if any field is empty (0 or "" ...), it will be ignored
	EventId     int64  `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Picture     string `protobuf:"bytes,4,opt,name=picture,proto3" json:"picture,omitempty"`
}

func (x *UpdateEventInfoRequest) Reset() {
	*x = UpdateEventInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_event_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEventInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEventInfoRequest) ProtoMessage() {}

func (x *UpdateEventInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_event_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEventInfoRequest.ProtoReflect.Descriptor instead.
func (*UpdateEventInfoRequest) Descriptor() ([]byte, []int) {
	return file_api_event_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateEventInfoRequest) GetEventId() int64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *UpdateEventInfoRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateEventInfoRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateEventInfoRequest) GetPicture() string {
	if x != nil {
		return x.Picture
	}
	return ""
}

type UpdateEventInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateEventInfoReply) Reset() {
	*x = UpdateEventInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_event_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEventInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEventInfoReply) ProtoMessage() {}

func (x *UpdateEventInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_event_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEventInfoReply.ProtoReflect.Descriptor instead.
func (*UpdateEventInfoReply) Descriptor() ([]byte, []int) {
	return file_api_event_proto_rawDescGZIP(), []int{6}
}

type JoinEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId int64 `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	GroupId int64 `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *JoinEventRequest) Reset() {
	*x = JoinEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_event_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinEventRequest) ProtoMessage() {}

func (x *JoinEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_event_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinEventRequest.ProtoReflect.Descriptor instead.
func (*JoinEventRequest) Descriptor() ([]byte, []int) {
	return file_api_event_proto_rawDescGZIP(), []int{7}
}

func (x *JoinEventRequest) GetEventId() int64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *JoinEventRequest) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type JoinEventReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *JoinEventReply) Reset() {
	*x = JoinEventReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_event_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinEventReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinEventReply) ProtoMessage() {}

func (x *JoinEventReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_event_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinEventReply.ProtoReflect.Descriptor instead.
func (*JoinEventReply) Descriptor() ([]byte, []int) {
	return file_api_event_proto_rawDescGZIP(), []int{8}
}

type ListGroupsInEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId int64  `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Limit   uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  uint64 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"` // default sortby time joined
}

func (x *ListGroupsInEventRequest) Reset() {
	*x = ListGroupsInEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_event_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGroupsInEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGroupsInEventRequest) ProtoMessage() {}

func (x *ListGroupsInEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_event_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGroupsInEventRequest.ProtoReflect.Descriptor instead.
func (*ListGroupsInEventRequest) Descriptor() ([]byte, []int) {
	return file_api_event_proto_rawDescGZIP(), []int{9}
}

func (x *ListGroupsInEventRequest) GetEventId() int64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *ListGroupsInEventRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListGroupsInEventRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type GroupInEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status GroupStatus `protobuf:"varint,3,opt,name=status,proto3,enum=event.GroupStatus" json:"status,omitempty"`
}

func (x *GroupInEvent) Reset() {
	*x = GroupInEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_event_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupInEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupInEvent) ProtoMessage() {}

func (x *GroupInEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_event_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupInEvent.ProtoReflect.Descriptor instead.
func (*GroupInEvent) Descriptor() ([]byte, []int) {
	return file_api_event_proto_rawDescGZIP(), []int{10}
}

func (x *GroupInEvent) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GroupInEvent) GetStatus() GroupStatus {
	if x != nil {
		return x.Status
	}
	return GroupStatus_GROUP_STATUS_UNSPECIFIED
}

type ListGroupsInEventReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups []*GroupInEvent `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
	Total  int64           `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ListGroupsInEventReply) Reset() {
	*x = ListGroupsInEventReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_event_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGroupsInEventReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGroupsInEventReply) ProtoMessage() {}

func (x *ListGroupsInEventReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_event_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGroupsInEventReply.ProtoReflect.Descriptor instead.
func (*ListGroupsInEventReply) Descriptor() ([]byte, []int) {
	return file_api_event_proto_rawDescGZIP(), []int{11}
}

func (x *ListGroupsInEventReply) GetGroups() []*GroupInEvent {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *ListGroupsInEventReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ApproveJoinEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId int64 `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	GroupId int64 `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *ApproveJoinEventRequest) Reset() {
	*x = ApproveJoinEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_event_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveJoinEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveJoinEventRequest) ProtoMessage() {}

func (x *ApproveJoinEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_event_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveJoinEventRequest.ProtoReflect.Descriptor instead.
func (*ApproveJoinEventRequest) Descriptor() ([]byte, []int) {
	return file_api_event_proto_rawDescGZIP(), []int{12}
}

func (x *ApproveJoinEventRequest) GetEventId() int64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *ApproveJoinEventRequest) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type ApproveJoinEventReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ApproveJoinEventReply) Reset() {
	*x = ApproveJoinEventReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_event_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveJoinEventReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveJoinEventReply) ProtoMessage() {}

func (x *ApproveJoinEventReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_event_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveJoinEventReply.ProtoReflect.Descriptor instead.
func (*ApproveJoinEventReply) Descriptor() ([]byte, []int) {
	return file_api_event_proto_rawDescGZIP(), []int{13}
}

type AddSubEventToEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId  int64           `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	SubEvent *CreateSubEvent `protobuf:"bytes,2,opt,name=sub_event,json=subEvent,proto3" json:"sub_event,omitempty"`
}

func (x *AddSubEventToEventRequest) Reset() {
	*x = AddSubEventToEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_event_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSubEventToEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSubEventToEventRequest) ProtoMessage() {}

func (x *AddSubEventToEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_event_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSubEventToEventRequest.ProtoReflect.Descriptor instead.
func (*AddSubEventToEventRequest) Descriptor() ([]byte, []int) {
	return file_api_event_proto_rawDescGZIP(), []int{14}
}

func (x *AddSubEventToEventRequest) GetEventId() int64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *AddSubEventToEventRequest) GetSubEvent() *CreateSubEvent {
	if x != nil {
		return x.SubEvent
	}
	return nil
}

type AddSubEventToEventReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdCreated int64 `protobuf:"varint,1,opt,name=id_created,json=idCreated,proto3" json:"id_created,omitempty"`
}

func (x *AddSubEventToEventReply) Reset() {
	*x = AddSubEventToEventReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_event_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSubEventToEventReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSubEventToEventReply) ProtoMessage() {}

func (x *AddSubEventToEventReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_event_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSubEventToEventReply.ProtoReflect.Descriptor instead.
func (*AddSubEventToEventReply) Descriptor() ([]byte, []int) {
	return file_api_event_proto_rawDescGZIP(), []int{15}
}

func (x *AddSubEventToEventReply) GetIdCreated() int64 {
	if x != nil {
		return x.IdCreated
	}
	return 0
}

type RemoveSubEventFromEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId    int64 `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	SubEventId int64 `protobuf:"varint,2,opt,name=sub_event_id,json=subEventId,proto3" json:"sub_event_id,omitempty"`
}

func (x *RemoveSubEventFromEventRequest) Reset() {
	*x = RemoveSubEventFromEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_event_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveSubEventFromEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSubEventFromEventRequest) ProtoMessage() {}

func (x *RemoveSubEventFromEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_event_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSubEventFromEventRequest.ProtoReflect.Descriptor instead.
func (*RemoveSubEventFromEventRequest) Descriptor() ([]byte, []int) {
	return file_api_event_proto_rawDescGZIP(), []int{16}
}

func (x *RemoveSubEventFromEventRequest) GetEventId() int64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *RemoveSubEventFromEventRequest) GetSubEventId() int64 {
	if x != nil {
		return x.SubEventId
	}
	return 0
}

type RemoveSubEventFromEventReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveSubEventFromEventReply) Reset() {
	*x = RemoveSubEventFromEventReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_event_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveSubEventFromEventReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSubEventFromEventReply) ProtoMessage() {}

func (x *RemoveSubEventFromEventReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_event_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSubEventFromEventReply.ProtoReflect.Descriptor instead.
func (*RemoveSubEventFromEventReply) Descriptor() ([]byte, []int) {
	return file_api_event_proto_rawDescGZIP(), []int{17}
}

type ListEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit       uint32                       `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset      uint64                       `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Ascending   bool                         `protobuf:"varint,3,opt,name=ascending,proto3" json:"ascending,omitempty"`
	SortBy      ListEventsRequest_SortBy     `protobuf:"varint,4,opt,name=sort_by,json=sortBy,proto3,enum=event.ListEventsRequest_SortBy" json:"sort_by,omitempty"`
	Ids         []int64                      `protobuf:"varint,5,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	GroupIds    []int64                      `protobuf:"varint,6,rep,packed,name=group_ids,json=groupIds,proto3" json:"group_ids,omitempty"` // list event for group, if not set, will list all events
	Visibility  ListEventsRequest_Visibility `protobuf:"varint,7,opt,name=visibility,proto3,enum=event.ListEventsRequest_Visibility" json:"visibility,omitempty"`
	Search      string                       `protobuf:"bytes,8,opt,name=search,proto3" json:"search,omitempty"`
	YourGroupId int64                        `protobuf:"varint,9,opt,name=your_group_id,json=yourGroupId,proto3" json:"your_group_id,omitempty"`
}

func (x *ListEventsRequest) Reset() {
	*x = ListEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_event_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEventsRequest) ProtoMessage() {}

func (x *ListEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_event_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEventsRequest.ProtoReflect.Descriptor instead.
func (*ListEventsRequest) Descriptor() ([]byte, []int) {
	return file_api_event_proto_rawDescGZIP(), []int{18}
}

func (x *ListEventsRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListEventsRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListEventsRequest) GetAscending() bool {
	if x != nil {
		return x.Ascending
	}
	return false
}

func (x *ListEventsRequest) GetSortBy() ListEventsRequest_SortBy {
	if x != nil {
		return x.SortBy
	}
	return ListEventsRequest_SORT_BY_UNSPECIFIED
}

func (x *ListEventsRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *ListEventsRequest) GetGroupIds() []int64 {
	if x != nil {
		return x.GroupIds
	}
	return nil
}

func (x *ListEventsRequest) GetVisibility() ListEventsRequest_Visibility {
	if x != nil {
		return x.Visibility
	}
	return ListEventsRequest_VISIBILITY_UNSPECIFIED
}

func (x *ListEventsRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *ListEventsRequest) GetYourGroupId() int64 {
	if x != nil {
		return x.YourGroupId
	}
	return 0
}

type ListEventsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*EventDetail `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	Total  int64          `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ListEventsReply) Reset() {
	*x = ListEventsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_event_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEventsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEventsReply) ProtoMessage() {}

func (x *ListEventsReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_event_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEventsReply.ProtoReflect.Descriptor instead.
func (*ListEventsReply) Descriptor() ([]byte, []int) {
	return file_api_event_proto_rawDescGZIP(), []int{19}
}

func (x *ListEventsReply) GetEvents() []*EventDetail {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *ListEventsReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ListSubEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId int64 `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"` // sort by always by start_at, desc
}

func (x *ListSubEventsRequest) Reset() {
	*x = ListSubEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_event_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSubEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSubEventsRequest) ProtoMessage() {}

func (x *ListSubEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_event_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSubEventsRequest.ProtoReflect.Descriptor instead.
func (*ListSubEventsRequest) Descriptor() ([]byte, []int) {
	return file_api_event_proto_rawDescGZIP(), []int{20}
}

func (x *ListSubEventsRequest) GetEventId() int64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

type ListSubEventsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubEvents []*SubEvent `protobuf:"bytes,1,rep,name=sub_events,json=subEvents,proto3" json:"sub_events,omitempty"`
}

func (x *ListSubEventsReply) Reset() {
	*x = ListSubEventsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_event_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSubEventsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSubEventsReply) ProtoMessage() {}

func (x *ListSubEventsReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_event_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSubEventsReply.ProtoReflect.Descriptor instead.
func (*ListSubEventsReply) Descriptor() ([]byte, []int) {
	return file_api_event_proto_rawDescGZIP(), []int{21}
}

func (x *ListSubEventsReply) GetSubEvents() []*SubEvent {
	if x != nil {
		return x.SubEvents
	}
	return nil
}

type ListGroupProgressInEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId int64 `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
}

func (x *ListGroupProgressInEventRequest) Reset() {
	*x = ListGroupProgressInEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_event_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGroupProgressInEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGroupProgressInEventRequest) ProtoMessage() {}

func (x *ListGroupProgressInEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_event_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGroupProgressInEventRequest.ProtoReflect.Descriptor instead.
func (*ListGroupProgressInEventRequest) Descriptor() ([]byte, []int) {
	return file_api_event_proto_rawDescGZIP(), []int{22}
}

func (x *ListGroupProgressInEventRequest) GetEventId() int64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

type SubEventProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubEventId    int64                      `protobuf:"varint,1,opt,name=sub_event_id,json=subEventId,proto3" json:"sub_event_id,omitempty"`
	GroupProgress []*GroupProgressInSubEvent `protobuf:"bytes,2,rep,name=group_progress,json=groupProgress,proto3" json:"group_progress,omitempty"`
}

func (x *SubEventProgress) Reset() {
	*x = SubEventProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_event_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubEventProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubEventProgress) ProtoMessage() {}

func (x *SubEventProgress) ProtoReflect() protoreflect.Message {
	mi := &file_api_event_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubEventProgress.ProtoReflect.Descriptor instead.
func (*SubEventProgress) Descriptor() ([]byte, []int) {
	return file_api_event_proto_rawDescGZIP(), []int{23}
}

func (x *SubEventProgress) GetSubEventId() int64 {
	if x != nil {
		return x.SubEventId
	}
	return 0
}

func (x *SubEventProgress) GetGroupProgress() []*GroupProgressInSubEvent {
	if x != nil {
		return x.GroupProgress
	}
	return nil
}

type GroupProgressInSubEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sort by, limit, offset apply here
	GroupId  int64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Progress int64 `protobuf:"varint,2,opt,name=progress,proto3" json:"progress,omitempty"`
}

func (x *GroupProgressInSubEvent) Reset() {
	*x = GroupProgressInSubEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_event_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupProgressInSubEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupProgressInSubEvent) ProtoMessage() {}

func (x *GroupProgressInSubEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_event_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupProgressInSubEvent.ProtoReflect.Descriptor instead.
func (*GroupProgressInSubEvent) Descriptor() ([]byte, []int) {
	return file_api_event_proto_rawDescGZIP(), []int{24}
}

func (x *GroupProgressInSubEvent) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *GroupProgressInSubEvent) GetProgress() int64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

type ListGroupProgressInEventReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubEventProgress []*SubEventProgress `protobuf:"bytes,1,rep,name=sub_event_progress,json=subEventProgress,proto3" json:"sub_event_progress,omitempty"` // int64 total = 2;
}

func (x *ListGroupProgressInEventReply) Reset() {
	*x = ListGroupProgressInEventReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_event_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGroupProgressInEventReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGroupProgressInEventReply) ProtoMessage() {}

func (x *ListGroupProgressInEventReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_event_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGroupProgressInEventReply.ProtoReflect.Descriptor instead.
func (*ListGroupProgressInEventReply) Descriptor() ([]byte, []int) {
	return file_api_event_proto_rawDescGZIP(), []int{25}
}

func (x *ListGroupProgressInEventReply) GetSubEventProgress() []*SubEventProgress {
	if x != nil {
		return x.SubEventProgress
	}
	return nil
}

var File_api_event_proto protoreflect.FileDescriptor

var file_api_event_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf2, 0x02, 0x0a, 0x08, 0x53, 0x75,
	0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x04, 0x72, 0x75,
	0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x41, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05,
	0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x75,
	0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0xfe,
	0x02, 0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x73, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x12, 0x35, 0x0a, 0x08, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x41, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05,
	0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6e,
	0x75, 0x6d, 0x5f, 0x6f, 0x66, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12,
	0x3e, 0x0a, 0x11, 0x79, 0x6f, 0x75, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0f,
	0x79, 0x6f, 0x75, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x94, 0x02, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x09,
	0x73, 0x75, 0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x35, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x22, 0xb9, 0x02, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x75, 0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x61,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x12, 0x1f, 0x0a,
	0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x35,
	0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x31, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x64, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x64, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x48, 0x0a, 0x10, 0x4a, 0x6f, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x10, 0x0a,
	0x0e, 0x4a, 0x6f, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x63, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x49, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x22, 0x4a, 0x0a, 0x0c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x5b, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x49, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2b, 0x0a, 0x06, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x4f, 0x0a,
	0x17, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x17,
	0x0a, 0x15, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x6a, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x53, 0x75,
	0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x32, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x75, 0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x73, 0x75, 0x62, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x22, 0x38, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x53, 0x75, 0x62, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x69, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0x5d, 0x0a,
	0x1e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x75, 0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46,
	0x72, 0x6f, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x75,
	0x62, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x73, 0x75, 0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x1e, 0x0a, 0x1c,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x75, 0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x72,
	0x6f, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x8a, 0x04, 0x0a,
	0x11, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x38,
	0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79,
	0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x43, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x12, 0x22, 0x0a, 0x0d, 0x79, 0x6f, 0x75, 0x72, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x79, 0x6f, 0x75,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x64, 0x0a, 0x06, 0x53, 0x6f, 0x72, 0x74,
	0x42, 0x79, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53,
	0x4f, 0x52, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x41,
	0x54, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x4e,
	0x55, 0x4d, 0x5f, 0x4f, 0x46, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x53, 0x10, 0x03, 0x22, 0x59,
	0x0a, 0x0a, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x16,
	0x56, 0x49, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x49, 0x53, 0x49,
	0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x10, 0x01, 0x12,
	0x18, 0x0a, 0x14, 0x56, 0x49, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4e, 0x4f,
	0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x10, 0x02, 0x22, 0x53, 0x0a, 0x0f, 0x4c, 0x69, 0x73,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x06,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x31,
	0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0x44, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2e, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x73, 0x75,
	0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x3c, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x7b, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x75, 0x62,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x73, 0x75, 0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x0e, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x53, 0x75, 0x62, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x50, 0x0a, 0x17, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x49, 0x6e, 0x53, 0x75, 0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x66, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x45, 0x0a, 0x12, 0x73, 0x75, 0x62, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x10, 0x73, 0x75, 0x62, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2a, 0x7e, 0x0a, 0x0c,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x55, 0x4e,
	0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x59, 0x43, 0x4c, 0x49, 0x4e, 0x47, 0x10,
	0x02, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x57, 0x41, 0x4c, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x2a, 0x7c, 0x0a, 0x04,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x55,
	0x4c, 0x45, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x4f, 0x54, 0x41,
	0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x55, 0x4c, 0x45,
	0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10,
	0x03, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f,
	0x43, 0x41, 0x4c, 0x4f, 0x52, 0x49, 0x45, 0x53, 0x10, 0x04, 0x2a, 0x78, 0x0a, 0x0a, 0x52, 0x75,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x55, 0x4c, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x19, 0x0a,
	0x15, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x55, 0x4c, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45,
	0x53, 0x53, 0x10, 0x03, 0x2a, 0x8a, 0x01, 0x0a, 0x0e, 0x53, 0x75, 0x62, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x55, 0x42, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x55, 0x42,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x45,
	0x57, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x55, 0x42, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52,
	0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x55, 0x42, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10,
	0x03, 0x2a, 0xab, 0x01, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x1a, 0x0a, 0x16, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x42, 0x41, 0x4e, 0x4e, 0x45, 0x44, 0x10, 0x05, 0x12, 0x19, 0x0a,
	0x15, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45,
	0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x04, 0x32,
	0xc3, 0x06, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x0b, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4f,
	0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1d, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1b, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x3d, 0x0a, 0x09, 0x4a, 0x6f, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4a, 0x6f,
	0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x52,
	0x0a, 0x10, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x1e, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x58, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x53, 0x75, 0x62, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x41, 0x64, 0x64, 0x53, 0x75, 0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x75, 0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x17,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x75, 0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x72,
	0x6f, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x75, 0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x72,
	0x6f, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x75, 0x62,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x18, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x75, 0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1b, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x75, 0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x55, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x49, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x49, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x49, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x18, 0x4c, 0x69, 0x73,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x61, 0x6e, 0x68, 0x72, 0x65, 0x76, 0x2f, 0x72, 0x75, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x3b, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_event_proto_rawDescOnce sync.Once
	file_api_event_proto_rawDescData = file_api_event_proto_rawDesc
)

func file_api_event_proto_rawDescGZIP() []byte {
	file_api_event_proto_rawDescOnce.Do(func() {
		file_api_event_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_event_proto_rawDescData)
	})
	return file_api_event_proto_rawDescData
}

var file_api_event_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_api_event_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_api_event_proto_goTypes = []interface{}{
	(ActivityType)(0),                       // 0: event.ActivityType
	(Rule)(0),                               // 1: event.Rule
	(RuleStatus)(0),                         // 2: event.RuleStatus
	(SubEventStatus)(0),                     // 3: event.SubEventStatus
	(GroupStatus)(0),                        // 4: event.GroupStatus
	(ListEventsRequest_SortBy)(0),           // 5: event.ListEventsRequest.SortBy
	(ListEventsRequest_Visibility)(0),       // 6: event.ListEventsRequest.Visibility
	(*SubEvent)(nil),                        // 7: event.SubEvent
	(*EventDetail)(nil),                     // 8: event.EventDetail
	(*CreateEventRequest)(nil),              // 9: event.CreateEventRequest
	(*CreateSubEvent)(nil),                  // 10: event.CreateSubEvent
	(*CreateEventReply)(nil),                // 11: event.CreateEventReply
	(*UpdateEventInfoRequest)(nil),          // 12: event.UpdateEventInfoRequest
	(*UpdateEventInfoReply)(nil),            // 13: event.UpdateEventInfoReply
	(*JoinEventRequest)(nil),                // 14: event.JoinEventRequest
	(*JoinEventReply)(nil),                  // 15: event.JoinEventReply
	(*ListGroupsInEventRequest)(nil),        // 16: event.ListGroupsInEventRequest
	(*GroupInEvent)(nil),                    // 17: event.GroupInEvent
	(*ListGroupsInEventReply)(nil),          // 18: event.ListGroupsInEventReply
	(*ApproveJoinEventRequest)(nil),         // 19: event.ApproveJoinEventRequest
	(*ApproveJoinEventReply)(nil),           // 20: event.ApproveJoinEventReply
	(*AddSubEventToEventRequest)(nil),       // 21: event.AddSubEventToEventRequest
	(*AddSubEventToEventReply)(nil),         // 22: event.AddSubEventToEventReply
	(*RemoveSubEventFromEventRequest)(nil),  // 23: event.RemoveSubEventFromEventRequest
	(*RemoveSubEventFromEventReply)(nil),    // 24: event.RemoveSubEventFromEventReply
	(*ListEventsRequest)(nil),               // 25: event.ListEventsRequest
	(*ListEventsReply)(nil),                 // 26: event.ListEventsReply
	(*ListSubEventsRequest)(nil),            // 27: event.ListSubEventsRequest
	(*ListSubEventsReply)(nil),              // 28: event.ListSubEventsReply
	(*ListGroupProgressInEventRequest)(nil), // 29: event.ListGroupProgressInEventRequest
	(*SubEventProgress)(nil),                // 30: event.SubEventProgress
	(*GroupProgressInSubEvent)(nil),         // 31: event.GroupProgressInSubEvent
	(*ListGroupProgressInEventReply)(nil),   // 32: event.ListGroupProgressInEventReply
	(*timestamppb.Timestamp)(nil),           // 33: google.protobuf.Timestamp
}
var file_api_event_proto_depIdxs = []int32{
	1,  // 0: event.SubEvent.rule:type_name -> event.Rule
	33, // 1: event.SubEvent.start_at:type_name -> google.protobuf.Timestamp
	33, // 2: event.SubEvent.end_at:type_name -> google.protobuf.Timestamp
	3,  // 3: event.SubEvent.status:type_name -> event.SubEventStatus
	0,  // 4: event.SubEvent.activity_type:type_name -> event.ActivityType
	33, // 5: event.EventDetail.start_at:type_name -> google.protobuf.Timestamp
	33, // 6: event.EventDetail.end_at:type_name -> google.protobuf.Timestamp
	4,  // 7: event.EventDetail.your_group_status:type_name -> event.GroupStatus
	10, // 8: event.CreateEventRequest.sub_events:type_name -> event.CreateSubEvent
	33, // 9: event.CreateEventRequest.start_at:type_name -> google.protobuf.Timestamp
	1,  // 10: event.CreateSubEvent.rule:type_name -> event.Rule
	33, // 11: event.CreateSubEvent.start_at:type_name -> google.protobuf.Timestamp
	33, // 12: event.CreateSubEvent.end_at:type_name -> google.protobuf.Timestamp
	0,  // 13: event.CreateSubEvent.activity_type:type_name -> event.ActivityType
	4,  // 14: event.GroupInEvent.status:type_name -> event.GroupStatus
	17, // 15: event.ListGroupsInEventReply.groups:type_name -> event.GroupInEvent
	10, // 16: event.AddSubEventToEventRequest.sub_event:type_name -> event.CreateSubEvent
	5,  // 17: event.ListEventsRequest.sort_by:type_name -> event.ListEventsRequest.SortBy
	6,  // 18: event.ListEventsRequest.visibility:type_name -> event.ListEventsRequest.Visibility
	8,  // 19: event.ListEventsReply.events:type_name -> event.EventDetail
	7,  // 20: event.ListSubEventsReply.sub_events:type_name -> event.SubEvent
	31, // 21: event.SubEventProgress.group_progress:type_name -> event.GroupProgressInSubEvent
	30, // 22: event.ListGroupProgressInEventReply.sub_event_progress:type_name -> event.SubEventProgress
	9,  // 23: event.Event.CreateEvent:input_type -> event.CreateEventRequest
	12, // 24: event.Event.UpdateEventInfo:input_type -> event.UpdateEventInfoRequest
	14, // 25: event.Event.JoinEvent:input_type -> event.JoinEventRequest
	19, // 26: event.Event.ApproveJoinEvent:input_type -> event.ApproveJoinEventRequest
	21, // 27: event.Event.AddSubEventToEvent:input_type -> event.AddSubEventToEventRequest
	23, // 28: event.Event.RemoveSubEventFromEvent:input_type -> event.RemoveSubEventFromEventRequest
	25, // 29: event.Event.ListEvents:input_type -> event.ListEventsRequest
	27, // 30: event.Event.ListSubEvents:input_type -> event.ListSubEventsRequest
	16, // 31: event.Event.ListGroupsInEvent:input_type -> event.ListGroupsInEventRequest
	29, // 32: event.Event.ListGroupProgressInEvent:input_type -> event.ListGroupProgressInEventRequest
	11, // 33: event.Event.CreateEvent:output_type -> event.CreateEventReply
	13, // 34: event.Event.UpdateEventInfo:output_type -> event.UpdateEventInfoReply
	15, // 35: event.Event.JoinEvent:output_type -> event.JoinEventReply
	20, // 36: event.Event.ApproveJoinEvent:output_type -> event.ApproveJoinEventReply
	22, // 37: event.Event.AddSubEventToEvent:output_type -> event.AddSubEventToEventReply
	24, // 38: event.Event.RemoveSubEventFromEvent:output_type -> event.RemoveSubEventFromEventReply
	26, // 39: event.Event.ListEvents:output_type -> event.ListEventsReply
	28, // 40: event.Event.ListSubEvents:output_type -> event.ListSubEventsReply
	18, // 41: event.Event.ListGroupsInEvent:output_type -> event.ListGroupsInEventReply
	32, // 42: event.Event.ListGroupProgressInEvent:output_type -> event.ListGroupProgressInEventReply
	33, // [33:43] is the sub-list for method output_type
	23, // [23:33] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_api_event_proto_init() }
func file_api_event_proto_init() {
	if File_api_event_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_event_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_event_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_event_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_event_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSubEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_event_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEventReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_event_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateEventInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_event_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateEventInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_event_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_event_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinEventReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_event_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGroupsInEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_event_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupInEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_event_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGroupsInEventReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_event_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveJoinEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_event_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveJoinEventReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_event_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSubEventToEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_event_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSubEventToEventReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_event_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveSubEventFromEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_event_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveSubEventFromEventReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_event_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_event_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEventsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_event_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSubEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_event_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSubEventsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_event_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGroupProgressInEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_event_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubEventProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_event_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupProgressInSubEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_event_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGroupProgressInEventReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_event_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_event_proto_goTypes,
		DependencyIndexes: file_api_event_proto_depIdxs,
		EnumInfos:         file_api_event_proto_enumTypes,
		MessageInfos:      file_api_event_proto_msgTypes,
	}.Build()
	File_api_event_proto = out.File
	file_api_event_proto_rawDesc = nil
	file_api_event_proto_goTypes = nil
	file_api_event_proto_depIdxs = nil
}
