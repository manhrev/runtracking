// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/eventi.proto

package event

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EventIClient is the client API for EventI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventIClient interface {
	UpdateEventProgress(ctx context.Context, in *UpdateEventProgressRequest, opts ...grpc.CallOption) (*UpdateEventProgressReply, error)
	CheckDaily(ctx context.Context, in *CheckDailyRequest, opts ...grpc.CallOption) (*CheckDailyReply, error)
}

type eventIClient struct {
	cc grpc.ClientConnInterface
}

func NewEventIClient(cc grpc.ClientConnInterface) EventIClient {
	return &eventIClient{cc}
}

func (c *eventIClient) UpdateEventProgress(ctx context.Context, in *UpdateEventProgressRequest, opts ...grpc.CallOption) (*UpdateEventProgressReply, error) {
	out := new(UpdateEventProgressReply)
	err := c.cc.Invoke(ctx, "/event.EventI/UpdateEventProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventIClient) CheckDaily(ctx context.Context, in *CheckDailyRequest, opts ...grpc.CallOption) (*CheckDailyReply, error) {
	out := new(CheckDailyReply)
	err := c.cc.Invoke(ctx, "/event.EventI/CheckDaily", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventIServer is the server API for EventI service.
// All implementations must embed UnimplementedEventIServer
// for forward compatibility
type EventIServer interface {
	UpdateEventProgress(context.Context, *UpdateEventProgressRequest) (*UpdateEventProgressReply, error)
	CheckDaily(context.Context, *CheckDailyRequest) (*CheckDailyReply, error)
	mustEmbedUnimplementedEventIServer()
}

// UnimplementedEventIServer must be embedded to have forward compatible implementations.
type UnimplementedEventIServer struct {
}

func (UnimplementedEventIServer) UpdateEventProgress(context.Context, *UpdateEventProgressRequest) (*UpdateEventProgressReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEventProgress not implemented")
}
func (UnimplementedEventIServer) CheckDaily(context.Context, *CheckDailyRequest) (*CheckDailyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckDaily not implemented")
}
func (UnimplementedEventIServer) mustEmbedUnimplementedEventIServer() {}

// UnsafeEventIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventIServer will
// result in compilation errors.
type UnsafeEventIServer interface {
	mustEmbedUnimplementedEventIServer()
}

func RegisterEventIServer(s grpc.ServiceRegistrar, srv EventIServer) {
	s.RegisterService(&EventI_ServiceDesc, srv)
}

func _EventI_UpdateEventProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEventProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventIServer).UpdateEventProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventI/UpdateEventProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventIServer).UpdateEventProgress(ctx, req.(*UpdateEventProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventI_CheckDaily_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckDailyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventIServer).CheckDaily(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventI/CheckDaily",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventIServer).CheckDaily(ctx, req.(*CheckDailyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EventI_ServiceDesc is the grpc.ServiceDesc for EventI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "event.EventI",
	HandlerType: (*EventIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateEventProgress",
			Handler:    _EventI_UpdateEventProgress_Handler,
		},
		{
			MethodName: "CheckDaily",
			Handler:    _EventI_CheckDaily_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/eventi.proto",
}
