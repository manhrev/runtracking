// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/manhrev/runtracking/backend/event/pkg/ent/event"
	"github.com/manhrev/runtracking/backend/event/pkg/ent/eventgroupz"
	"github.com/manhrev/runtracking/backend/event/pkg/ent/participate"
	"github.com/manhrev/runtracking/backend/event/pkg/ent/predicate"
)

// EventGroupzQuery is the builder for querying EventGroupz entities.
type EventGroupzQuery struct {
	config
	ctx              *QueryContext
	order            []eventgroupz.Order
	inters           []Interceptor
	predicates       []predicate.EventGroupz
	withEvent        *EventQuery
	withParticipates *ParticipateQuery
	modifiers        []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EventGroupzQuery builder.
func (egq *EventGroupzQuery) Where(ps ...predicate.EventGroupz) *EventGroupzQuery {
	egq.predicates = append(egq.predicates, ps...)
	return egq
}

// Limit the number of records to be returned by this query.
func (egq *EventGroupzQuery) Limit(limit int) *EventGroupzQuery {
	egq.ctx.Limit = &limit
	return egq
}

// Offset to start from.
func (egq *EventGroupzQuery) Offset(offset int) *EventGroupzQuery {
	egq.ctx.Offset = &offset
	return egq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (egq *EventGroupzQuery) Unique(unique bool) *EventGroupzQuery {
	egq.ctx.Unique = &unique
	return egq
}

// Order specifies how the records should be ordered.
func (egq *EventGroupzQuery) Order(o ...eventgroupz.Order) *EventGroupzQuery {
	egq.order = append(egq.order, o...)
	return egq
}

// QueryEvent chains the current query on the "event" edge.
func (egq *EventGroupzQuery) QueryEvent() *EventQuery {
	query := (&EventClient{config: egq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := egq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := egq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(eventgroupz.Table, eventgroupz.FieldID, selector),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, eventgroupz.EventTable, eventgroupz.EventPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(egq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryParticipates chains the current query on the "participates" edge.
func (egq *EventGroupzQuery) QueryParticipates() *ParticipateQuery {
	query := (&ParticipateClient{config: egq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := egq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := egq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(eventgroupz.Table, eventgroupz.FieldID, selector),
			sqlgraph.To(participate.Table, participate.EventGroupColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, eventgroupz.ParticipatesTable, eventgroupz.ParticipatesColumn),
		)
		fromU = sqlgraph.SetNeighbors(egq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first EventGroupz entity from the query.
// Returns a *NotFoundError when no EventGroupz was found.
func (egq *EventGroupzQuery) First(ctx context.Context) (*EventGroupz, error) {
	nodes, err := egq.Limit(1).All(setContextOp(ctx, egq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{eventgroupz.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (egq *EventGroupzQuery) FirstX(ctx context.Context) *EventGroupz {
	node, err := egq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first EventGroupz ID from the query.
// Returns a *NotFoundError when no EventGroupz ID was found.
func (egq *EventGroupzQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = egq.Limit(1).IDs(setContextOp(ctx, egq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{eventgroupz.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (egq *EventGroupzQuery) FirstIDX(ctx context.Context) int64 {
	id, err := egq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single EventGroupz entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one EventGroupz entity is found.
// Returns a *NotFoundError when no EventGroupz entities are found.
func (egq *EventGroupzQuery) Only(ctx context.Context) (*EventGroupz, error) {
	nodes, err := egq.Limit(2).All(setContextOp(ctx, egq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{eventgroupz.Label}
	default:
		return nil, &NotSingularError{eventgroupz.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (egq *EventGroupzQuery) OnlyX(ctx context.Context) *EventGroupz {
	node, err := egq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only EventGroupz ID in the query.
// Returns a *NotSingularError when more than one EventGroupz ID is found.
// Returns a *NotFoundError when no entities are found.
func (egq *EventGroupzQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = egq.Limit(2).IDs(setContextOp(ctx, egq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{eventgroupz.Label}
	default:
		err = &NotSingularError{eventgroupz.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (egq *EventGroupzQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := egq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of EventGroupzs.
func (egq *EventGroupzQuery) All(ctx context.Context) ([]*EventGroupz, error) {
	ctx = setContextOp(ctx, egq.ctx, "All")
	if err := egq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*EventGroupz, *EventGroupzQuery]()
	return withInterceptors[[]*EventGroupz](ctx, egq, qr, egq.inters)
}

// AllX is like All, but panics if an error occurs.
func (egq *EventGroupzQuery) AllX(ctx context.Context) []*EventGroupz {
	nodes, err := egq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of EventGroupz IDs.
func (egq *EventGroupzQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if egq.ctx.Unique == nil && egq.path != nil {
		egq.Unique(true)
	}
	ctx = setContextOp(ctx, egq.ctx, "IDs")
	if err = egq.Select(eventgroupz.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (egq *EventGroupzQuery) IDsX(ctx context.Context) []int64 {
	ids, err := egq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (egq *EventGroupzQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, egq.ctx, "Count")
	if err := egq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, egq, querierCount[*EventGroupzQuery](), egq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (egq *EventGroupzQuery) CountX(ctx context.Context) int {
	count, err := egq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (egq *EventGroupzQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, egq.ctx, "Exist")
	switch _, err := egq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (egq *EventGroupzQuery) ExistX(ctx context.Context) bool {
	exist, err := egq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EventGroupzQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (egq *EventGroupzQuery) Clone() *EventGroupzQuery {
	if egq == nil {
		return nil
	}
	return &EventGroupzQuery{
		config:           egq.config,
		ctx:              egq.ctx.Clone(),
		order:            append([]eventgroupz.Order{}, egq.order...),
		inters:           append([]Interceptor{}, egq.inters...),
		predicates:       append([]predicate.EventGroupz{}, egq.predicates...),
		withEvent:        egq.withEvent.Clone(),
		withParticipates: egq.withParticipates.Clone(),
		// clone intermediate query.
		sql:  egq.sql.Clone(),
		path: egq.path,
	}
}

// WithEvent tells the query-builder to eager-load the nodes that are connected to
// the "event" edge. The optional arguments are used to configure the query builder of the edge.
func (egq *EventGroupzQuery) WithEvent(opts ...func(*EventQuery)) *EventGroupzQuery {
	query := (&EventClient{config: egq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	egq.withEvent = query
	return egq
}

// WithParticipates tells the query-builder to eager-load the nodes that are connected to
// the "participates" edge. The optional arguments are used to configure the query builder of the edge.
func (egq *EventGroupzQuery) WithParticipates(opts ...func(*ParticipateQuery)) *EventGroupzQuery {
	query := (&ParticipateClient{config: egq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	egq.withParticipates = query
	return egq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
func (egq *EventGroupzQuery) GroupBy(field string, fields ...string) *EventGroupzGroupBy {
	egq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &EventGroupzGroupBy{build: egq}
	grbuild.flds = &egq.ctx.Fields
	grbuild.label = eventgroupz.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
func (egq *EventGroupzQuery) Select(fields ...string) *EventGroupzSelect {
	egq.ctx.Fields = append(egq.ctx.Fields, fields...)
	sbuild := &EventGroupzSelect{EventGroupzQuery: egq}
	sbuild.label = eventgroupz.Label
	sbuild.flds, sbuild.scan = &egq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a EventGroupzSelect configured with the given aggregations.
func (egq *EventGroupzQuery) Aggregate(fns ...AggregateFunc) *EventGroupzSelect {
	return egq.Select().Aggregate(fns...)
}

func (egq *EventGroupzQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range egq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, egq); err != nil {
				return err
			}
		}
	}
	for _, f := range egq.ctx.Fields {
		if !eventgroupz.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if egq.path != nil {
		prev, err := egq.path(ctx)
		if err != nil {
			return err
		}
		egq.sql = prev
	}
	return nil
}

func (egq *EventGroupzQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*EventGroupz, error) {
	var (
		nodes       = []*EventGroupz{}
		_spec       = egq.querySpec()
		loadedTypes = [2]bool{
			egq.withEvent != nil,
			egq.withParticipates != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*EventGroupz).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &EventGroupz{config: egq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(egq.modifiers) > 0 {
		_spec.Modifiers = egq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, egq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := egq.withEvent; query != nil {
		if err := egq.loadEvent(ctx, query, nodes,
			func(n *EventGroupz) { n.Edges.Event = []*Event{} },
			func(n *EventGroupz, e *Event) { n.Edges.Event = append(n.Edges.Event, e) }); err != nil {
			return nil, err
		}
	}
	if query := egq.withParticipates; query != nil {
		if err := egq.loadParticipates(ctx, query, nodes,
			func(n *EventGroupz) { n.Edges.Participates = []*Participate{} },
			func(n *EventGroupz, e *Participate) { n.Edges.Participates = append(n.Edges.Participates, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (egq *EventGroupzQuery) loadEvent(ctx context.Context, query *EventQuery, nodes []*EventGroupz, init func(*EventGroupz), assign func(*EventGroupz, *Event)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int64]*EventGroupz)
	nids := make(map[int64]map[*EventGroupz]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(eventgroupz.EventTable)
		s.Join(joinT).On(s.C(event.FieldID), joinT.C(eventgroupz.EventPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(eventgroupz.EventPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(eventgroupz.EventPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullInt64).Int64
				inValue := values[1].(*sql.NullInt64).Int64
				if nids[inValue] == nil {
					nids[inValue] = map[*EventGroupz]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Event](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "event" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (egq *EventGroupzQuery) loadParticipates(ctx context.Context, query *ParticipateQuery, nodes []*EventGroupz, init func(*EventGroupz), assign func(*EventGroupz, *Participate)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*EventGroupz)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.Participate(func(s *sql.Selector) {
		s.Where(sql.InValues(eventgroupz.ParticipatesColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.EventGroupID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "event_group_id" returned %v for node %v`, fk, n)
		}
		assign(node, n)
	}
	return nil
}

func (egq *EventGroupzQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := egq.querySpec()
	if len(egq.modifiers) > 0 {
		_spec.Modifiers = egq.modifiers
	}
	_spec.Node.Columns = egq.ctx.Fields
	if len(egq.ctx.Fields) > 0 {
		_spec.Unique = egq.ctx.Unique != nil && *egq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, egq.driver, _spec)
}

func (egq *EventGroupzQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(eventgroupz.Table, eventgroupz.Columns, sqlgraph.NewFieldSpec(eventgroupz.FieldID, field.TypeInt64))
	_spec.From = egq.sql
	if unique := egq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if egq.path != nil {
		_spec.Unique = true
	}
	if fields := egq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, eventgroupz.FieldID)
		for i := range fields {
			if fields[i] != eventgroupz.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := egq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := egq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := egq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := egq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (egq *EventGroupzQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(egq.driver.Dialect())
	t1 := builder.Table(eventgroupz.Table)
	columns := egq.ctx.Fields
	if len(columns) == 0 {
		columns = eventgroupz.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if egq.sql != nil {
		selector = egq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if egq.ctx.Unique != nil && *egq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range egq.modifiers {
		m(selector)
	}
	for _, p := range egq.predicates {
		p(selector)
	}
	for _, p := range egq.order {
		p(selector)
	}
	if offset := egq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := egq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (egq *EventGroupzQuery) Modify(modifiers ...func(s *sql.Selector)) *EventGroupzSelect {
	egq.modifiers = append(egq.modifiers, modifiers...)
	return egq.Select()
}

// EventGroupzGroupBy is the group-by builder for EventGroupz entities.
type EventGroupzGroupBy struct {
	selector
	build *EventGroupzQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (eggb *EventGroupzGroupBy) Aggregate(fns ...AggregateFunc) *EventGroupzGroupBy {
	eggb.fns = append(eggb.fns, fns...)
	return eggb
}

// Scan applies the selector query and scans the result into the given value.
func (eggb *EventGroupzGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, eggb.build.ctx, "GroupBy")
	if err := eggb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EventGroupzQuery, *EventGroupzGroupBy](ctx, eggb.build, eggb, eggb.build.inters, v)
}

func (eggb *EventGroupzGroupBy) sqlScan(ctx context.Context, root *EventGroupzQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(eggb.fns))
	for _, fn := range eggb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*eggb.flds)+len(eggb.fns))
		for _, f := range *eggb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*eggb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := eggb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// EventGroupzSelect is the builder for selecting fields of EventGroupz entities.
type EventGroupzSelect struct {
	*EventGroupzQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (egs *EventGroupzSelect) Aggregate(fns ...AggregateFunc) *EventGroupzSelect {
	egs.fns = append(egs.fns, fns...)
	return egs
}

// Scan applies the selector query and scans the result into the given value.
func (egs *EventGroupzSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, egs.ctx, "Select")
	if err := egs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EventGroupzQuery, *EventGroupzSelect](ctx, egs.EventGroupzQuery, egs, egs.inters, v)
}

func (egs *EventGroupzSelect) sqlScan(ctx context.Context, root *EventGroupzQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(egs.fns))
	for _, fn := range egs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*egs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := egs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (egs *EventGroupzSelect) Modify(modifiers ...func(s *sql.Selector)) *EventGroupzSelect {
	egs.modifiers = append(egs.modifiers, modifiers...)
	return egs
}
