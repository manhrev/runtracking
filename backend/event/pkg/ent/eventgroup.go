// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/manhrev/runtracking/backend/event/pkg/ent/event"
	"github.com/manhrev/runtracking/backend/event/pkg/ent/eventgroup"
)

// EventGroup is the model entity for the EventGroup schema.
type EventGroup struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// GroupID holds the value of the "group_id" field.
	GroupID int64 `json:"group_id,omitempty"`
	// JoinedAt holds the value of the "joined_at" field.
	JoinedAt time.Time `json:"joined_at,omitempty"`
	// Status holds the value of the "status" field.
	Status int64 `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EventGroupQuery when eager-loading is set.
	Edges        EventGroupEdges `json:"edges"`
	event_groups *int64
	selectValues sql.SelectValues
}

// EventGroupEdges holds the relations/edges for other nodes in the graph.
type EventGroupEdges struct {
	// Event holds the value of the event edge.
	Event *Event `json:"event,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventGroupEdges) EventOrErr() (*Event, error) {
	if e.loadedTypes[0] {
		if e.Event == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: event.Label}
		}
		return e.Event, nil
	}
	return nil, &NotLoadedError{edge: "event"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EventGroup) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case eventgroup.FieldID, eventgroup.FieldGroupID, eventgroup.FieldStatus:
			values[i] = new(sql.NullInt64)
		case eventgroup.FieldJoinedAt:
			values[i] = new(sql.NullTime)
		case eventgroup.ForeignKeys[0]: // event_groups
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EventGroup fields.
func (eg *EventGroup) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case eventgroup.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			eg.ID = int64(value.Int64)
		case eventgroup.FieldGroupID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field group_id", values[i])
			} else if value.Valid {
				eg.GroupID = value.Int64
			}
		case eventgroup.FieldJoinedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field joined_at", values[i])
			} else if value.Valid {
				eg.JoinedAt = value.Time
			}
		case eventgroup.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				eg.Status = value.Int64
			}
		case eventgroup.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field event_groups", value)
			} else if value.Valid {
				eg.event_groups = new(int64)
				*eg.event_groups = int64(value.Int64)
			}
		default:
			eg.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EventGroup.
// This includes values selected through modifiers, order, etc.
func (eg *EventGroup) Value(name string) (ent.Value, error) {
	return eg.selectValues.Get(name)
}

// QueryEvent queries the "event" edge of the EventGroup entity.
func (eg *EventGroup) QueryEvent() *EventQuery {
	return NewEventGroupClient(eg.config).QueryEvent(eg)
}

// Update returns a builder for updating this EventGroup.
// Note that you need to call EventGroup.Unwrap() before calling this method if this EventGroup
// was returned from a transaction, and the transaction was committed or rolled back.
func (eg *EventGroup) Update() *EventGroupUpdateOne {
	return NewEventGroupClient(eg.config).UpdateOne(eg)
}

// Unwrap unwraps the EventGroup entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (eg *EventGroup) Unwrap() *EventGroup {
	_tx, ok := eg.config.driver.(*txDriver)
	if !ok {
		panic("ent: EventGroup is not a transactional entity")
	}
	eg.config.driver = _tx.drv
	return eg
}

// String implements the fmt.Stringer.
func (eg *EventGroup) String() string {
	var builder strings.Builder
	builder.WriteString("EventGroup(")
	builder.WriteString(fmt.Sprintf("id=%v, ", eg.ID))
	builder.WriteString("group_id=")
	builder.WriteString(fmt.Sprintf("%v", eg.GroupID))
	builder.WriteString(", ")
	builder.WriteString("joined_at=")
	builder.WriteString(eg.JoinedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", eg.Status))
	builder.WriteByte(')')
	return builder.String()
}

// EventGroups is a parsable slice of EventGroup.
type EventGroups []*EventGroup
