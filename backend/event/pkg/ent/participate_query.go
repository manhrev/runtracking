// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/manhrev/runtracking/backend/event/pkg/ent/event"
	"github.com/manhrev/runtracking/backend/event/pkg/ent/eventgroupz"
	"github.com/manhrev/runtracking/backend/event/pkg/ent/participate"
	"github.com/manhrev/runtracking/backend/event/pkg/ent/predicate"
)

// ParticipateQuery is the builder for querying Participate entities.
type ParticipateQuery struct {
	config
	ctx            *QueryContext
	order          []participate.Order
	inters         []Interceptor
	predicates     []predicate.Participate
	withEvent      *EventQuery
	withEventGroup *EventGroupzQuery
	modifiers      []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ParticipateQuery builder.
func (pq *ParticipateQuery) Where(ps ...predicate.Participate) *ParticipateQuery {
	pq.predicates = append(pq.predicates, ps...)
	return pq
}

// Limit the number of records to be returned by this query.
func (pq *ParticipateQuery) Limit(limit int) *ParticipateQuery {
	pq.ctx.Limit = &limit
	return pq
}

// Offset to start from.
func (pq *ParticipateQuery) Offset(offset int) *ParticipateQuery {
	pq.ctx.Offset = &offset
	return pq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pq *ParticipateQuery) Unique(unique bool) *ParticipateQuery {
	pq.ctx.Unique = &unique
	return pq
}

// Order specifies how the records should be ordered.
func (pq *ParticipateQuery) Order(o ...participate.Order) *ParticipateQuery {
	pq.order = append(pq.order, o...)
	return pq
}

// QueryEvent chains the current query on the "event" edge.
func (pq *ParticipateQuery) QueryEvent() *EventQuery {
	query := (&EventClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(participate.Table, participate.EventColumn, selector),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, participate.EventTable, participate.EventColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEventGroup chains the current query on the "event_group" edge.
func (pq *ParticipateQuery) QueryEventGroup() *EventGroupzQuery {
	query := (&EventGroupzClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(participate.Table, participate.EventGroupColumn, selector),
			sqlgraph.To(eventgroupz.Table, eventgroupz.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, participate.EventGroupTable, participate.EventGroupColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Participate entity from the query.
// Returns a *NotFoundError when no Participate was found.
func (pq *ParticipateQuery) First(ctx context.Context) (*Participate, error) {
	nodes, err := pq.Limit(1).All(setContextOp(ctx, pq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{participate.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pq *ParticipateQuery) FirstX(ctx context.Context) *Participate {
	node, err := pq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// Only returns a single Participate entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Participate entity is found.
// Returns a *NotFoundError when no Participate entities are found.
func (pq *ParticipateQuery) Only(ctx context.Context) (*Participate, error) {
	nodes, err := pq.Limit(2).All(setContextOp(ctx, pq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{participate.Label}
	default:
		return nil, &NotSingularError{participate.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pq *ParticipateQuery) OnlyX(ctx context.Context) *Participate {
	node, err := pq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// All executes the query and returns a list of Participates.
func (pq *ParticipateQuery) All(ctx context.Context) ([]*Participate, error) {
	ctx = setContextOp(ctx, pq.ctx, "All")
	if err := pq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Participate, *ParticipateQuery]()
	return withInterceptors[[]*Participate](ctx, pq, qr, pq.inters)
}

// AllX is like All, but panics if an error occurs.
func (pq *ParticipateQuery) AllX(ctx context.Context) []*Participate {
	nodes, err := pq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// Count returns the count of the given query.
func (pq *ParticipateQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, pq.ctx, "Count")
	if err := pq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, pq, querierCount[*ParticipateQuery](), pq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (pq *ParticipateQuery) CountX(ctx context.Context) int {
	count, err := pq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pq *ParticipateQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, pq.ctx, "Exist")
	switch _, err := pq.First(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (pq *ParticipateQuery) ExistX(ctx context.Context) bool {
	exist, err := pq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ParticipateQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pq *ParticipateQuery) Clone() *ParticipateQuery {
	if pq == nil {
		return nil
	}
	return &ParticipateQuery{
		config:         pq.config,
		ctx:            pq.ctx.Clone(),
		order:          append([]participate.Order{}, pq.order...),
		inters:         append([]Interceptor{}, pq.inters...),
		predicates:     append([]predicate.Participate{}, pq.predicates...),
		withEvent:      pq.withEvent.Clone(),
		withEventGroup: pq.withEventGroup.Clone(),
		// clone intermediate query.
		sql:  pq.sql.Clone(),
		path: pq.path,
	}
}

// WithEvent tells the query-builder to eager-load the nodes that are connected to
// the "event" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ParticipateQuery) WithEvent(opts ...func(*EventQuery)) *ParticipateQuery {
	query := (&EventClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withEvent = query
	return pq
}

// WithEventGroup tells the query-builder to eager-load the nodes that are connected to
// the "event_group" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ParticipateQuery) WithEventGroup(opts ...func(*EventGroupzQuery)) *ParticipateQuery {
	query := (&EventGroupzClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withEventGroup = query
	return pq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		EventGroupID int64 `json:"event_group_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Participate.Query().
//		GroupBy(participate.FieldEventGroupID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (pq *ParticipateQuery) GroupBy(field string, fields ...string) *ParticipateGroupBy {
	pq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ParticipateGroupBy{build: pq}
	grbuild.flds = &pq.ctx.Fields
	grbuild.label = participate.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		EventGroupID int64 `json:"event_group_id,omitempty"`
//	}
//
//	client.Participate.Query().
//		Select(participate.FieldEventGroupID).
//		Scan(ctx, &v)
//
func (pq *ParticipateQuery) Select(fields ...string) *ParticipateSelect {
	pq.ctx.Fields = append(pq.ctx.Fields, fields...)
	sbuild := &ParticipateSelect{ParticipateQuery: pq}
	sbuild.label = participate.Label
	sbuild.flds, sbuild.scan = &pq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ParticipateSelect configured with the given aggregations.
func (pq *ParticipateQuery) Aggregate(fns ...AggregateFunc) *ParticipateSelect {
	return pq.Select().Aggregate(fns...)
}

func (pq *ParticipateQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range pq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, pq); err != nil {
				return err
			}
		}
	}
	for _, f := range pq.ctx.Fields {
		if !participate.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pq.path != nil {
		prev, err := pq.path(ctx)
		if err != nil {
			return err
		}
		pq.sql = prev
	}
	return nil
}

func (pq *ParticipateQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Participate, error) {
	var (
		nodes       = []*Participate{}
		_spec       = pq.querySpec()
		loadedTypes = [2]bool{
			pq.withEvent != nil,
			pq.withEventGroup != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Participate).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Participate{config: pq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(pq.modifiers) > 0 {
		_spec.Modifiers = pq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := pq.withEvent; query != nil {
		if err := pq.loadEvent(ctx, query, nodes, nil,
			func(n *Participate, e *Event) { n.Edges.Event = e }); err != nil {
			return nil, err
		}
	}
	if query := pq.withEventGroup; query != nil {
		if err := pq.loadEventGroup(ctx, query, nodes, nil,
			func(n *Participate, e *EventGroupz) { n.Edges.EventGroup = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (pq *ParticipateQuery) loadEvent(ctx context.Context, query *EventQuery, nodes []*Participate, init func(*Participate), assign func(*Participate, *Event)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*Participate)
	for i := range nodes {
		fk := nodes[i].EventID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(event.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "event_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pq *ParticipateQuery) loadEventGroup(ctx context.Context, query *EventGroupzQuery, nodes []*Participate, init func(*Participate), assign func(*Participate, *EventGroupz)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*Participate)
	for i := range nodes {
		fk := nodes[i].EventGroupID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(eventgroupz.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "event_group_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (pq *ParticipateQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pq.querySpec()
	if len(pq.modifiers) > 0 {
		_spec.Modifiers = pq.modifiers
	}
	_spec.Unique = false
	_spec.Node.Columns = nil
	return sqlgraph.CountNodes(ctx, pq.driver, _spec)
}

func (pq *ParticipateQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(participate.Table, participate.Columns, nil)
	_spec.From = pq.sql
	if unique := pq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if pq.path != nil {
		_spec.Unique = true
	}
	if fields := pq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		for i := range fields {
			_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
		}
		if pq.withEvent != nil {
			_spec.Node.AddColumnOnce(participate.FieldEventID)
		}
		if pq.withEventGroup != nil {
			_spec.Node.AddColumnOnce(participate.FieldEventGroupID)
		}
	}
	if ps := pq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pq *ParticipateQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pq.driver.Dialect())
	t1 := builder.Table(participate.Table)
	columns := pq.ctx.Fields
	if len(columns) == 0 {
		columns = participate.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pq.sql != nil {
		selector = pq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pq.ctx.Unique != nil && *pq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range pq.modifiers {
		m(selector)
	}
	for _, p := range pq.predicates {
		p(selector)
	}
	for _, p := range pq.order {
		p(selector)
	}
	if offset := pq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (pq *ParticipateQuery) Modify(modifiers ...func(s *sql.Selector)) *ParticipateSelect {
	pq.modifiers = append(pq.modifiers, modifiers...)
	return pq.Select()
}

// ParticipateGroupBy is the group-by builder for Participate entities.
type ParticipateGroupBy struct {
	selector
	build *ParticipateQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pgb *ParticipateGroupBy) Aggregate(fns ...AggregateFunc) *ParticipateGroupBy {
	pgb.fns = append(pgb.fns, fns...)
	return pgb
}

// Scan applies the selector query and scans the result into the given value.
func (pgb *ParticipateGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pgb.build.ctx, "GroupBy")
	if err := pgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ParticipateQuery, *ParticipateGroupBy](ctx, pgb.build, pgb, pgb.build.inters, v)
}

func (pgb *ParticipateGroupBy) sqlScan(ctx context.Context, root *ParticipateQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pgb.fns))
	for _, fn := range pgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pgb.flds)+len(pgb.fns))
		for _, f := range *pgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ParticipateSelect is the builder for selecting fields of Participate entities.
type ParticipateSelect struct {
	*ParticipateQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ps *ParticipateSelect) Aggregate(fns ...AggregateFunc) *ParticipateSelect {
	ps.fns = append(ps.fns, fns...)
	return ps
}

// Scan applies the selector query and scans the result into the given value.
func (ps *ParticipateSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ps.ctx, "Select")
	if err := ps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ParticipateQuery, *ParticipateSelect](ctx, ps.ParticipateQuery, ps, ps.inters, v)
}

func (ps *ParticipateSelect) sqlScan(ctx context.Context, root *ParticipateQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ps.fns))
	for _, fn := range ps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ps *ParticipateSelect) Modify(modifiers ...func(s *sql.Selector)) *ParticipateSelect {
	ps.modifiers = append(ps.modifiers, modifiers...)
	return ps
}
