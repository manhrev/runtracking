// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/manhrev/runtracking/backend/event/pkg/ent/event"
	"github.com/manhrev/runtracking/backend/event/pkg/ent/eventgroupz"
	"github.com/manhrev/runtracking/backend/event/pkg/ent/participate"
)

// ParticipateCreate is the builder for creating a Participate entity.
type ParticipateCreate struct {
	config
	mutation *ParticipateMutation
	hooks    []Hook
}

// SetEventGroupID sets the "event_group_id" field.
func (pc *ParticipateCreate) SetEventGroupID(i int64) *ParticipateCreate {
	pc.mutation.SetEventGroupID(i)
	return pc
}

// SetEventID sets the "event_id" field.
func (pc *ParticipateCreate) SetEventID(i int64) *ParticipateCreate {
	pc.mutation.SetEventID(i)
	return pc
}

// SetJoinedAt sets the "joined_at" field.
func (pc *ParticipateCreate) SetJoinedAt(t time.Time) *ParticipateCreate {
	pc.mutation.SetJoinedAt(t)
	return pc
}

// SetNillableJoinedAt sets the "joined_at" field if the given value is not nil.
func (pc *ParticipateCreate) SetNillableJoinedAt(t *time.Time) *ParticipateCreate {
	if t != nil {
		pc.SetJoinedAt(*t)
	}
	return pc
}

// SetStatus sets the "status" field.
func (pc *ParticipateCreate) SetStatus(i int64) *ParticipateCreate {
	pc.mutation.SetStatus(i)
	return pc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pc *ParticipateCreate) SetNillableStatus(i *int64) *ParticipateCreate {
	if i != nil {
		pc.SetStatus(*i)
	}
	return pc
}

// SetEvent sets the "event" edge to the Event entity.
func (pc *ParticipateCreate) SetEvent(e *Event) *ParticipateCreate {
	return pc.SetEventID(e.ID)
}

// SetEventGroup sets the "event_group" edge to the EventGroupz entity.
func (pc *ParticipateCreate) SetEventGroup(e *EventGroupz) *ParticipateCreate {
	return pc.SetEventGroupID(e.ID)
}

// Mutation returns the ParticipateMutation object of the builder.
func (pc *ParticipateCreate) Mutation() *ParticipateMutation {
	return pc.mutation
}

// Save creates the Participate in the database.
func (pc *ParticipateCreate) Save(ctx context.Context) (*Participate, error) {
	pc.defaults()
	return withHooks[*Participate, ParticipateMutation](ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ParticipateCreate) SaveX(ctx context.Context) *Participate {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ParticipateCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ParticipateCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *ParticipateCreate) defaults() {
	if _, ok := pc.mutation.JoinedAt(); !ok {
		v := participate.DefaultJoinedAt()
		pc.mutation.SetJoinedAt(v)
	}
	if _, ok := pc.mutation.Status(); !ok {
		v := participate.DefaultStatus
		pc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ParticipateCreate) check() error {
	if _, ok := pc.mutation.EventGroupID(); !ok {
		return &ValidationError{Name: "event_group_id", err: errors.New(`ent: missing required field "Participate.event_group_id"`)}
	}
	if _, ok := pc.mutation.EventID(); !ok {
		return &ValidationError{Name: "event_id", err: errors.New(`ent: missing required field "Participate.event_id"`)}
	}
	if _, ok := pc.mutation.JoinedAt(); !ok {
		return &ValidationError{Name: "joined_at", err: errors.New(`ent: missing required field "Participate.joined_at"`)}
	}
	if _, ok := pc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Participate.status"`)}
	}
	if _, ok := pc.mutation.EventID(); !ok {
		return &ValidationError{Name: "event", err: errors.New(`ent: missing required edge "Participate.event"`)}
	}
	if _, ok := pc.mutation.EventGroupID(); !ok {
		return &ValidationError{Name: "event_group", err: errors.New(`ent: missing required edge "Participate.event_group"`)}
	}
	return nil
}

func (pc *ParticipateCreate) sqlSave(ctx context.Context) (*Participate, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

func (pc *ParticipateCreate) createSpec() (*Participate, *sqlgraph.CreateSpec) {
	var (
		_node = &Participate{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(participate.Table, nil)
	)
	if value, ok := pc.mutation.JoinedAt(); ok {
		_spec.SetField(participate.FieldJoinedAt, field.TypeTime, value)
		_node.JoinedAt = value
	}
	if value, ok := pc.mutation.Status(); ok {
		_spec.SetField(participate.FieldStatus, field.TypeInt64, value)
		_node.Status = value
	}
	if nodes := pc.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   participate.EventTable,
			Columns: []string{participate.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EventID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.EventGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   participate.EventGroupTable,
			Columns: []string{participate.EventGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventgroupz.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EventGroupID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ParticipateCreateBulk is the builder for creating many Participate entities in bulk.
type ParticipateCreateBulk struct {
	config
	builders []*ParticipateCreate
}

// Save creates the Participate entities in the database.
func (pcb *ParticipateCreateBulk) Save(ctx context.Context) ([]*Participate, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Participate, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ParticipateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ParticipateCreateBulk) SaveX(ctx context.Context) []*Participate {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ParticipateCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ParticipateCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
