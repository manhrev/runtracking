// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/manhrev/runtracking/backend/event/pkg/ent/eventgroup"
	"github.com/manhrev/runtracking/backend/event/pkg/ent/predicate"
)

// EventGroupDelete is the builder for deleting a EventGroup entity.
type EventGroupDelete struct {
	config
	hooks    []Hook
	mutation *EventGroupMutation
}

// Where appends a list predicates to the EventGroupDelete builder.
func (egd *EventGroupDelete) Where(ps ...predicate.EventGroup) *EventGroupDelete {
	egd.mutation.Where(ps...)
	return egd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (egd *EventGroupDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, EventGroupMutation](ctx, egd.sqlExec, egd.mutation, egd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (egd *EventGroupDelete) ExecX(ctx context.Context) int {
	n, err := egd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (egd *EventGroupDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(eventgroup.Table, sqlgraph.NewFieldSpec(eventgroup.FieldID, field.TypeInt64))
	if ps := egd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, egd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	egd.mutation.done = true
	return affected, err
}

// EventGroupDeleteOne is the builder for deleting a single EventGroup entity.
type EventGroupDeleteOne struct {
	egd *EventGroupDelete
}

// Where appends a list predicates to the EventGroupDelete builder.
func (egdo *EventGroupDeleteOne) Where(ps ...predicate.EventGroup) *EventGroupDeleteOne {
	egdo.egd.mutation.Where(ps...)
	return egdo
}

// Exec executes the deletion query.
func (egdo *EventGroupDeleteOne) Exec(ctx context.Context) error {
	n, err := egdo.egd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{eventgroup.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (egdo *EventGroupDeleteOne) ExecX(ctx context.Context) {
	if err := egdo.Exec(ctx); err != nil {
		panic(err)
	}
}
