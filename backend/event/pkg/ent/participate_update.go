// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/manhrev/runtracking/backend/event/pkg/ent/event"
	"github.com/manhrev/runtracking/backend/event/pkg/ent/eventgroupz"
	"github.com/manhrev/runtracking/backend/event/pkg/ent/participate"
	"github.com/manhrev/runtracking/backend/event/pkg/ent/predicate"
)

// ParticipateUpdate is the builder for updating Participate entities.
type ParticipateUpdate struct {
	config
	hooks     []Hook
	mutation  *ParticipateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ParticipateUpdate builder.
func (pu *ParticipateUpdate) Where(ps ...predicate.Participate) *ParticipateUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetEventGroupID sets the "event_group_id" field.
func (pu *ParticipateUpdate) SetEventGroupID(i int64) *ParticipateUpdate {
	pu.mutation.SetEventGroupID(i)
	return pu
}

// SetEventID sets the "event_id" field.
func (pu *ParticipateUpdate) SetEventID(i int64) *ParticipateUpdate {
	pu.mutation.SetEventID(i)
	return pu
}

// SetJoinedAt sets the "joined_at" field.
func (pu *ParticipateUpdate) SetJoinedAt(t time.Time) *ParticipateUpdate {
	pu.mutation.SetJoinedAt(t)
	return pu
}

// SetNillableJoinedAt sets the "joined_at" field if the given value is not nil.
func (pu *ParticipateUpdate) SetNillableJoinedAt(t *time.Time) *ParticipateUpdate {
	if t != nil {
		pu.SetJoinedAt(*t)
	}
	return pu
}

// SetStatus sets the "status" field.
func (pu *ParticipateUpdate) SetStatus(i int64) *ParticipateUpdate {
	pu.mutation.ResetStatus()
	pu.mutation.SetStatus(i)
	return pu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pu *ParticipateUpdate) SetNillableStatus(i *int64) *ParticipateUpdate {
	if i != nil {
		pu.SetStatus(*i)
	}
	return pu
}

// AddStatus adds i to the "status" field.
func (pu *ParticipateUpdate) AddStatus(i int64) *ParticipateUpdate {
	pu.mutation.AddStatus(i)
	return pu
}

// SetEvent sets the "event" edge to the Event entity.
func (pu *ParticipateUpdate) SetEvent(e *Event) *ParticipateUpdate {
	return pu.SetEventID(e.ID)
}

// SetEventGroup sets the "event_group" edge to the EventGroupz entity.
func (pu *ParticipateUpdate) SetEventGroup(e *EventGroupz) *ParticipateUpdate {
	return pu.SetEventGroupID(e.ID)
}

// Mutation returns the ParticipateMutation object of the builder.
func (pu *ParticipateUpdate) Mutation() *ParticipateMutation {
	return pu.mutation
}

// ClearEvent clears the "event" edge to the Event entity.
func (pu *ParticipateUpdate) ClearEvent() *ParticipateUpdate {
	pu.mutation.ClearEvent()
	return pu
}

// ClearEventGroup clears the "event_group" edge to the EventGroupz entity.
func (pu *ParticipateUpdate) ClearEventGroup() *ParticipateUpdate {
	pu.mutation.ClearEventGroup()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ParticipateUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ParticipateMutation](ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ParticipateUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ParticipateUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ParticipateUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ParticipateUpdate) check() error {
	if _, ok := pu.mutation.EventID(); pu.mutation.EventCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Participate.event"`)
	}
	if _, ok := pu.mutation.EventGroupID(); pu.mutation.EventGroupCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Participate.event_group"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pu *ParticipateUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ParticipateUpdate {
	pu.modifiers = append(pu.modifiers, modifiers...)
	return pu
}

func (pu *ParticipateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(participate.Table, participate.Columns, sqlgraph.NewFieldSpec(participate.FieldEventID, field.TypeInt64), sqlgraph.NewFieldSpec(participate.FieldEventGroupID, field.TypeInt64))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.JoinedAt(); ok {
		_spec.SetField(participate.FieldJoinedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.Status(); ok {
		_spec.SetField(participate.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedStatus(); ok {
		_spec.AddField(participate.FieldStatus, field.TypeInt64, value)
	}
	if pu.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   participate.EventTable,
			Columns: []string{participate.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   participate.EventTable,
			Columns: []string{participate.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.EventGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   participate.EventGroupTable,
			Columns: []string{participate.EventGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventgroupz.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.EventGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   participate.EventGroupTable,
			Columns: []string{participate.EventGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventgroupz.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{participate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ParticipateUpdateOne is the builder for updating a single Participate entity.
type ParticipateUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ParticipateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEventGroupID sets the "event_group_id" field.
func (puo *ParticipateUpdateOne) SetEventGroupID(i int64) *ParticipateUpdateOne {
	puo.mutation.SetEventGroupID(i)
	return puo
}

// SetEventID sets the "event_id" field.
func (puo *ParticipateUpdateOne) SetEventID(i int64) *ParticipateUpdateOne {
	puo.mutation.SetEventID(i)
	return puo
}

// SetJoinedAt sets the "joined_at" field.
func (puo *ParticipateUpdateOne) SetJoinedAt(t time.Time) *ParticipateUpdateOne {
	puo.mutation.SetJoinedAt(t)
	return puo
}

// SetNillableJoinedAt sets the "joined_at" field if the given value is not nil.
func (puo *ParticipateUpdateOne) SetNillableJoinedAt(t *time.Time) *ParticipateUpdateOne {
	if t != nil {
		puo.SetJoinedAt(*t)
	}
	return puo
}

// SetStatus sets the "status" field.
func (puo *ParticipateUpdateOne) SetStatus(i int64) *ParticipateUpdateOne {
	puo.mutation.ResetStatus()
	puo.mutation.SetStatus(i)
	return puo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (puo *ParticipateUpdateOne) SetNillableStatus(i *int64) *ParticipateUpdateOne {
	if i != nil {
		puo.SetStatus(*i)
	}
	return puo
}

// AddStatus adds i to the "status" field.
func (puo *ParticipateUpdateOne) AddStatus(i int64) *ParticipateUpdateOne {
	puo.mutation.AddStatus(i)
	return puo
}

// SetEvent sets the "event" edge to the Event entity.
func (puo *ParticipateUpdateOne) SetEvent(e *Event) *ParticipateUpdateOne {
	return puo.SetEventID(e.ID)
}

// SetEventGroup sets the "event_group" edge to the EventGroupz entity.
func (puo *ParticipateUpdateOne) SetEventGroup(e *EventGroupz) *ParticipateUpdateOne {
	return puo.SetEventGroupID(e.ID)
}

// Mutation returns the ParticipateMutation object of the builder.
func (puo *ParticipateUpdateOne) Mutation() *ParticipateMutation {
	return puo.mutation
}

// ClearEvent clears the "event" edge to the Event entity.
func (puo *ParticipateUpdateOne) ClearEvent() *ParticipateUpdateOne {
	puo.mutation.ClearEvent()
	return puo
}

// ClearEventGroup clears the "event_group" edge to the EventGroupz entity.
func (puo *ParticipateUpdateOne) ClearEventGroup() *ParticipateUpdateOne {
	puo.mutation.ClearEventGroup()
	return puo
}

// Where appends a list predicates to the ParticipateUpdate builder.
func (puo *ParticipateUpdateOne) Where(ps ...predicate.Participate) *ParticipateUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ParticipateUpdateOne) Select(field string, fields ...string) *ParticipateUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Participate entity.
func (puo *ParticipateUpdateOne) Save(ctx context.Context) (*Participate, error) {
	return withHooks[*Participate, ParticipateMutation](ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ParticipateUpdateOne) SaveX(ctx context.Context) *Participate {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ParticipateUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ParticipateUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ParticipateUpdateOne) check() error {
	if _, ok := puo.mutation.EventID(); puo.mutation.EventCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Participate.event"`)
	}
	if _, ok := puo.mutation.EventGroupID(); puo.mutation.EventGroupCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Participate.event_group"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (puo *ParticipateUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ParticipateUpdateOne {
	puo.modifiers = append(puo.modifiers, modifiers...)
	return puo
}

func (puo *ParticipateUpdateOne) sqlSave(ctx context.Context) (_node *Participate, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(participate.Table, participate.Columns, sqlgraph.NewFieldSpec(participate.FieldEventID, field.TypeInt64), sqlgraph.NewFieldSpec(participate.FieldEventGroupID, field.TypeInt64))
	if id, ok := puo.mutation.EventID(); !ok {
		return nil, &ValidationError{Name: "event_id", err: errors.New(`ent: missing "Participate.event_id" for update`)}
	} else {
		_spec.Node.CompositeID[0].Value = id
	}
	if id, ok := puo.mutation.EventGroupID(); !ok {
		return nil, &ValidationError{Name: "event_group_id", err: errors.New(`ent: missing "Participate.event_group_id" for update`)}
	} else {
		_spec.Node.CompositeID[1].Value = id
	}
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !participate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.JoinedAt(); ok {
		_spec.SetField(participate.FieldJoinedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.Status(); ok {
		_spec.SetField(participate.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedStatus(); ok {
		_spec.AddField(participate.FieldStatus, field.TypeInt64, value)
	}
	if puo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   participate.EventTable,
			Columns: []string{participate.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   participate.EventTable,
			Columns: []string{participate.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.EventGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   participate.EventGroupTable,
			Columns: []string{participate.EventGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventgroupz.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.EventGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   participate.EventGroupTable,
			Columns: []string{participate.EventGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventgroupz.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(puo.modifiers...)
	_node = &Participate{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{participate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
