// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/manhrev/runtracking/backend/event/pkg/ent/event"
	"github.com/manhrev/runtracking/backend/event/pkg/ent/eventgroupz"
	"github.com/manhrev/runtracking/backend/event/pkg/ent/participate"
)

// Participate is the model entity for the Participate schema.
type Participate struct {
	config `json:"-"`
	// EventGroupID holds the value of the "event_group_id" field.
	EventGroupID int64 `json:"event_group_id,omitempty"`
	// EventID holds the value of the "event_id" field.
	EventID int64 `json:"event_id,omitempty"`
	// JoinedAt holds the value of the "joined_at" field.
	JoinedAt time.Time `json:"joined_at,omitempty"`
	// Status holds the value of the "status" field.
	Status int64 `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ParticipateQuery when eager-loading is set.
	Edges        ParticipateEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ParticipateEdges holds the relations/edges for other nodes in the graph.
type ParticipateEdges struct {
	// Event holds the value of the event edge.
	Event *Event `json:"event,omitempty"`
	// EventGroup holds the value of the event_group edge.
	EventGroup *EventGroupz `json:"event_group,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ParticipateEdges) EventOrErr() (*Event, error) {
	if e.loadedTypes[0] {
		if e.Event == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: event.Label}
		}
		return e.Event, nil
	}
	return nil, &NotLoadedError{edge: "event"}
}

// EventGroupOrErr returns the EventGroup value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ParticipateEdges) EventGroupOrErr() (*EventGroupz, error) {
	if e.loadedTypes[1] {
		if e.EventGroup == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: eventgroupz.Label}
		}
		return e.EventGroup, nil
	}
	return nil, &NotLoadedError{edge: "event_group"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Participate) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case participate.FieldEventGroupID, participate.FieldEventID, participate.FieldStatus:
			values[i] = new(sql.NullInt64)
		case participate.FieldJoinedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Participate fields.
func (pa *Participate) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case participate.FieldEventGroupID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field event_group_id", values[i])
			} else if value.Valid {
				pa.EventGroupID = value.Int64
			}
		case participate.FieldEventID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field event_id", values[i])
			} else if value.Valid {
				pa.EventID = value.Int64
			}
		case participate.FieldJoinedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field joined_at", values[i])
			} else if value.Valid {
				pa.JoinedAt = value.Time
			}
		case participate.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				pa.Status = value.Int64
			}
		default:
			pa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Participate.
// This includes values selected through modifiers, order, etc.
func (pa *Participate) Value(name string) (ent.Value, error) {
	return pa.selectValues.Get(name)
}

// QueryEvent queries the "event" edge of the Participate entity.
func (pa *Participate) QueryEvent() *EventQuery {
	return NewParticipateClient(pa.config).QueryEvent(pa)
}

// QueryEventGroup queries the "event_group" edge of the Participate entity.
func (pa *Participate) QueryEventGroup() *EventGroupzQuery {
	return NewParticipateClient(pa.config).QueryEventGroup(pa)
}

// Update returns a builder for updating this Participate.
// Note that you need to call Participate.Unwrap() before calling this method if this Participate
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Participate) Update() *ParticipateUpdateOne {
	return NewParticipateClient(pa.config).UpdateOne(pa)
}

// Unwrap unwraps the Participate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *Participate) Unwrap() *Participate {
	_tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Participate is not a transactional entity")
	}
	pa.config.driver = _tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Participate) String() string {
	var builder strings.Builder
	builder.WriteString("Participate(")
	builder.WriteString("event_group_id=")
	builder.WriteString(fmt.Sprintf("%v", pa.EventGroupID))
	builder.WriteString(", ")
	builder.WriteString("event_id=")
	builder.WriteString(fmt.Sprintf("%v", pa.EventID))
	builder.WriteString(", ")
	builder.WriteString("joined_at=")
	builder.WriteString(pa.JoinedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", pa.Status))
	builder.WriteByte(')')
	return builder.String()
}

// Participates is a parsable slice of Participate.
type Participates []*Participate
