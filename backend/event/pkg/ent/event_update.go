// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/manhrev/runtracking/backend/event/pkg/ent/event"
	"github.com/manhrev/runtracking/backend/event/pkg/ent/eventgroupz"
	"github.com/manhrev/runtracking/backend/event/pkg/ent/predicate"
	"github.com/manhrev/runtracking/backend/event/pkg/ent/subevent"
)

// EventUpdate is the builder for updating Event entities.
type EventUpdate struct {
	config
	hooks     []Hook
	mutation  *EventMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the EventUpdate builder.
func (eu *EventUpdate) Where(ps ...predicate.Event) *EventUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetOwnerGroupID sets the "owner_group_id" field.
func (eu *EventUpdate) SetOwnerGroupID(i int64) *EventUpdate {
	eu.mutation.ResetOwnerGroupID()
	eu.mutation.SetOwnerGroupID(i)
	return eu
}

// AddOwnerGroupID adds i to the "owner_group_id" field.
func (eu *EventUpdate) AddOwnerGroupID(i int64) *EventUpdate {
	eu.mutation.AddOwnerGroupID(i)
	return eu
}

// SetName sets the "name" field.
func (eu *EventUpdate) SetName(s string) *EventUpdate {
	eu.mutation.SetName(s)
	return eu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (eu *EventUpdate) SetNillableName(s *string) *EventUpdate {
	if s != nil {
		eu.SetName(*s)
	}
	return eu
}

// ClearName clears the value of the "name" field.
func (eu *EventUpdate) ClearName() *EventUpdate {
	eu.mutation.ClearName()
	return eu
}

// SetCreatedAt sets the "created_at" field.
func (eu *EventUpdate) SetCreatedAt(t time.Time) *EventUpdate {
	eu.mutation.SetCreatedAt(t)
	return eu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (eu *EventUpdate) SetNillableCreatedAt(t *time.Time) *EventUpdate {
	if t != nil {
		eu.SetCreatedAt(*t)
	}
	return eu
}

// SetStartAt sets the "start_at" field.
func (eu *EventUpdate) SetStartAt(t time.Time) *EventUpdate {
	eu.mutation.SetStartAt(t)
	return eu
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (eu *EventUpdate) SetNillableStartAt(t *time.Time) *EventUpdate {
	if t != nil {
		eu.SetStartAt(*t)
	}
	return eu
}

// SetUpdatedAt sets the "updated_at" field.
func (eu *EventUpdate) SetUpdatedAt(t time.Time) *EventUpdate {
	eu.mutation.SetUpdatedAt(t)
	return eu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (eu *EventUpdate) SetNillableUpdatedAt(t *time.Time) *EventUpdate {
	if t != nil {
		eu.SetUpdatedAt(*t)
	}
	return eu
}

// SetPicture sets the "picture" field.
func (eu *EventUpdate) SetPicture(s string) *EventUpdate {
	eu.mutation.SetPicture(s)
	return eu
}

// SetNillablePicture sets the "picture" field if the given value is not nil.
func (eu *EventUpdate) SetNillablePicture(s *string) *EventUpdate {
	if s != nil {
		eu.SetPicture(*s)
	}
	return eu
}

// SetDescription sets the "description" field.
func (eu *EventUpdate) SetDescription(s string) *EventUpdate {
	eu.mutation.SetDescription(s)
	return eu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (eu *EventUpdate) SetNillableDescription(s *string) *EventUpdate {
	if s != nil {
		eu.SetDescription(*s)
	}
	return eu
}

// ClearDescription clears the value of the "description" field.
func (eu *EventUpdate) ClearDescription() *EventUpdate {
	eu.mutation.ClearDescription()
	return eu
}

// SetStatus sets the "status" field.
func (eu *EventUpdate) SetStatus(i int64) *EventUpdate {
	eu.mutation.ResetStatus()
	eu.mutation.SetStatus(i)
	return eu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (eu *EventUpdate) SetNillableStatus(i *int64) *EventUpdate {
	if i != nil {
		eu.SetStatus(*i)
	}
	return eu
}

// AddStatus adds i to the "status" field.
func (eu *EventUpdate) AddStatus(i int64) *EventUpdate {
	eu.mutation.AddStatus(i)
	return eu
}

// SetIsGlobal sets the "is_global" field.
func (eu *EventUpdate) SetIsGlobal(b bool) *EventUpdate {
	eu.mutation.SetIsGlobal(b)
	return eu
}

// SetNillableIsGlobal sets the "is_global" field if the given value is not nil.
func (eu *EventUpdate) SetNillableIsGlobal(b *bool) *EventUpdate {
	if b != nil {
		eu.SetIsGlobal(*b)
	}
	return eu
}

// SetNumberOfGroups sets the "number_of_groups" field.
func (eu *EventUpdate) SetNumberOfGroups(u uint32) *EventUpdate {
	eu.mutation.ResetNumberOfGroups()
	eu.mutation.SetNumberOfGroups(u)
	return eu
}

// AddNumberOfGroups adds u to the "number_of_groups" field.
func (eu *EventUpdate) AddNumberOfGroups(u int32) *EventUpdate {
	eu.mutation.AddNumberOfGroups(u)
	return eu
}

// AddSubeventIDs adds the "subevents" edge to the SubEvent entity by IDs.
func (eu *EventUpdate) AddSubeventIDs(ids ...int64) *EventUpdate {
	eu.mutation.AddSubeventIDs(ids...)
	return eu
}

// AddSubevents adds the "subevents" edges to the SubEvent entity.
func (eu *EventUpdate) AddSubevents(s ...*SubEvent) *EventUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return eu.AddSubeventIDs(ids...)
}

// AddGroupIDs adds the "groups" edge to the EventGroupz entity by IDs.
func (eu *EventUpdate) AddGroupIDs(ids ...int64) *EventUpdate {
	eu.mutation.AddGroupIDs(ids...)
	return eu
}

// AddGroups adds the "groups" edges to the EventGroupz entity.
func (eu *EventUpdate) AddGroups(e ...*EventGroupz) *EventUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddGroupIDs(ids...)
}

// Mutation returns the EventMutation object of the builder.
func (eu *EventUpdate) Mutation() *EventMutation {
	return eu.mutation
}

// ClearSubevents clears all "subevents" edges to the SubEvent entity.
func (eu *EventUpdate) ClearSubevents() *EventUpdate {
	eu.mutation.ClearSubevents()
	return eu
}

// RemoveSubeventIDs removes the "subevents" edge to SubEvent entities by IDs.
func (eu *EventUpdate) RemoveSubeventIDs(ids ...int64) *EventUpdate {
	eu.mutation.RemoveSubeventIDs(ids...)
	return eu
}

// RemoveSubevents removes "subevents" edges to SubEvent entities.
func (eu *EventUpdate) RemoveSubevents(s ...*SubEvent) *EventUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return eu.RemoveSubeventIDs(ids...)
}

// ClearGroups clears all "groups" edges to the EventGroupz entity.
func (eu *EventUpdate) ClearGroups() *EventUpdate {
	eu.mutation.ClearGroups()
	return eu
}

// RemoveGroupIDs removes the "groups" edge to EventGroupz entities by IDs.
func (eu *EventUpdate) RemoveGroupIDs(ids ...int64) *EventUpdate {
	eu.mutation.RemoveGroupIDs(ids...)
	return eu
}

// RemoveGroups removes "groups" edges to EventGroupz entities.
func (eu *EventUpdate) RemoveGroups(e ...*EventGroupz) *EventUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemoveGroupIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EventUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, EventMutation](ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EventUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EventUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EventUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (eu *EventUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EventUpdate {
	eu.modifiers = append(eu.modifiers, modifiers...)
	return eu
}

func (eu *EventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(event.Table, event.Columns, sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt64))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.OwnerGroupID(); ok {
		_spec.SetField(event.FieldOwnerGroupID, field.TypeInt64, value)
	}
	if value, ok := eu.mutation.AddedOwnerGroupID(); ok {
		_spec.AddField(event.FieldOwnerGroupID, field.TypeInt64, value)
	}
	if value, ok := eu.mutation.Name(); ok {
		_spec.SetField(event.FieldName, field.TypeString, value)
	}
	if eu.mutation.NameCleared() {
		_spec.ClearField(event.FieldName, field.TypeString)
	}
	if value, ok := eu.mutation.CreatedAt(); ok {
		_spec.SetField(event.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := eu.mutation.StartAt(); ok {
		_spec.SetField(event.FieldStartAt, field.TypeTime, value)
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.SetField(event.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := eu.mutation.Picture(); ok {
		_spec.SetField(event.FieldPicture, field.TypeString, value)
	}
	if value, ok := eu.mutation.Description(); ok {
		_spec.SetField(event.FieldDescription, field.TypeString, value)
	}
	if eu.mutation.DescriptionCleared() {
		_spec.ClearField(event.FieldDescription, field.TypeString)
	}
	if value, ok := eu.mutation.Status(); ok {
		_spec.SetField(event.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := eu.mutation.AddedStatus(); ok {
		_spec.AddField(event.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := eu.mutation.IsGlobal(); ok {
		_spec.SetField(event.FieldIsGlobal, field.TypeBool, value)
	}
	if value, ok := eu.mutation.NumberOfGroups(); ok {
		_spec.SetField(event.FieldNumberOfGroups, field.TypeUint32, value)
	}
	if value, ok := eu.mutation.AddedNumberOfGroups(); ok {
		_spec.AddField(event.FieldNumberOfGroups, field.TypeUint32, value)
	}
	if eu.mutation.SubeventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.SubeventsTable,
			Columns: []string{event.SubeventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subevent.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedSubeventsIDs(); len(nodes) > 0 && !eu.mutation.SubeventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.SubeventsTable,
			Columns: []string{event.SubeventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subevent.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.SubeventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.SubeventsTable,
			Columns: []string{event.SubeventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subevent.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   event.GroupsTable,
			Columns: event.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventgroupz.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !eu.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   event.GroupsTable,
			Columns: event.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventgroupz.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   event.GroupsTable,
			Columns: event.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventgroupz.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(eu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EventUpdateOne is the builder for updating a single Event entity.
type EventUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *EventMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetOwnerGroupID sets the "owner_group_id" field.
func (euo *EventUpdateOne) SetOwnerGroupID(i int64) *EventUpdateOne {
	euo.mutation.ResetOwnerGroupID()
	euo.mutation.SetOwnerGroupID(i)
	return euo
}

// AddOwnerGroupID adds i to the "owner_group_id" field.
func (euo *EventUpdateOne) AddOwnerGroupID(i int64) *EventUpdateOne {
	euo.mutation.AddOwnerGroupID(i)
	return euo
}

// SetName sets the "name" field.
func (euo *EventUpdateOne) SetName(s string) *EventUpdateOne {
	euo.mutation.SetName(s)
	return euo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableName(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetName(*s)
	}
	return euo
}

// ClearName clears the value of the "name" field.
func (euo *EventUpdateOne) ClearName() *EventUpdateOne {
	euo.mutation.ClearName()
	return euo
}

// SetCreatedAt sets the "created_at" field.
func (euo *EventUpdateOne) SetCreatedAt(t time.Time) *EventUpdateOne {
	euo.mutation.SetCreatedAt(t)
	return euo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableCreatedAt(t *time.Time) *EventUpdateOne {
	if t != nil {
		euo.SetCreatedAt(*t)
	}
	return euo
}

// SetStartAt sets the "start_at" field.
func (euo *EventUpdateOne) SetStartAt(t time.Time) *EventUpdateOne {
	euo.mutation.SetStartAt(t)
	return euo
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableStartAt(t *time.Time) *EventUpdateOne {
	if t != nil {
		euo.SetStartAt(*t)
	}
	return euo
}

// SetUpdatedAt sets the "updated_at" field.
func (euo *EventUpdateOne) SetUpdatedAt(t time.Time) *EventUpdateOne {
	euo.mutation.SetUpdatedAt(t)
	return euo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableUpdatedAt(t *time.Time) *EventUpdateOne {
	if t != nil {
		euo.SetUpdatedAt(*t)
	}
	return euo
}

// SetPicture sets the "picture" field.
func (euo *EventUpdateOne) SetPicture(s string) *EventUpdateOne {
	euo.mutation.SetPicture(s)
	return euo
}

// SetNillablePicture sets the "picture" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillablePicture(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetPicture(*s)
	}
	return euo
}

// SetDescription sets the "description" field.
func (euo *EventUpdateOne) SetDescription(s string) *EventUpdateOne {
	euo.mutation.SetDescription(s)
	return euo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableDescription(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetDescription(*s)
	}
	return euo
}

// ClearDescription clears the value of the "description" field.
func (euo *EventUpdateOne) ClearDescription() *EventUpdateOne {
	euo.mutation.ClearDescription()
	return euo
}

// SetStatus sets the "status" field.
func (euo *EventUpdateOne) SetStatus(i int64) *EventUpdateOne {
	euo.mutation.ResetStatus()
	euo.mutation.SetStatus(i)
	return euo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableStatus(i *int64) *EventUpdateOne {
	if i != nil {
		euo.SetStatus(*i)
	}
	return euo
}

// AddStatus adds i to the "status" field.
func (euo *EventUpdateOne) AddStatus(i int64) *EventUpdateOne {
	euo.mutation.AddStatus(i)
	return euo
}

// SetIsGlobal sets the "is_global" field.
func (euo *EventUpdateOne) SetIsGlobal(b bool) *EventUpdateOne {
	euo.mutation.SetIsGlobal(b)
	return euo
}

// SetNillableIsGlobal sets the "is_global" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableIsGlobal(b *bool) *EventUpdateOne {
	if b != nil {
		euo.SetIsGlobal(*b)
	}
	return euo
}

// SetNumberOfGroups sets the "number_of_groups" field.
func (euo *EventUpdateOne) SetNumberOfGroups(u uint32) *EventUpdateOne {
	euo.mutation.ResetNumberOfGroups()
	euo.mutation.SetNumberOfGroups(u)
	return euo
}

// AddNumberOfGroups adds u to the "number_of_groups" field.
func (euo *EventUpdateOne) AddNumberOfGroups(u int32) *EventUpdateOne {
	euo.mutation.AddNumberOfGroups(u)
	return euo
}

// AddSubeventIDs adds the "subevents" edge to the SubEvent entity by IDs.
func (euo *EventUpdateOne) AddSubeventIDs(ids ...int64) *EventUpdateOne {
	euo.mutation.AddSubeventIDs(ids...)
	return euo
}

// AddSubevents adds the "subevents" edges to the SubEvent entity.
func (euo *EventUpdateOne) AddSubevents(s ...*SubEvent) *EventUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return euo.AddSubeventIDs(ids...)
}

// AddGroupIDs adds the "groups" edge to the EventGroupz entity by IDs.
func (euo *EventUpdateOne) AddGroupIDs(ids ...int64) *EventUpdateOne {
	euo.mutation.AddGroupIDs(ids...)
	return euo
}

// AddGroups adds the "groups" edges to the EventGroupz entity.
func (euo *EventUpdateOne) AddGroups(e ...*EventGroupz) *EventUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddGroupIDs(ids...)
}

// Mutation returns the EventMutation object of the builder.
func (euo *EventUpdateOne) Mutation() *EventMutation {
	return euo.mutation
}

// ClearSubevents clears all "subevents" edges to the SubEvent entity.
func (euo *EventUpdateOne) ClearSubevents() *EventUpdateOne {
	euo.mutation.ClearSubevents()
	return euo
}

// RemoveSubeventIDs removes the "subevents" edge to SubEvent entities by IDs.
func (euo *EventUpdateOne) RemoveSubeventIDs(ids ...int64) *EventUpdateOne {
	euo.mutation.RemoveSubeventIDs(ids...)
	return euo
}

// RemoveSubevents removes "subevents" edges to SubEvent entities.
func (euo *EventUpdateOne) RemoveSubevents(s ...*SubEvent) *EventUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return euo.RemoveSubeventIDs(ids...)
}

// ClearGroups clears all "groups" edges to the EventGroupz entity.
func (euo *EventUpdateOne) ClearGroups() *EventUpdateOne {
	euo.mutation.ClearGroups()
	return euo
}

// RemoveGroupIDs removes the "groups" edge to EventGroupz entities by IDs.
func (euo *EventUpdateOne) RemoveGroupIDs(ids ...int64) *EventUpdateOne {
	euo.mutation.RemoveGroupIDs(ids...)
	return euo
}

// RemoveGroups removes "groups" edges to EventGroupz entities.
func (euo *EventUpdateOne) RemoveGroups(e ...*EventGroupz) *EventUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemoveGroupIDs(ids...)
}

// Where appends a list predicates to the EventUpdate builder.
func (euo *EventUpdateOne) Where(ps ...predicate.Event) *EventUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EventUpdateOne) Select(field string, fields ...string) *EventUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Event entity.
func (euo *EventUpdateOne) Save(ctx context.Context) (*Event, error) {
	return withHooks[*Event, EventMutation](ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EventUpdateOne) SaveX(ctx context.Context) *Event {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EventUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EventUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (euo *EventUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EventUpdateOne {
	euo.modifiers = append(euo.modifiers, modifiers...)
	return euo
}

func (euo *EventUpdateOne) sqlSave(ctx context.Context) (_node *Event, err error) {
	_spec := sqlgraph.NewUpdateSpec(event.Table, event.Columns, sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt64))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Event.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, event.FieldID)
		for _, f := range fields {
			if !event.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != event.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.OwnerGroupID(); ok {
		_spec.SetField(event.FieldOwnerGroupID, field.TypeInt64, value)
	}
	if value, ok := euo.mutation.AddedOwnerGroupID(); ok {
		_spec.AddField(event.FieldOwnerGroupID, field.TypeInt64, value)
	}
	if value, ok := euo.mutation.Name(); ok {
		_spec.SetField(event.FieldName, field.TypeString, value)
	}
	if euo.mutation.NameCleared() {
		_spec.ClearField(event.FieldName, field.TypeString)
	}
	if value, ok := euo.mutation.CreatedAt(); ok {
		_spec.SetField(event.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := euo.mutation.StartAt(); ok {
		_spec.SetField(event.FieldStartAt, field.TypeTime, value)
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.SetField(event.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := euo.mutation.Picture(); ok {
		_spec.SetField(event.FieldPicture, field.TypeString, value)
	}
	if value, ok := euo.mutation.Description(); ok {
		_spec.SetField(event.FieldDescription, field.TypeString, value)
	}
	if euo.mutation.DescriptionCleared() {
		_spec.ClearField(event.FieldDescription, field.TypeString)
	}
	if value, ok := euo.mutation.Status(); ok {
		_spec.SetField(event.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := euo.mutation.AddedStatus(); ok {
		_spec.AddField(event.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := euo.mutation.IsGlobal(); ok {
		_spec.SetField(event.FieldIsGlobal, field.TypeBool, value)
	}
	if value, ok := euo.mutation.NumberOfGroups(); ok {
		_spec.SetField(event.FieldNumberOfGroups, field.TypeUint32, value)
	}
	if value, ok := euo.mutation.AddedNumberOfGroups(); ok {
		_spec.AddField(event.FieldNumberOfGroups, field.TypeUint32, value)
	}
	if euo.mutation.SubeventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.SubeventsTable,
			Columns: []string{event.SubeventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subevent.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedSubeventsIDs(); len(nodes) > 0 && !euo.mutation.SubeventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.SubeventsTable,
			Columns: []string{event.SubeventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subevent.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.SubeventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.SubeventsTable,
			Columns: []string{event.SubeventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subevent.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   event.GroupsTable,
			Columns: event.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventgroupz.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !euo.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   event.GroupsTable,
			Columns: event.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventgroupz.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   event.GroupsTable,
			Columns: event.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventgroupz.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(euo.modifiers...)
	_node = &Event{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
