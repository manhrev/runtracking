// Code generated by ent, DO NOT EDIT.

package memberprogress

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/manhrev/runtracking/backend/event/pkg/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.MemberProgress {
	return predicate.MemberProgress(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.MemberProgress {
	return predicate.MemberProgress(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.MemberProgress {
	return predicate.MemberProgress(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.MemberProgress {
	return predicate.MemberProgress(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.MemberProgress {
	return predicate.MemberProgress(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.MemberProgress {
	return predicate.MemberProgress(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.MemberProgress {
	return predicate.MemberProgress(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.MemberProgress {
	return predicate.MemberProgress(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.MemberProgress {
	return predicate.MemberProgress(sql.FieldLTE(FieldID, id))
}

// MemberID applies equality check predicate on the "member_id" field. It's identical to MemberIDEQ.
func MemberID(v int64) predicate.MemberProgress {
	return predicate.MemberProgress(sql.FieldEQ(FieldMemberID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int64) predicate.MemberProgress {
	return predicate.MemberProgress(sql.FieldEQ(FieldUserID, v))
}

// Progress applies equality check predicate on the "progress" field. It's identical to ProgressEQ.
func Progress(v int64) predicate.MemberProgress {
	return predicate.MemberProgress(sql.FieldEQ(FieldProgress, v))
}

// MemberIDEQ applies the EQ predicate on the "member_id" field.
func MemberIDEQ(v int64) predicate.MemberProgress {
	return predicate.MemberProgress(sql.FieldEQ(FieldMemberID, v))
}

// MemberIDNEQ applies the NEQ predicate on the "member_id" field.
func MemberIDNEQ(v int64) predicate.MemberProgress {
	return predicate.MemberProgress(sql.FieldNEQ(FieldMemberID, v))
}

// MemberIDIn applies the In predicate on the "member_id" field.
func MemberIDIn(vs ...int64) predicate.MemberProgress {
	return predicate.MemberProgress(sql.FieldIn(FieldMemberID, vs...))
}

// MemberIDNotIn applies the NotIn predicate on the "member_id" field.
func MemberIDNotIn(vs ...int64) predicate.MemberProgress {
	return predicate.MemberProgress(sql.FieldNotIn(FieldMemberID, vs...))
}

// MemberIDGT applies the GT predicate on the "member_id" field.
func MemberIDGT(v int64) predicate.MemberProgress {
	return predicate.MemberProgress(sql.FieldGT(FieldMemberID, v))
}

// MemberIDGTE applies the GTE predicate on the "member_id" field.
func MemberIDGTE(v int64) predicate.MemberProgress {
	return predicate.MemberProgress(sql.FieldGTE(FieldMemberID, v))
}

// MemberIDLT applies the LT predicate on the "member_id" field.
func MemberIDLT(v int64) predicate.MemberProgress {
	return predicate.MemberProgress(sql.FieldLT(FieldMemberID, v))
}

// MemberIDLTE applies the LTE predicate on the "member_id" field.
func MemberIDLTE(v int64) predicate.MemberProgress {
	return predicate.MemberProgress(sql.FieldLTE(FieldMemberID, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int64) predicate.MemberProgress {
	return predicate.MemberProgress(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int64) predicate.MemberProgress {
	return predicate.MemberProgress(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int64) predicate.MemberProgress {
	return predicate.MemberProgress(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int64) predicate.MemberProgress {
	return predicate.MemberProgress(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v int64) predicate.MemberProgress {
	return predicate.MemberProgress(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v int64) predicate.MemberProgress {
	return predicate.MemberProgress(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v int64) predicate.MemberProgress {
	return predicate.MemberProgress(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v int64) predicate.MemberProgress {
	return predicate.MemberProgress(sql.FieldLTE(FieldUserID, v))
}

// ProgressEQ applies the EQ predicate on the "progress" field.
func ProgressEQ(v int64) predicate.MemberProgress {
	return predicate.MemberProgress(sql.FieldEQ(FieldProgress, v))
}

// ProgressNEQ applies the NEQ predicate on the "progress" field.
func ProgressNEQ(v int64) predicate.MemberProgress {
	return predicate.MemberProgress(sql.FieldNEQ(FieldProgress, v))
}

// ProgressIn applies the In predicate on the "progress" field.
func ProgressIn(vs ...int64) predicate.MemberProgress {
	return predicate.MemberProgress(sql.FieldIn(FieldProgress, vs...))
}

// ProgressNotIn applies the NotIn predicate on the "progress" field.
func ProgressNotIn(vs ...int64) predicate.MemberProgress {
	return predicate.MemberProgress(sql.FieldNotIn(FieldProgress, vs...))
}

// ProgressGT applies the GT predicate on the "progress" field.
func ProgressGT(v int64) predicate.MemberProgress {
	return predicate.MemberProgress(sql.FieldGT(FieldProgress, v))
}

// ProgressGTE applies the GTE predicate on the "progress" field.
func ProgressGTE(v int64) predicate.MemberProgress {
	return predicate.MemberProgress(sql.FieldGTE(FieldProgress, v))
}

// ProgressLT applies the LT predicate on the "progress" field.
func ProgressLT(v int64) predicate.MemberProgress {
	return predicate.MemberProgress(sql.FieldLT(FieldProgress, v))
}

// ProgressLTE applies the LTE predicate on the "progress" field.
func ProgressLTE(v int64) predicate.MemberProgress {
	return predicate.MemberProgress(sql.FieldLTE(FieldProgress, v))
}

// HasGroup applies the HasEdge predicate on the "group" edge.
func HasGroup() predicate.MemberProgress {
	return predicate.MemberProgress(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GroupTable, GroupColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGroupWith applies the HasEdge predicate on the "group" edge with a given conditions (other predicates).
func HasGroupWith(preds ...predicate.GroupzProgress) predicate.MemberProgress {
	return predicate.MemberProgress(func(s *sql.Selector) {
		step := newGroupStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MemberProgress) predicate.MemberProgress {
	return predicate.MemberProgress(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MemberProgress) predicate.MemberProgress {
	return predicate.MemberProgress(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MemberProgress) predicate.MemberProgress {
	return predicate.MemberProgress(func(s *sql.Selector) {
		p(s.Not())
	})
}
