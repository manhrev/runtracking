// Code generated by ent, DO NOT EDIT.

package event

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the event type in the database.
	Label = "event"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOwnerGroupID holds the string denoting the owner_group_id field in the database.
	FieldOwnerGroupID = "owner_group_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldStartAt holds the string denoting the start_at field in the database.
	FieldStartAt = "start_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldPicture holds the string denoting the picture field in the database.
	FieldPicture = "picture"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldIsGlobal holds the string denoting the is_global field in the database.
	FieldIsGlobal = "is_global"
	// FieldNumberOfGroups holds the string denoting the number_of_groups field in the database.
	FieldNumberOfGroups = "number_of_groups"
	// EdgeSubevents holds the string denoting the subevents edge name in mutations.
	EdgeSubevents = "subevents"
	// EdgeGroups holds the string denoting the groups edge name in mutations.
	EdgeGroups = "groups"
	// EdgeParticipates holds the string denoting the participates edge name in mutations.
	EdgeParticipates = "participates"
	// Table holds the table name of the event in the database.
	Table = "events"
	// SubeventsTable is the table that holds the subevents relation/edge.
	SubeventsTable = "sub_events"
	// SubeventsInverseTable is the table name for the SubEvent entity.
	// It exists in this package in order to avoid circular dependency with the "subevent" package.
	SubeventsInverseTable = "sub_events"
	// SubeventsColumn is the table column denoting the subevents relation/edge.
	SubeventsColumn = "event_subevents"
	// GroupsTable is the table that holds the groups relation/edge. The primary key declared below.
	GroupsTable = "participates"
	// GroupsInverseTable is the table name for the EventGroupz entity.
	// It exists in this package in order to avoid circular dependency with the "eventgroupz" package.
	GroupsInverseTable = "event_groupzs"
	// ParticipatesTable is the table that holds the participates relation/edge.
	ParticipatesTable = "participates"
	// ParticipatesInverseTable is the table name for the Participate entity.
	// It exists in this package in order to avoid circular dependency with the "participate" package.
	ParticipatesInverseTable = "participates"
	// ParticipatesColumn is the table column denoting the participates relation/edge.
	ParticipatesColumn = "event_id"
)

// Columns holds all SQL columns for event fields.
var Columns = []string{
	FieldID,
	FieldOwnerGroupID,
	FieldName,
	FieldCreatedAt,
	FieldStartAt,
	FieldUpdatedAt,
	FieldPicture,
	FieldDescription,
	FieldStatus,
	FieldIsGlobal,
	FieldNumberOfGroups,
}

var (
	// GroupsPrimaryKey and GroupsColumn2 are the table columns denoting the
	// primary key for the groups relation (M2M).
	GroupsPrimaryKey = []string{"event_id", "event_group_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultStartAt holds the default value on creation for the "start_at" field.
	DefaultStartAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// DefaultPicture holds the default value on creation for the "picture" field.
	DefaultPicture string
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int64
	// DefaultIsGlobal holds the default value on creation for the "is_global" field.
	DefaultIsGlobal bool
)

// Order defines the ordering method for the Event queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByOwnerGroupID orders the results by the owner_group_id field.
func ByOwnerGroupID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldOwnerGroupID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByStartAt orders the results by the start_at field.
func ByStartAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldStartAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByPicture orders the results by the picture field.
func ByPicture(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldPicture, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByIsGlobal orders the results by the is_global field.
func ByIsGlobal(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldIsGlobal, opts...).ToFunc()
}

// ByNumberOfGroups orders the results by the number_of_groups field.
func ByNumberOfGroups(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldNumberOfGroups, opts...).ToFunc()
}

// BySubeventsCount orders the results by subevents count.
func BySubeventsCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSubeventsStep(), opts...)
	}
}

// BySubevents orders the results by subevents terms.
func BySubevents(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubeventsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGroupsCount orders the results by groups count.
func ByGroupsCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGroupsStep(), opts...)
	}
}

// ByGroups orders the results by groups terms.
func ByGroups(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGroupsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByParticipatesCount orders the results by participates count.
func ByParticipatesCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newParticipatesStep(), opts...)
	}
}

// ByParticipates orders the results by participates terms.
func ByParticipates(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParticipatesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSubeventsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubeventsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SubeventsTable, SubeventsColumn),
	)
}
func newGroupsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GroupsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, GroupsTable, GroupsPrimaryKey...),
	)
}
func newParticipatesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ParticipatesInverseTable, ParticipatesColumn),
		sqlgraph.Edge(sqlgraph.O2M, true, ParticipatesTable, ParticipatesColumn),
	)
}
