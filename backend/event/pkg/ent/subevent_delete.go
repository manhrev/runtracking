// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/manhrev/runtracking/backend/event/pkg/ent/predicate"
	"github.com/manhrev/runtracking/backend/event/pkg/ent/subevent"
)

// SubEventDelete is the builder for deleting a SubEvent entity.
type SubEventDelete struct {
	config
	hooks    []Hook
	mutation *SubEventMutation
}

// Where appends a list predicates to the SubEventDelete builder.
func (sed *SubEventDelete) Where(ps ...predicate.SubEvent) *SubEventDelete {
	sed.mutation.Where(ps...)
	return sed
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (sed *SubEventDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, SubEventMutation](ctx, sed.sqlExec, sed.mutation, sed.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (sed *SubEventDelete) ExecX(ctx context.Context) int {
	n, err := sed.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (sed *SubEventDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(subevent.Table, sqlgraph.NewFieldSpec(subevent.FieldID, field.TypeInt64))
	if ps := sed.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, sed.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	sed.mutation.done = true
	return affected, err
}

// SubEventDeleteOne is the builder for deleting a single SubEvent entity.
type SubEventDeleteOne struct {
	sed *SubEventDelete
}

// Where appends a list predicates to the SubEventDelete builder.
func (sedo *SubEventDeleteOne) Where(ps ...predicate.SubEvent) *SubEventDeleteOne {
	sedo.sed.mutation.Where(ps...)
	return sedo
}

// Exec executes the deletion query.
func (sedo *SubEventDeleteOne) Exec(ctx context.Context) error {
	n, err := sedo.sed.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{subevent.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (sedo *SubEventDeleteOne) ExecX(ctx context.Context) {
	if err := sedo.Exec(ctx); err != nil {
		panic(err)
	}
}
