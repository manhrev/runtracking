// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/manhrev/runtracking/backend/event/pkg/ent/groupprogress"
	"github.com/manhrev/runtracking/backend/event/pkg/ent/subevent"
)

// GroupProgress is the model entity for the GroupProgress schema.
type GroupProgress struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// GroupID holds the value of the "group_id" field.
	GroupID int64 `json:"group_id,omitempty"`
	// Progress holds the value of the "progress" field.
	Progress int64 `json:"progress,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GroupProgressQuery when eager-loading is set.
	Edges           GroupProgressEdges `json:"edges"`
	sub_event_group *int64
	selectValues    sql.SelectValues
}

// GroupProgressEdges holds the relations/edges for other nodes in the graph.
type GroupProgressEdges struct {
	// SubEvent holds the value of the sub_event edge.
	SubEvent *SubEvent `json:"sub_event,omitempty"`
	// Member holds the value of the member edge.
	Member []*MemberProgress `json:"member,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// SubEventOrErr returns the SubEvent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GroupProgressEdges) SubEventOrErr() (*SubEvent, error) {
	if e.loadedTypes[0] {
		if e.SubEvent == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: subevent.Label}
		}
		return e.SubEvent, nil
	}
	return nil, &NotLoadedError{edge: "sub_event"}
}

// MemberOrErr returns the Member value or an error if the edge
// was not loaded in eager-loading.
func (e GroupProgressEdges) MemberOrErr() ([]*MemberProgress, error) {
	if e.loadedTypes[1] {
		return e.Member, nil
	}
	return nil, &NotLoadedError{edge: "member"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GroupProgress) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case groupprogress.FieldID, groupprogress.FieldGroupID, groupprogress.FieldProgress:
			values[i] = new(sql.NullInt64)
		case groupprogress.ForeignKeys[0]: // sub_event_group
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GroupProgress fields.
func (gp *GroupProgress) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case groupprogress.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gp.ID = int64(value.Int64)
		case groupprogress.FieldGroupID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field group_id", values[i])
			} else if value.Valid {
				gp.GroupID = value.Int64
			}
		case groupprogress.FieldProgress:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field progress", values[i])
			} else if value.Valid {
				gp.Progress = value.Int64
			}
		case groupprogress.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field sub_event_group", value)
			} else if value.Valid {
				gp.sub_event_group = new(int64)
				*gp.sub_event_group = int64(value.Int64)
			}
		default:
			gp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GroupProgress.
// This includes values selected through modifiers, order, etc.
func (gp *GroupProgress) Value(name string) (ent.Value, error) {
	return gp.selectValues.Get(name)
}

// QuerySubEvent queries the "sub_event" edge of the GroupProgress entity.
func (gp *GroupProgress) QuerySubEvent() *SubEventQuery {
	return NewGroupProgressClient(gp.config).QuerySubEvent(gp)
}

// QueryMember queries the "member" edge of the GroupProgress entity.
func (gp *GroupProgress) QueryMember() *MemberProgressQuery {
	return NewGroupProgressClient(gp.config).QueryMember(gp)
}

// Update returns a builder for updating this GroupProgress.
// Note that you need to call GroupProgress.Unwrap() before calling this method if this GroupProgress
// was returned from a transaction, and the transaction was committed or rolled back.
func (gp *GroupProgress) Update() *GroupProgressUpdateOne {
	return NewGroupProgressClient(gp.config).UpdateOne(gp)
}

// Unwrap unwraps the GroupProgress entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gp *GroupProgress) Unwrap() *GroupProgress {
	_tx, ok := gp.config.driver.(*txDriver)
	if !ok {
		panic("ent: GroupProgress is not a transactional entity")
	}
	gp.config.driver = _tx.drv
	return gp
}

// String implements the fmt.Stringer.
func (gp *GroupProgress) String() string {
	var builder strings.Builder
	builder.WriteString("GroupProgress(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gp.ID))
	builder.WriteString("group_id=")
	builder.WriteString(fmt.Sprintf("%v", gp.GroupID))
	builder.WriteString(", ")
	builder.WriteString("progress=")
	builder.WriteString(fmt.Sprintf("%v", gp.Progress))
	builder.WriteByte(')')
	return builder.String()
}

// GroupProgresses is a parsable slice of GroupProgress.
type GroupProgresses []*GroupProgress
