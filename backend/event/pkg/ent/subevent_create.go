// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/manhrev/runtracking/backend/event/pkg/ent/event"
	"github.com/manhrev/runtracking/backend/event/pkg/ent/groupzprogress"
	"github.com/manhrev/runtracking/backend/event/pkg/ent/subevent"
)

// SubEventCreate is the builder for creating a SubEvent entity.
type SubEventCreate struct {
	config
	mutation *SubEventMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (sec *SubEventCreate) SetName(s string) *SubEventCreate {
	sec.mutation.SetName(s)
	return sec
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sec *SubEventCreate) SetNillableName(s *string) *SubEventCreate {
	if s != nil {
		sec.SetName(*s)
	}
	return sec
}

// SetPicture sets the "picture" field.
func (sec *SubEventCreate) SetPicture(s string) *SubEventCreate {
	sec.mutation.SetPicture(s)
	return sec
}

// SetNillablePicture sets the "picture" field if the given value is not nil.
func (sec *SubEventCreate) SetNillablePicture(s *string) *SubEventCreate {
	if s != nil {
		sec.SetPicture(*s)
	}
	return sec
}

// SetStartDate sets the "start_date" field.
func (sec *SubEventCreate) SetStartDate(t time.Time) *SubEventCreate {
	sec.mutation.SetStartDate(t)
	return sec
}

// SetEndDate sets the "end_date" field.
func (sec *SubEventCreate) SetEndDate(t time.Time) *SubEventCreate {
	sec.mutation.SetEndDate(t)
	return sec
}

// SetDescription sets the "description" field.
func (sec *SubEventCreate) SetDescription(s string) *SubEventCreate {
	sec.mutation.SetDescription(s)
	return sec
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sec *SubEventCreate) SetNillableDescription(s *string) *SubEventCreate {
	if s != nil {
		sec.SetDescription(*s)
	}
	return sec
}

// SetGoal sets the "goal" field.
func (sec *SubEventCreate) SetGoal(i int64) *SubEventCreate {
	sec.mutation.SetGoal(i)
	return sec
}

// SetNillableGoal sets the "goal" field if the given value is not nil.
func (sec *SubEventCreate) SetNillableGoal(i *int64) *SubEventCreate {
	if i != nil {
		sec.SetGoal(*i)
	}
	return sec
}

// SetRuleID sets the "rule_id" field.
func (sec *SubEventCreate) SetRuleID(i int64) *SubEventCreate {
	sec.mutation.SetRuleID(i)
	return sec
}

// SetStatus sets the "status" field.
func (sec *SubEventCreate) SetStatus(i int64) *SubEventCreate {
	sec.mutation.SetStatus(i)
	return sec
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sec *SubEventCreate) SetNillableStatus(i *int64) *SubEventCreate {
	if i != nil {
		sec.SetStatus(*i)
	}
	return sec
}

// SetID sets the "id" field.
func (sec *SubEventCreate) SetID(i int64) *SubEventCreate {
	sec.mutation.SetID(i)
	return sec
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (sec *SubEventCreate) SetEventID(id int64) *SubEventCreate {
	sec.mutation.SetEventID(id)
	return sec
}

// SetNillableEventID sets the "event" edge to the Event entity by ID if the given value is not nil.
func (sec *SubEventCreate) SetNillableEventID(id *int64) *SubEventCreate {
	if id != nil {
		sec = sec.SetEventID(*id)
	}
	return sec
}

// SetEvent sets the "event" edge to the Event entity.
func (sec *SubEventCreate) SetEvent(e *Event) *SubEventCreate {
	return sec.SetEventID(e.ID)
}

// AddGroupIDs adds the "group" edge to the GroupzProgress entity by IDs.
func (sec *SubEventCreate) AddGroupIDs(ids ...int64) *SubEventCreate {
	sec.mutation.AddGroupIDs(ids...)
	return sec
}

// AddGroup adds the "group" edges to the GroupzProgress entity.
func (sec *SubEventCreate) AddGroup(g ...*GroupzProgress) *SubEventCreate {
	ids := make([]int64, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return sec.AddGroupIDs(ids...)
}

// Mutation returns the SubEventMutation object of the builder.
func (sec *SubEventCreate) Mutation() *SubEventMutation {
	return sec.mutation
}

// Save creates the SubEvent in the database.
func (sec *SubEventCreate) Save(ctx context.Context) (*SubEvent, error) {
	sec.defaults()
	return withHooks[*SubEvent, SubEventMutation](ctx, sec.sqlSave, sec.mutation, sec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sec *SubEventCreate) SaveX(ctx context.Context) *SubEvent {
	v, err := sec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sec *SubEventCreate) Exec(ctx context.Context) error {
	_, err := sec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sec *SubEventCreate) ExecX(ctx context.Context) {
	if err := sec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sec *SubEventCreate) defaults() {
	if _, ok := sec.mutation.Picture(); !ok {
		v := subevent.DefaultPicture
		sec.mutation.SetPicture(v)
	}
	if _, ok := sec.mutation.Goal(); !ok {
		v := subevent.DefaultGoal
		sec.mutation.SetGoal(v)
	}
	if _, ok := sec.mutation.Status(); !ok {
		v := subevent.DefaultStatus
		sec.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sec *SubEventCreate) check() error {
	if _, ok := sec.mutation.Picture(); !ok {
		return &ValidationError{Name: "picture", err: errors.New(`ent: missing required field "SubEvent.picture"`)}
	}
	if _, ok := sec.mutation.StartDate(); !ok {
		return &ValidationError{Name: "start_date", err: errors.New(`ent: missing required field "SubEvent.start_date"`)}
	}
	if _, ok := sec.mutation.EndDate(); !ok {
		return &ValidationError{Name: "end_date", err: errors.New(`ent: missing required field "SubEvent.end_date"`)}
	}
	if _, ok := sec.mutation.Goal(); !ok {
		return &ValidationError{Name: "goal", err: errors.New(`ent: missing required field "SubEvent.goal"`)}
	}
	if _, ok := sec.mutation.RuleID(); !ok {
		return &ValidationError{Name: "rule_id", err: errors.New(`ent: missing required field "SubEvent.rule_id"`)}
	}
	if _, ok := sec.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "SubEvent.status"`)}
	}
	return nil
}

func (sec *SubEventCreate) sqlSave(ctx context.Context) (*SubEvent, error) {
	if err := sec.check(); err != nil {
		return nil, err
	}
	_node, _spec := sec.createSpec()
	if err := sqlgraph.CreateNode(ctx, sec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	sec.mutation.id = &_node.ID
	sec.mutation.done = true
	return _node, nil
}

func (sec *SubEventCreate) createSpec() (*SubEvent, *sqlgraph.CreateSpec) {
	var (
		_node = &SubEvent{config: sec.config}
		_spec = sqlgraph.NewCreateSpec(subevent.Table, sqlgraph.NewFieldSpec(subevent.FieldID, field.TypeInt64))
	)
	if id, ok := sec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sec.mutation.Name(); ok {
		_spec.SetField(subevent.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sec.mutation.Picture(); ok {
		_spec.SetField(subevent.FieldPicture, field.TypeString, value)
		_node.Picture = value
	}
	if value, ok := sec.mutation.StartDate(); ok {
		_spec.SetField(subevent.FieldStartDate, field.TypeTime, value)
		_node.StartDate = value
	}
	if value, ok := sec.mutation.EndDate(); ok {
		_spec.SetField(subevent.FieldEndDate, field.TypeTime, value)
		_node.EndDate = value
	}
	if value, ok := sec.mutation.Description(); ok {
		_spec.SetField(subevent.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := sec.mutation.Goal(); ok {
		_spec.SetField(subevent.FieldGoal, field.TypeInt64, value)
		_node.Goal = value
	}
	if value, ok := sec.mutation.RuleID(); ok {
		_spec.SetField(subevent.FieldRuleID, field.TypeInt64, value)
		_node.RuleID = value
	}
	if value, ok := sec.mutation.Status(); ok {
		_spec.SetField(subevent.FieldStatus, field.TypeInt64, value)
		_node.Status = value
	}
	if nodes := sec.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subevent.EventTable,
			Columns: []string{subevent.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.event_subevents = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sec.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subevent.GroupTable,
			Columns: []string{subevent.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupzprogress.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SubEventCreateBulk is the builder for creating many SubEvent entities in bulk.
type SubEventCreateBulk struct {
	config
	builders []*SubEventCreate
}

// Save creates the SubEvent entities in the database.
func (secb *SubEventCreateBulk) Save(ctx context.Context) ([]*SubEvent, error) {
	specs := make([]*sqlgraph.CreateSpec, len(secb.builders))
	nodes := make([]*SubEvent, len(secb.builders))
	mutators := make([]Mutator, len(secb.builders))
	for i := range secb.builders {
		func(i int, root context.Context) {
			builder := secb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubEventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, secb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, secb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, secb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (secb *SubEventCreateBulk) SaveX(ctx context.Context) []*SubEvent {
	v, err := secb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (secb *SubEventCreateBulk) Exec(ctx context.Context) error {
	_, err := secb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (secb *SubEventCreateBulk) ExecX(ctx context.Context) {
	if err := secb.Exec(ctx); err != nil {
		panic(err)
	}
}
