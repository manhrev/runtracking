// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/manhrev/runtracking/backend/event/pkg/ent/event"
	"github.com/manhrev/runtracking/backend/event/pkg/ent/eventgroup"
	"github.com/manhrev/runtracking/backend/event/pkg/ent/predicate"
)

// EventGroupUpdate is the builder for updating EventGroup entities.
type EventGroupUpdate struct {
	config
	hooks     []Hook
	mutation  *EventGroupMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the EventGroupUpdate builder.
func (egu *EventGroupUpdate) Where(ps ...predicate.EventGroup) *EventGroupUpdate {
	egu.mutation.Where(ps...)
	return egu
}

// SetGroupID sets the "group_id" field.
func (egu *EventGroupUpdate) SetGroupID(i int64) *EventGroupUpdate {
	egu.mutation.ResetGroupID()
	egu.mutation.SetGroupID(i)
	return egu
}

// AddGroupID adds i to the "group_id" field.
func (egu *EventGroupUpdate) AddGroupID(i int64) *EventGroupUpdate {
	egu.mutation.AddGroupID(i)
	return egu
}

// SetJoinedAt sets the "joined_at" field.
func (egu *EventGroupUpdate) SetJoinedAt(t time.Time) *EventGroupUpdate {
	egu.mutation.SetJoinedAt(t)
	return egu
}

// SetNillableJoinedAt sets the "joined_at" field if the given value is not nil.
func (egu *EventGroupUpdate) SetNillableJoinedAt(t *time.Time) *EventGroupUpdate {
	if t != nil {
		egu.SetJoinedAt(*t)
	}
	return egu
}

// SetStatus sets the "status" field.
func (egu *EventGroupUpdate) SetStatus(i int64) *EventGroupUpdate {
	egu.mutation.ResetStatus()
	egu.mutation.SetStatus(i)
	return egu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (egu *EventGroupUpdate) SetNillableStatus(i *int64) *EventGroupUpdate {
	if i != nil {
		egu.SetStatus(*i)
	}
	return egu
}

// AddStatus adds i to the "status" field.
func (egu *EventGroupUpdate) AddStatus(i int64) *EventGroupUpdate {
	egu.mutation.AddStatus(i)
	return egu
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (egu *EventGroupUpdate) SetEventID(id int64) *EventGroupUpdate {
	egu.mutation.SetEventID(id)
	return egu
}

// SetNillableEventID sets the "event" edge to the Event entity by ID if the given value is not nil.
func (egu *EventGroupUpdate) SetNillableEventID(id *int64) *EventGroupUpdate {
	if id != nil {
		egu = egu.SetEventID(*id)
	}
	return egu
}

// SetEvent sets the "event" edge to the Event entity.
func (egu *EventGroupUpdate) SetEvent(e *Event) *EventGroupUpdate {
	return egu.SetEventID(e.ID)
}

// Mutation returns the EventGroupMutation object of the builder.
func (egu *EventGroupUpdate) Mutation() *EventGroupMutation {
	return egu.mutation
}

// ClearEvent clears the "event" edge to the Event entity.
func (egu *EventGroupUpdate) ClearEvent() *EventGroupUpdate {
	egu.mutation.ClearEvent()
	return egu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (egu *EventGroupUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, EventGroupMutation](ctx, egu.sqlSave, egu.mutation, egu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (egu *EventGroupUpdate) SaveX(ctx context.Context) int {
	affected, err := egu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (egu *EventGroupUpdate) Exec(ctx context.Context) error {
	_, err := egu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (egu *EventGroupUpdate) ExecX(ctx context.Context) {
	if err := egu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (egu *EventGroupUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EventGroupUpdate {
	egu.modifiers = append(egu.modifiers, modifiers...)
	return egu
}

func (egu *EventGroupUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(eventgroup.Table, eventgroup.Columns, sqlgraph.NewFieldSpec(eventgroup.FieldID, field.TypeInt64))
	if ps := egu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := egu.mutation.GroupID(); ok {
		_spec.SetField(eventgroup.FieldGroupID, field.TypeInt64, value)
	}
	if value, ok := egu.mutation.AddedGroupID(); ok {
		_spec.AddField(eventgroup.FieldGroupID, field.TypeInt64, value)
	}
	if value, ok := egu.mutation.JoinedAt(); ok {
		_spec.SetField(eventgroup.FieldJoinedAt, field.TypeTime, value)
	}
	if value, ok := egu.mutation.Status(); ok {
		_spec.SetField(eventgroup.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := egu.mutation.AddedStatus(); ok {
		_spec.AddField(eventgroup.FieldStatus, field.TypeInt64, value)
	}
	if egu.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventgroup.EventTable,
			Columns: []string{eventgroup.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := egu.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventgroup.EventTable,
			Columns: []string{eventgroup.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(egu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, egu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eventgroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	egu.mutation.done = true
	return n, nil
}

// EventGroupUpdateOne is the builder for updating a single EventGroup entity.
type EventGroupUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *EventGroupMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetGroupID sets the "group_id" field.
func (eguo *EventGroupUpdateOne) SetGroupID(i int64) *EventGroupUpdateOne {
	eguo.mutation.ResetGroupID()
	eguo.mutation.SetGroupID(i)
	return eguo
}

// AddGroupID adds i to the "group_id" field.
func (eguo *EventGroupUpdateOne) AddGroupID(i int64) *EventGroupUpdateOne {
	eguo.mutation.AddGroupID(i)
	return eguo
}

// SetJoinedAt sets the "joined_at" field.
func (eguo *EventGroupUpdateOne) SetJoinedAt(t time.Time) *EventGroupUpdateOne {
	eguo.mutation.SetJoinedAt(t)
	return eguo
}

// SetNillableJoinedAt sets the "joined_at" field if the given value is not nil.
func (eguo *EventGroupUpdateOne) SetNillableJoinedAt(t *time.Time) *EventGroupUpdateOne {
	if t != nil {
		eguo.SetJoinedAt(*t)
	}
	return eguo
}

// SetStatus sets the "status" field.
func (eguo *EventGroupUpdateOne) SetStatus(i int64) *EventGroupUpdateOne {
	eguo.mutation.ResetStatus()
	eguo.mutation.SetStatus(i)
	return eguo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (eguo *EventGroupUpdateOne) SetNillableStatus(i *int64) *EventGroupUpdateOne {
	if i != nil {
		eguo.SetStatus(*i)
	}
	return eguo
}

// AddStatus adds i to the "status" field.
func (eguo *EventGroupUpdateOne) AddStatus(i int64) *EventGroupUpdateOne {
	eguo.mutation.AddStatus(i)
	return eguo
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (eguo *EventGroupUpdateOne) SetEventID(id int64) *EventGroupUpdateOne {
	eguo.mutation.SetEventID(id)
	return eguo
}

// SetNillableEventID sets the "event" edge to the Event entity by ID if the given value is not nil.
func (eguo *EventGroupUpdateOne) SetNillableEventID(id *int64) *EventGroupUpdateOne {
	if id != nil {
		eguo = eguo.SetEventID(*id)
	}
	return eguo
}

// SetEvent sets the "event" edge to the Event entity.
func (eguo *EventGroupUpdateOne) SetEvent(e *Event) *EventGroupUpdateOne {
	return eguo.SetEventID(e.ID)
}

// Mutation returns the EventGroupMutation object of the builder.
func (eguo *EventGroupUpdateOne) Mutation() *EventGroupMutation {
	return eguo.mutation
}

// ClearEvent clears the "event" edge to the Event entity.
func (eguo *EventGroupUpdateOne) ClearEvent() *EventGroupUpdateOne {
	eguo.mutation.ClearEvent()
	return eguo
}

// Where appends a list predicates to the EventGroupUpdate builder.
func (eguo *EventGroupUpdateOne) Where(ps ...predicate.EventGroup) *EventGroupUpdateOne {
	eguo.mutation.Where(ps...)
	return eguo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eguo *EventGroupUpdateOne) Select(field string, fields ...string) *EventGroupUpdateOne {
	eguo.fields = append([]string{field}, fields...)
	return eguo
}

// Save executes the query and returns the updated EventGroup entity.
func (eguo *EventGroupUpdateOne) Save(ctx context.Context) (*EventGroup, error) {
	return withHooks[*EventGroup, EventGroupMutation](ctx, eguo.sqlSave, eguo.mutation, eguo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eguo *EventGroupUpdateOne) SaveX(ctx context.Context) *EventGroup {
	node, err := eguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eguo *EventGroupUpdateOne) Exec(ctx context.Context) error {
	_, err := eguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eguo *EventGroupUpdateOne) ExecX(ctx context.Context) {
	if err := eguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (eguo *EventGroupUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EventGroupUpdateOne {
	eguo.modifiers = append(eguo.modifiers, modifiers...)
	return eguo
}

func (eguo *EventGroupUpdateOne) sqlSave(ctx context.Context) (_node *EventGroup, err error) {
	_spec := sqlgraph.NewUpdateSpec(eventgroup.Table, eventgroup.Columns, sqlgraph.NewFieldSpec(eventgroup.FieldID, field.TypeInt64))
	id, ok := eguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EventGroup.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, eventgroup.FieldID)
		for _, f := range fields {
			if !eventgroup.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != eventgroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eguo.mutation.GroupID(); ok {
		_spec.SetField(eventgroup.FieldGroupID, field.TypeInt64, value)
	}
	if value, ok := eguo.mutation.AddedGroupID(); ok {
		_spec.AddField(eventgroup.FieldGroupID, field.TypeInt64, value)
	}
	if value, ok := eguo.mutation.JoinedAt(); ok {
		_spec.SetField(eventgroup.FieldJoinedAt, field.TypeTime, value)
	}
	if value, ok := eguo.mutation.Status(); ok {
		_spec.SetField(eventgroup.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := eguo.mutation.AddedStatus(); ok {
		_spec.AddField(eventgroup.FieldStatus, field.TypeInt64, value)
	}
	if eguo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventgroup.EventTable,
			Columns: []string{eventgroup.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eguo.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventgroup.EventTable,
			Columns: []string{eventgroup.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(eguo.modifiers...)
	_node = &EventGroup{config: eguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eventgroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	eguo.mutation.done = true
	return _node, nil
}
