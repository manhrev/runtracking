// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/manhrev/runtracking/backend/event/pkg/ent/event"
	"github.com/manhrev/runtracking/backend/event/pkg/ent/eventgroup"
	"github.com/manhrev/runtracking/backend/event/pkg/ent/groupprogress"
	"github.com/manhrev/runtracking/backend/event/pkg/ent/memberprogress"
	"github.com/manhrev/runtracking/backend/event/pkg/ent/predicate"
	"github.com/manhrev/runtracking/backend/event/pkg/ent/subevent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeEvent          = "Event"
	TypeEventGroup     = "EventGroup"
	TypeGroupProgress  = "GroupProgress"
	TypeMemberProgress = "MemberProgress"
	TypeSubEvent       = "SubEvent"
)

// EventMutation represents an operation that mutates the Event nodes in the graph.
type EventMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int64
	owner_group_id      *int64
	addowner_group_id   *int64
	name                *string
	created_at          *time.Time
	updated_at          *time.Time
	picture             *string
	description         *string
	status              *int64
	addstatus           *int64
	is_global           *bool
	number_of_groups    *uint32
	addnumber_of_groups *int32
	clearedFields       map[string]struct{}
	subevents           map[int64]struct{}
	removedsubevents    map[int64]struct{}
	clearedsubevents    bool
	groups              map[int64]struct{}
	removedgroups       map[int64]struct{}
	clearedgroups       bool
	done                bool
	oldValue            func(context.Context) (*Event, error)
	predicates          []predicate.Event
}

var _ ent.Mutation = (*EventMutation)(nil)

// eventOption allows management of the mutation configuration using functional options.
type eventOption func(*EventMutation)

// newEventMutation creates new mutation for the Event entity.
func newEventMutation(c config, op Op, opts ...eventOption) *EventMutation {
	m := &EventMutation{
		config:        c,
		op:            op,
		typ:           TypeEvent,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEventID sets the ID field of the mutation.
func withEventID(id int64) eventOption {
	return func(m *EventMutation) {
		var (
			err   error
			once  sync.Once
			value *Event
		)
		m.oldValue = func(ctx context.Context) (*Event, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Event.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEvent sets the old Event of the mutation.
func withEvent(node *Event) eventOption {
	return func(m *EventMutation) {
		m.oldValue = func(context.Context) (*Event, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EventMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EventMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Event entities.
func (m *EventMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EventMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EventMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Event.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetOwnerGroupID sets the "owner_group_id" field.
func (m *EventMutation) SetOwnerGroupID(i int64) {
	m.owner_group_id = &i
	m.addowner_group_id = nil
}

// OwnerGroupID returns the value of the "owner_group_id" field in the mutation.
func (m *EventMutation) OwnerGroupID() (r int64, exists bool) {
	v := m.owner_group_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOwnerGroupID returns the old "owner_group_id" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldOwnerGroupID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwnerGroupID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwnerGroupID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwnerGroupID: %w", err)
	}
	return oldValue.OwnerGroupID, nil
}

// AddOwnerGroupID adds i to the "owner_group_id" field.
func (m *EventMutation) AddOwnerGroupID(i int64) {
	if m.addowner_group_id != nil {
		*m.addowner_group_id += i
	} else {
		m.addowner_group_id = &i
	}
}

// AddedOwnerGroupID returns the value that was added to the "owner_group_id" field in this mutation.
func (m *EventMutation) AddedOwnerGroupID() (r int64, exists bool) {
	v := m.addowner_group_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetOwnerGroupID resets all changes to the "owner_group_id" field.
func (m *EventMutation) ResetOwnerGroupID() {
	m.owner_group_id = nil
	m.addowner_group_id = nil
}

// SetName sets the "name" field.
func (m *EventMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *EventMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *EventMutation) ClearName() {
	m.name = nil
	m.clearedFields[event.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *EventMutation) NameCleared() bool {
	_, ok := m.clearedFields[event.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *EventMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, event.FieldName)
}

// SetCreatedAt sets the "created_at" field.
func (m *EventMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *EventMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *EventMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *EventMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *EventMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *EventMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetPicture sets the "picture" field.
func (m *EventMutation) SetPicture(s string) {
	m.picture = &s
}

// Picture returns the value of the "picture" field in the mutation.
func (m *EventMutation) Picture() (r string, exists bool) {
	v := m.picture
	if v == nil {
		return
	}
	return *v, true
}

// OldPicture returns the old "picture" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldPicture(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPicture is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPicture requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPicture: %w", err)
	}
	return oldValue.Picture, nil
}

// ResetPicture resets all changes to the "picture" field.
func (m *EventMutation) ResetPicture() {
	m.picture = nil
}

// SetDescription sets the "description" field.
func (m *EventMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *EventMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *EventMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[event.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *EventMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[event.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *EventMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, event.FieldDescription)
}

// SetStatus sets the "status" field.
func (m *EventMutation) SetStatus(i int64) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *EventMutation) Status() (r int64, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldStatus(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *EventMutation) AddStatus(i int64) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *EventMutation) AddedStatus() (r int64, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *EventMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetIsGlobal sets the "is_global" field.
func (m *EventMutation) SetIsGlobal(b bool) {
	m.is_global = &b
}

// IsGlobal returns the value of the "is_global" field in the mutation.
func (m *EventMutation) IsGlobal() (r bool, exists bool) {
	v := m.is_global
	if v == nil {
		return
	}
	return *v, true
}

// OldIsGlobal returns the old "is_global" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldIsGlobal(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsGlobal is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsGlobal requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsGlobal: %w", err)
	}
	return oldValue.IsGlobal, nil
}

// ResetIsGlobal resets all changes to the "is_global" field.
func (m *EventMutation) ResetIsGlobal() {
	m.is_global = nil
}

// SetNumberOfGroups sets the "number_of_groups" field.
func (m *EventMutation) SetNumberOfGroups(u uint32) {
	m.number_of_groups = &u
	m.addnumber_of_groups = nil
}

// NumberOfGroups returns the value of the "number_of_groups" field in the mutation.
func (m *EventMutation) NumberOfGroups() (r uint32, exists bool) {
	v := m.number_of_groups
	if v == nil {
		return
	}
	return *v, true
}

// OldNumberOfGroups returns the old "number_of_groups" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldNumberOfGroups(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNumberOfGroups is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNumberOfGroups requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumberOfGroups: %w", err)
	}
	return oldValue.NumberOfGroups, nil
}

// AddNumberOfGroups adds u to the "number_of_groups" field.
func (m *EventMutation) AddNumberOfGroups(u int32) {
	if m.addnumber_of_groups != nil {
		*m.addnumber_of_groups += u
	} else {
		m.addnumber_of_groups = &u
	}
}

// AddedNumberOfGroups returns the value that was added to the "number_of_groups" field in this mutation.
func (m *EventMutation) AddedNumberOfGroups() (r int32, exists bool) {
	v := m.addnumber_of_groups
	if v == nil {
		return
	}
	return *v, true
}

// ResetNumberOfGroups resets all changes to the "number_of_groups" field.
func (m *EventMutation) ResetNumberOfGroups() {
	m.number_of_groups = nil
	m.addnumber_of_groups = nil
}

// AddSubeventIDs adds the "subevents" edge to the SubEvent entity by ids.
func (m *EventMutation) AddSubeventIDs(ids ...int64) {
	if m.subevents == nil {
		m.subevents = make(map[int64]struct{})
	}
	for i := range ids {
		m.subevents[ids[i]] = struct{}{}
	}
}

// ClearSubevents clears the "subevents" edge to the SubEvent entity.
func (m *EventMutation) ClearSubevents() {
	m.clearedsubevents = true
}

// SubeventsCleared reports if the "subevents" edge to the SubEvent entity was cleared.
func (m *EventMutation) SubeventsCleared() bool {
	return m.clearedsubevents
}

// RemoveSubeventIDs removes the "subevents" edge to the SubEvent entity by IDs.
func (m *EventMutation) RemoveSubeventIDs(ids ...int64) {
	if m.removedsubevents == nil {
		m.removedsubevents = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.subevents, ids[i])
		m.removedsubevents[ids[i]] = struct{}{}
	}
}

// RemovedSubevents returns the removed IDs of the "subevents" edge to the SubEvent entity.
func (m *EventMutation) RemovedSubeventsIDs() (ids []int64) {
	for id := range m.removedsubevents {
		ids = append(ids, id)
	}
	return
}

// SubeventsIDs returns the "subevents" edge IDs in the mutation.
func (m *EventMutation) SubeventsIDs() (ids []int64) {
	for id := range m.subevents {
		ids = append(ids, id)
	}
	return
}

// ResetSubevents resets all changes to the "subevents" edge.
func (m *EventMutation) ResetSubevents() {
	m.subevents = nil
	m.clearedsubevents = false
	m.removedsubevents = nil
}

// AddGroupIDs adds the "groups" edge to the EventGroup entity by ids.
func (m *EventMutation) AddGroupIDs(ids ...int64) {
	if m.groups == nil {
		m.groups = make(map[int64]struct{})
	}
	for i := range ids {
		m.groups[ids[i]] = struct{}{}
	}
}

// ClearGroups clears the "groups" edge to the EventGroup entity.
func (m *EventMutation) ClearGroups() {
	m.clearedgroups = true
}

// GroupsCleared reports if the "groups" edge to the EventGroup entity was cleared.
func (m *EventMutation) GroupsCleared() bool {
	return m.clearedgroups
}

// RemoveGroupIDs removes the "groups" edge to the EventGroup entity by IDs.
func (m *EventMutation) RemoveGroupIDs(ids ...int64) {
	if m.removedgroups == nil {
		m.removedgroups = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.groups, ids[i])
		m.removedgroups[ids[i]] = struct{}{}
	}
}

// RemovedGroups returns the removed IDs of the "groups" edge to the EventGroup entity.
func (m *EventMutation) RemovedGroupsIDs() (ids []int64) {
	for id := range m.removedgroups {
		ids = append(ids, id)
	}
	return
}

// GroupsIDs returns the "groups" edge IDs in the mutation.
func (m *EventMutation) GroupsIDs() (ids []int64) {
	for id := range m.groups {
		ids = append(ids, id)
	}
	return
}

// ResetGroups resets all changes to the "groups" edge.
func (m *EventMutation) ResetGroups() {
	m.groups = nil
	m.clearedgroups = false
	m.removedgroups = nil
}

// Where appends a list predicates to the EventMutation builder.
func (m *EventMutation) Where(ps ...predicate.Event) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EventMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EventMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Event, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EventMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EventMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Event).
func (m *EventMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EventMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.owner_group_id != nil {
		fields = append(fields, event.FieldOwnerGroupID)
	}
	if m.name != nil {
		fields = append(fields, event.FieldName)
	}
	if m.created_at != nil {
		fields = append(fields, event.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, event.FieldUpdatedAt)
	}
	if m.picture != nil {
		fields = append(fields, event.FieldPicture)
	}
	if m.description != nil {
		fields = append(fields, event.FieldDescription)
	}
	if m.status != nil {
		fields = append(fields, event.FieldStatus)
	}
	if m.is_global != nil {
		fields = append(fields, event.FieldIsGlobal)
	}
	if m.number_of_groups != nil {
		fields = append(fields, event.FieldNumberOfGroups)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EventMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case event.FieldOwnerGroupID:
		return m.OwnerGroupID()
	case event.FieldName:
		return m.Name()
	case event.FieldCreatedAt:
		return m.CreatedAt()
	case event.FieldUpdatedAt:
		return m.UpdatedAt()
	case event.FieldPicture:
		return m.Picture()
	case event.FieldDescription:
		return m.Description()
	case event.FieldStatus:
		return m.Status()
	case event.FieldIsGlobal:
		return m.IsGlobal()
	case event.FieldNumberOfGroups:
		return m.NumberOfGroups()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EventMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case event.FieldOwnerGroupID:
		return m.OldOwnerGroupID(ctx)
	case event.FieldName:
		return m.OldName(ctx)
	case event.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case event.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case event.FieldPicture:
		return m.OldPicture(ctx)
	case event.FieldDescription:
		return m.OldDescription(ctx)
	case event.FieldStatus:
		return m.OldStatus(ctx)
	case event.FieldIsGlobal:
		return m.OldIsGlobal(ctx)
	case event.FieldNumberOfGroups:
		return m.OldNumberOfGroups(ctx)
	}
	return nil, fmt.Errorf("unknown Event field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EventMutation) SetField(name string, value ent.Value) error {
	switch name {
	case event.FieldOwnerGroupID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwnerGroupID(v)
		return nil
	case event.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case event.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case event.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case event.FieldPicture:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPicture(v)
		return nil
	case event.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case event.FieldStatus:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case event.FieldIsGlobal:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsGlobal(v)
		return nil
	case event.FieldNumberOfGroups:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumberOfGroups(v)
		return nil
	}
	return fmt.Errorf("unknown Event field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EventMutation) AddedFields() []string {
	var fields []string
	if m.addowner_group_id != nil {
		fields = append(fields, event.FieldOwnerGroupID)
	}
	if m.addstatus != nil {
		fields = append(fields, event.FieldStatus)
	}
	if m.addnumber_of_groups != nil {
		fields = append(fields, event.FieldNumberOfGroups)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EventMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case event.FieldOwnerGroupID:
		return m.AddedOwnerGroupID()
	case event.FieldStatus:
		return m.AddedStatus()
	case event.FieldNumberOfGroups:
		return m.AddedNumberOfGroups()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EventMutation) AddField(name string, value ent.Value) error {
	switch name {
	case event.FieldOwnerGroupID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOwnerGroupID(v)
		return nil
	case event.FieldStatus:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	case event.FieldNumberOfGroups:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNumberOfGroups(v)
		return nil
	}
	return fmt.Errorf("unknown Event numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EventMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(event.FieldName) {
		fields = append(fields, event.FieldName)
	}
	if m.FieldCleared(event.FieldDescription) {
		fields = append(fields, event.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EventMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EventMutation) ClearField(name string) error {
	switch name {
	case event.FieldName:
		m.ClearName()
		return nil
	case event.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown Event nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EventMutation) ResetField(name string) error {
	switch name {
	case event.FieldOwnerGroupID:
		m.ResetOwnerGroupID()
		return nil
	case event.FieldName:
		m.ResetName()
		return nil
	case event.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case event.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case event.FieldPicture:
		m.ResetPicture()
		return nil
	case event.FieldDescription:
		m.ResetDescription()
		return nil
	case event.FieldStatus:
		m.ResetStatus()
		return nil
	case event.FieldIsGlobal:
		m.ResetIsGlobal()
		return nil
	case event.FieldNumberOfGroups:
		m.ResetNumberOfGroups()
		return nil
	}
	return fmt.Errorf("unknown Event field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EventMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.subevents != nil {
		edges = append(edges, event.EdgeSubevents)
	}
	if m.groups != nil {
		edges = append(edges, event.EdgeGroups)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EventMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case event.EdgeSubevents:
		ids := make([]ent.Value, 0, len(m.subevents))
		for id := range m.subevents {
			ids = append(ids, id)
		}
		return ids
	case event.EdgeGroups:
		ids := make([]ent.Value, 0, len(m.groups))
		for id := range m.groups {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EventMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedsubevents != nil {
		edges = append(edges, event.EdgeSubevents)
	}
	if m.removedgroups != nil {
		edges = append(edges, event.EdgeGroups)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EventMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case event.EdgeSubevents:
		ids := make([]ent.Value, 0, len(m.removedsubevents))
		for id := range m.removedsubevents {
			ids = append(ids, id)
		}
		return ids
	case event.EdgeGroups:
		ids := make([]ent.Value, 0, len(m.removedgroups))
		for id := range m.removedgroups {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EventMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedsubevents {
		edges = append(edges, event.EdgeSubevents)
	}
	if m.clearedgroups {
		edges = append(edges, event.EdgeGroups)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EventMutation) EdgeCleared(name string) bool {
	switch name {
	case event.EdgeSubevents:
		return m.clearedsubevents
	case event.EdgeGroups:
		return m.clearedgroups
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EventMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Event unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EventMutation) ResetEdge(name string) error {
	switch name {
	case event.EdgeSubevents:
		m.ResetSubevents()
		return nil
	case event.EdgeGroups:
		m.ResetGroups()
		return nil
	}
	return fmt.Errorf("unknown Event edge %s", name)
}

// EventGroupMutation represents an operation that mutates the EventGroup nodes in the graph.
type EventGroupMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	group_id      *int64
	addgroup_id   *int64
	joined_at     *time.Time
	status        *int64
	addstatus     *int64
	clearedFields map[string]struct{}
	event         *int64
	clearedevent  bool
	done          bool
	oldValue      func(context.Context) (*EventGroup, error)
	predicates    []predicate.EventGroup
}

var _ ent.Mutation = (*EventGroupMutation)(nil)

// eventgroupOption allows management of the mutation configuration using functional options.
type eventgroupOption func(*EventGroupMutation)

// newEventGroupMutation creates new mutation for the EventGroup entity.
func newEventGroupMutation(c config, op Op, opts ...eventgroupOption) *EventGroupMutation {
	m := &EventGroupMutation{
		config:        c,
		op:            op,
		typ:           TypeEventGroup,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEventGroupID sets the ID field of the mutation.
func withEventGroupID(id int64) eventgroupOption {
	return func(m *EventGroupMutation) {
		var (
			err   error
			once  sync.Once
			value *EventGroup
		)
		m.oldValue = func(ctx context.Context) (*EventGroup, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().EventGroup.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEventGroup sets the old EventGroup of the mutation.
func withEventGroup(node *EventGroup) eventgroupOption {
	return func(m *EventGroupMutation) {
		m.oldValue = func(context.Context) (*EventGroup, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EventGroupMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EventGroupMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of EventGroup entities.
func (m *EventGroupMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EventGroupMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EventGroupMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().EventGroup.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetGroupID sets the "group_id" field.
func (m *EventGroupMutation) SetGroupID(i int64) {
	m.group_id = &i
	m.addgroup_id = nil
}

// GroupID returns the value of the "group_id" field in the mutation.
func (m *EventGroupMutation) GroupID() (r int64, exists bool) {
	v := m.group_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGroupID returns the old "group_id" field's value of the EventGroup entity.
// If the EventGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventGroupMutation) OldGroupID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGroupID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGroupID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGroupID: %w", err)
	}
	return oldValue.GroupID, nil
}

// AddGroupID adds i to the "group_id" field.
func (m *EventGroupMutation) AddGroupID(i int64) {
	if m.addgroup_id != nil {
		*m.addgroup_id += i
	} else {
		m.addgroup_id = &i
	}
}

// AddedGroupID returns the value that was added to the "group_id" field in this mutation.
func (m *EventGroupMutation) AddedGroupID() (r int64, exists bool) {
	v := m.addgroup_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetGroupID resets all changes to the "group_id" field.
func (m *EventGroupMutation) ResetGroupID() {
	m.group_id = nil
	m.addgroup_id = nil
}

// SetJoinedAt sets the "joined_at" field.
func (m *EventGroupMutation) SetJoinedAt(t time.Time) {
	m.joined_at = &t
}

// JoinedAt returns the value of the "joined_at" field in the mutation.
func (m *EventGroupMutation) JoinedAt() (r time.Time, exists bool) {
	v := m.joined_at
	if v == nil {
		return
	}
	return *v, true
}

// OldJoinedAt returns the old "joined_at" field's value of the EventGroup entity.
// If the EventGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventGroupMutation) OldJoinedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJoinedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJoinedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJoinedAt: %w", err)
	}
	return oldValue.JoinedAt, nil
}

// ResetJoinedAt resets all changes to the "joined_at" field.
func (m *EventGroupMutation) ResetJoinedAt() {
	m.joined_at = nil
}

// SetStatus sets the "status" field.
func (m *EventGroupMutation) SetStatus(i int64) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *EventGroupMutation) Status() (r int64, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the EventGroup entity.
// If the EventGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventGroupMutation) OldStatus(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *EventGroupMutation) AddStatus(i int64) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *EventGroupMutation) AddedStatus() (r int64, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *EventGroupMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetEventID sets the "event" edge to the Event entity by id.
func (m *EventGroupMutation) SetEventID(id int64) {
	m.event = &id
}

// ClearEvent clears the "event" edge to the Event entity.
func (m *EventGroupMutation) ClearEvent() {
	m.clearedevent = true
}

// EventCleared reports if the "event" edge to the Event entity was cleared.
func (m *EventGroupMutation) EventCleared() bool {
	return m.clearedevent
}

// EventID returns the "event" edge ID in the mutation.
func (m *EventGroupMutation) EventID() (id int64, exists bool) {
	if m.event != nil {
		return *m.event, true
	}
	return
}

// EventIDs returns the "event" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EventID instead. It exists only for internal usage by the builders.
func (m *EventGroupMutation) EventIDs() (ids []int64) {
	if id := m.event; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEvent resets all changes to the "event" edge.
func (m *EventGroupMutation) ResetEvent() {
	m.event = nil
	m.clearedevent = false
}

// Where appends a list predicates to the EventGroupMutation builder.
func (m *EventGroupMutation) Where(ps ...predicate.EventGroup) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EventGroupMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EventGroupMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.EventGroup, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EventGroupMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EventGroupMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (EventGroup).
func (m *EventGroupMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EventGroupMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.group_id != nil {
		fields = append(fields, eventgroup.FieldGroupID)
	}
	if m.joined_at != nil {
		fields = append(fields, eventgroup.FieldJoinedAt)
	}
	if m.status != nil {
		fields = append(fields, eventgroup.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EventGroupMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case eventgroup.FieldGroupID:
		return m.GroupID()
	case eventgroup.FieldJoinedAt:
		return m.JoinedAt()
	case eventgroup.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EventGroupMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case eventgroup.FieldGroupID:
		return m.OldGroupID(ctx)
	case eventgroup.FieldJoinedAt:
		return m.OldJoinedAt(ctx)
	case eventgroup.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown EventGroup field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EventGroupMutation) SetField(name string, value ent.Value) error {
	switch name {
	case eventgroup.FieldGroupID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGroupID(v)
		return nil
	case eventgroup.FieldJoinedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJoinedAt(v)
		return nil
	case eventgroup.FieldStatus:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown EventGroup field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EventGroupMutation) AddedFields() []string {
	var fields []string
	if m.addgroup_id != nil {
		fields = append(fields, eventgroup.FieldGroupID)
	}
	if m.addstatus != nil {
		fields = append(fields, eventgroup.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EventGroupMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case eventgroup.FieldGroupID:
		return m.AddedGroupID()
	case eventgroup.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EventGroupMutation) AddField(name string, value ent.Value) error {
	switch name {
	case eventgroup.FieldGroupID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGroupID(v)
		return nil
	case eventgroup.FieldStatus:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown EventGroup numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EventGroupMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EventGroupMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EventGroupMutation) ClearField(name string) error {
	return fmt.Errorf("unknown EventGroup nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EventGroupMutation) ResetField(name string) error {
	switch name {
	case eventgroup.FieldGroupID:
		m.ResetGroupID()
		return nil
	case eventgroup.FieldJoinedAt:
		m.ResetJoinedAt()
		return nil
	case eventgroup.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown EventGroup field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EventGroupMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.event != nil {
		edges = append(edges, eventgroup.EdgeEvent)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EventGroupMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case eventgroup.EdgeEvent:
		if id := m.event; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EventGroupMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EventGroupMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EventGroupMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedevent {
		edges = append(edges, eventgroup.EdgeEvent)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EventGroupMutation) EdgeCleared(name string) bool {
	switch name {
	case eventgroup.EdgeEvent:
		return m.clearedevent
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EventGroupMutation) ClearEdge(name string) error {
	switch name {
	case eventgroup.EdgeEvent:
		m.ClearEvent()
		return nil
	}
	return fmt.Errorf("unknown EventGroup unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EventGroupMutation) ResetEdge(name string) error {
	switch name {
	case eventgroup.EdgeEvent:
		m.ResetEvent()
		return nil
	}
	return fmt.Errorf("unknown EventGroup edge %s", name)
}

// GroupProgressMutation represents an operation that mutates the GroupProgress nodes in the graph.
type GroupProgressMutation struct {
	config
	op               Op
	typ              string
	id               *int64
	group_id         *int64
	addgroup_id      *int64
	progress         *int64
	addprogress      *int64
	clearedFields    map[string]struct{}
	sub_event        *int64
	clearedsub_event bool
	member           map[int64]struct{}
	removedmember    map[int64]struct{}
	clearedmember    bool
	done             bool
	oldValue         func(context.Context) (*GroupProgress, error)
	predicates       []predicate.GroupProgress
}

var _ ent.Mutation = (*GroupProgressMutation)(nil)

// groupprogressOption allows management of the mutation configuration using functional options.
type groupprogressOption func(*GroupProgressMutation)

// newGroupProgressMutation creates new mutation for the GroupProgress entity.
func newGroupProgressMutation(c config, op Op, opts ...groupprogressOption) *GroupProgressMutation {
	m := &GroupProgressMutation{
		config:        c,
		op:            op,
		typ:           TypeGroupProgress,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGroupProgressID sets the ID field of the mutation.
func withGroupProgressID(id int64) groupprogressOption {
	return func(m *GroupProgressMutation) {
		var (
			err   error
			once  sync.Once
			value *GroupProgress
		)
		m.oldValue = func(ctx context.Context) (*GroupProgress, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GroupProgress.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGroupProgress sets the old GroupProgress of the mutation.
func withGroupProgress(node *GroupProgress) groupprogressOption {
	return func(m *GroupProgressMutation) {
		m.oldValue = func(context.Context) (*GroupProgress, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GroupProgressMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GroupProgressMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of GroupProgress entities.
func (m *GroupProgressMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GroupProgressMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GroupProgressMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().GroupProgress.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetGroupID sets the "group_id" field.
func (m *GroupProgressMutation) SetGroupID(i int64) {
	m.group_id = &i
	m.addgroup_id = nil
}

// GroupID returns the value of the "group_id" field in the mutation.
func (m *GroupProgressMutation) GroupID() (r int64, exists bool) {
	v := m.group_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGroupID returns the old "group_id" field's value of the GroupProgress entity.
// If the GroupProgress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupProgressMutation) OldGroupID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGroupID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGroupID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGroupID: %w", err)
	}
	return oldValue.GroupID, nil
}

// AddGroupID adds i to the "group_id" field.
func (m *GroupProgressMutation) AddGroupID(i int64) {
	if m.addgroup_id != nil {
		*m.addgroup_id += i
	} else {
		m.addgroup_id = &i
	}
}

// AddedGroupID returns the value that was added to the "group_id" field in this mutation.
func (m *GroupProgressMutation) AddedGroupID() (r int64, exists bool) {
	v := m.addgroup_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetGroupID resets all changes to the "group_id" field.
func (m *GroupProgressMutation) ResetGroupID() {
	m.group_id = nil
	m.addgroup_id = nil
}

// SetProgress sets the "progress" field.
func (m *GroupProgressMutation) SetProgress(i int64) {
	m.progress = &i
	m.addprogress = nil
}

// Progress returns the value of the "progress" field in the mutation.
func (m *GroupProgressMutation) Progress() (r int64, exists bool) {
	v := m.progress
	if v == nil {
		return
	}
	return *v, true
}

// OldProgress returns the old "progress" field's value of the GroupProgress entity.
// If the GroupProgress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupProgressMutation) OldProgress(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProgress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProgress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProgress: %w", err)
	}
	return oldValue.Progress, nil
}

// AddProgress adds i to the "progress" field.
func (m *GroupProgressMutation) AddProgress(i int64) {
	if m.addprogress != nil {
		*m.addprogress += i
	} else {
		m.addprogress = &i
	}
}

// AddedProgress returns the value that was added to the "progress" field in this mutation.
func (m *GroupProgressMutation) AddedProgress() (r int64, exists bool) {
	v := m.addprogress
	if v == nil {
		return
	}
	return *v, true
}

// ResetProgress resets all changes to the "progress" field.
func (m *GroupProgressMutation) ResetProgress() {
	m.progress = nil
	m.addprogress = nil
}

// SetSubEventID sets the "sub_event" edge to the SubEvent entity by id.
func (m *GroupProgressMutation) SetSubEventID(id int64) {
	m.sub_event = &id
}

// ClearSubEvent clears the "sub_event" edge to the SubEvent entity.
func (m *GroupProgressMutation) ClearSubEvent() {
	m.clearedsub_event = true
}

// SubEventCleared reports if the "sub_event" edge to the SubEvent entity was cleared.
func (m *GroupProgressMutation) SubEventCleared() bool {
	return m.clearedsub_event
}

// SubEventID returns the "sub_event" edge ID in the mutation.
func (m *GroupProgressMutation) SubEventID() (id int64, exists bool) {
	if m.sub_event != nil {
		return *m.sub_event, true
	}
	return
}

// SubEventIDs returns the "sub_event" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SubEventID instead. It exists only for internal usage by the builders.
func (m *GroupProgressMutation) SubEventIDs() (ids []int64) {
	if id := m.sub_event; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSubEvent resets all changes to the "sub_event" edge.
func (m *GroupProgressMutation) ResetSubEvent() {
	m.sub_event = nil
	m.clearedsub_event = false
}

// AddMemberIDs adds the "member" edge to the MemberProgress entity by ids.
func (m *GroupProgressMutation) AddMemberIDs(ids ...int64) {
	if m.member == nil {
		m.member = make(map[int64]struct{})
	}
	for i := range ids {
		m.member[ids[i]] = struct{}{}
	}
}

// ClearMember clears the "member" edge to the MemberProgress entity.
func (m *GroupProgressMutation) ClearMember() {
	m.clearedmember = true
}

// MemberCleared reports if the "member" edge to the MemberProgress entity was cleared.
func (m *GroupProgressMutation) MemberCleared() bool {
	return m.clearedmember
}

// RemoveMemberIDs removes the "member" edge to the MemberProgress entity by IDs.
func (m *GroupProgressMutation) RemoveMemberIDs(ids ...int64) {
	if m.removedmember == nil {
		m.removedmember = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.member, ids[i])
		m.removedmember[ids[i]] = struct{}{}
	}
}

// RemovedMember returns the removed IDs of the "member" edge to the MemberProgress entity.
func (m *GroupProgressMutation) RemovedMemberIDs() (ids []int64) {
	for id := range m.removedmember {
		ids = append(ids, id)
	}
	return
}

// MemberIDs returns the "member" edge IDs in the mutation.
func (m *GroupProgressMutation) MemberIDs() (ids []int64) {
	for id := range m.member {
		ids = append(ids, id)
	}
	return
}

// ResetMember resets all changes to the "member" edge.
func (m *GroupProgressMutation) ResetMember() {
	m.member = nil
	m.clearedmember = false
	m.removedmember = nil
}

// Where appends a list predicates to the GroupProgressMutation builder.
func (m *GroupProgressMutation) Where(ps ...predicate.GroupProgress) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GroupProgressMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GroupProgressMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.GroupProgress, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GroupProgressMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GroupProgressMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (GroupProgress).
func (m *GroupProgressMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GroupProgressMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.group_id != nil {
		fields = append(fields, groupprogress.FieldGroupID)
	}
	if m.progress != nil {
		fields = append(fields, groupprogress.FieldProgress)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GroupProgressMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case groupprogress.FieldGroupID:
		return m.GroupID()
	case groupprogress.FieldProgress:
		return m.Progress()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GroupProgressMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case groupprogress.FieldGroupID:
		return m.OldGroupID(ctx)
	case groupprogress.FieldProgress:
		return m.OldProgress(ctx)
	}
	return nil, fmt.Errorf("unknown GroupProgress field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupProgressMutation) SetField(name string, value ent.Value) error {
	switch name {
	case groupprogress.FieldGroupID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGroupID(v)
		return nil
	case groupprogress.FieldProgress:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProgress(v)
		return nil
	}
	return fmt.Errorf("unknown GroupProgress field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GroupProgressMutation) AddedFields() []string {
	var fields []string
	if m.addgroup_id != nil {
		fields = append(fields, groupprogress.FieldGroupID)
	}
	if m.addprogress != nil {
		fields = append(fields, groupprogress.FieldProgress)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GroupProgressMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case groupprogress.FieldGroupID:
		return m.AddedGroupID()
	case groupprogress.FieldProgress:
		return m.AddedProgress()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupProgressMutation) AddField(name string, value ent.Value) error {
	switch name {
	case groupprogress.FieldGroupID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGroupID(v)
		return nil
	case groupprogress.FieldProgress:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddProgress(v)
		return nil
	}
	return fmt.Errorf("unknown GroupProgress numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GroupProgressMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GroupProgressMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GroupProgressMutation) ClearField(name string) error {
	return fmt.Errorf("unknown GroupProgress nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GroupProgressMutation) ResetField(name string) error {
	switch name {
	case groupprogress.FieldGroupID:
		m.ResetGroupID()
		return nil
	case groupprogress.FieldProgress:
		m.ResetProgress()
		return nil
	}
	return fmt.Errorf("unknown GroupProgress field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GroupProgressMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.sub_event != nil {
		edges = append(edges, groupprogress.EdgeSubEvent)
	}
	if m.member != nil {
		edges = append(edges, groupprogress.EdgeMember)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GroupProgressMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case groupprogress.EdgeSubEvent:
		if id := m.sub_event; id != nil {
			return []ent.Value{*id}
		}
	case groupprogress.EdgeMember:
		ids := make([]ent.Value, 0, len(m.member))
		for id := range m.member {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GroupProgressMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedmember != nil {
		edges = append(edges, groupprogress.EdgeMember)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GroupProgressMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case groupprogress.EdgeMember:
		ids := make([]ent.Value, 0, len(m.removedmember))
		for id := range m.removedmember {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GroupProgressMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedsub_event {
		edges = append(edges, groupprogress.EdgeSubEvent)
	}
	if m.clearedmember {
		edges = append(edges, groupprogress.EdgeMember)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GroupProgressMutation) EdgeCleared(name string) bool {
	switch name {
	case groupprogress.EdgeSubEvent:
		return m.clearedsub_event
	case groupprogress.EdgeMember:
		return m.clearedmember
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GroupProgressMutation) ClearEdge(name string) error {
	switch name {
	case groupprogress.EdgeSubEvent:
		m.ClearSubEvent()
		return nil
	}
	return fmt.Errorf("unknown GroupProgress unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GroupProgressMutation) ResetEdge(name string) error {
	switch name {
	case groupprogress.EdgeSubEvent:
		m.ResetSubEvent()
		return nil
	case groupprogress.EdgeMember:
		m.ResetMember()
		return nil
	}
	return fmt.Errorf("unknown GroupProgress edge %s", name)
}

// MemberProgressMutation represents an operation that mutates the MemberProgress nodes in the graph.
type MemberProgressMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	member_id     *int64
	addmember_id  *int64
	user_id       *int64
	adduser_id    *int64
	progress      *int64
	addprogress   *int64
	clearedFields map[string]struct{}
	group         *int64
	clearedgroup  bool
	done          bool
	oldValue      func(context.Context) (*MemberProgress, error)
	predicates    []predicate.MemberProgress
}

var _ ent.Mutation = (*MemberProgressMutation)(nil)

// memberprogressOption allows management of the mutation configuration using functional options.
type memberprogressOption func(*MemberProgressMutation)

// newMemberProgressMutation creates new mutation for the MemberProgress entity.
func newMemberProgressMutation(c config, op Op, opts ...memberprogressOption) *MemberProgressMutation {
	m := &MemberProgressMutation{
		config:        c,
		op:            op,
		typ:           TypeMemberProgress,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMemberProgressID sets the ID field of the mutation.
func withMemberProgressID(id int64) memberprogressOption {
	return func(m *MemberProgressMutation) {
		var (
			err   error
			once  sync.Once
			value *MemberProgress
		)
		m.oldValue = func(ctx context.Context) (*MemberProgress, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MemberProgress.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMemberProgress sets the old MemberProgress of the mutation.
func withMemberProgress(node *MemberProgress) memberprogressOption {
	return func(m *MemberProgressMutation) {
		m.oldValue = func(context.Context) (*MemberProgress, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MemberProgressMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MemberProgressMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of MemberProgress entities.
func (m *MemberProgressMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MemberProgressMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MemberProgressMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MemberProgress.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMemberID sets the "member_id" field.
func (m *MemberProgressMutation) SetMemberID(i int64) {
	m.member_id = &i
	m.addmember_id = nil
}

// MemberID returns the value of the "member_id" field in the mutation.
func (m *MemberProgressMutation) MemberID() (r int64, exists bool) {
	v := m.member_id
	if v == nil {
		return
	}
	return *v, true
}

// OldMemberID returns the old "member_id" field's value of the MemberProgress entity.
// If the MemberProgress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberProgressMutation) OldMemberID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMemberID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMemberID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMemberID: %w", err)
	}
	return oldValue.MemberID, nil
}

// AddMemberID adds i to the "member_id" field.
func (m *MemberProgressMutation) AddMemberID(i int64) {
	if m.addmember_id != nil {
		*m.addmember_id += i
	} else {
		m.addmember_id = &i
	}
}

// AddedMemberID returns the value that was added to the "member_id" field in this mutation.
func (m *MemberProgressMutation) AddedMemberID() (r int64, exists bool) {
	v := m.addmember_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetMemberID resets all changes to the "member_id" field.
func (m *MemberProgressMutation) ResetMemberID() {
	m.member_id = nil
	m.addmember_id = nil
}

// SetUserID sets the "user_id" field.
func (m *MemberProgressMutation) SetUserID(i int64) {
	m.user_id = &i
	m.adduser_id = nil
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *MemberProgressMutation) UserID() (r int64, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the MemberProgress entity.
// If the MemberProgress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberProgressMutation) OldUserID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// AddUserID adds i to the "user_id" field.
func (m *MemberProgressMutation) AddUserID(i int64) {
	if m.adduser_id != nil {
		*m.adduser_id += i
	} else {
		m.adduser_id = &i
	}
}

// AddedUserID returns the value that was added to the "user_id" field in this mutation.
func (m *MemberProgressMutation) AddedUserID() (r int64, exists bool) {
	v := m.adduser_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *MemberProgressMutation) ResetUserID() {
	m.user_id = nil
	m.adduser_id = nil
}

// SetProgress sets the "progress" field.
func (m *MemberProgressMutation) SetProgress(i int64) {
	m.progress = &i
	m.addprogress = nil
}

// Progress returns the value of the "progress" field in the mutation.
func (m *MemberProgressMutation) Progress() (r int64, exists bool) {
	v := m.progress
	if v == nil {
		return
	}
	return *v, true
}

// OldProgress returns the old "progress" field's value of the MemberProgress entity.
// If the MemberProgress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberProgressMutation) OldProgress(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProgress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProgress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProgress: %w", err)
	}
	return oldValue.Progress, nil
}

// AddProgress adds i to the "progress" field.
func (m *MemberProgressMutation) AddProgress(i int64) {
	if m.addprogress != nil {
		*m.addprogress += i
	} else {
		m.addprogress = &i
	}
}

// AddedProgress returns the value that was added to the "progress" field in this mutation.
func (m *MemberProgressMutation) AddedProgress() (r int64, exists bool) {
	v := m.addprogress
	if v == nil {
		return
	}
	return *v, true
}

// ResetProgress resets all changes to the "progress" field.
func (m *MemberProgressMutation) ResetProgress() {
	m.progress = nil
	m.addprogress = nil
}

// SetGroupID sets the "group" edge to the GroupProgress entity by id.
func (m *MemberProgressMutation) SetGroupID(id int64) {
	m.group = &id
}

// ClearGroup clears the "group" edge to the GroupProgress entity.
func (m *MemberProgressMutation) ClearGroup() {
	m.clearedgroup = true
}

// GroupCleared reports if the "group" edge to the GroupProgress entity was cleared.
func (m *MemberProgressMutation) GroupCleared() bool {
	return m.clearedgroup
}

// GroupID returns the "group" edge ID in the mutation.
func (m *MemberProgressMutation) GroupID() (id int64, exists bool) {
	if m.group != nil {
		return *m.group, true
	}
	return
}

// GroupIDs returns the "group" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GroupID instead. It exists only for internal usage by the builders.
func (m *MemberProgressMutation) GroupIDs() (ids []int64) {
	if id := m.group; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGroup resets all changes to the "group" edge.
func (m *MemberProgressMutation) ResetGroup() {
	m.group = nil
	m.clearedgroup = false
}

// Where appends a list predicates to the MemberProgressMutation builder.
func (m *MemberProgressMutation) Where(ps ...predicate.MemberProgress) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MemberProgressMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MemberProgressMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.MemberProgress, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MemberProgressMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MemberProgressMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (MemberProgress).
func (m *MemberProgressMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MemberProgressMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.member_id != nil {
		fields = append(fields, memberprogress.FieldMemberID)
	}
	if m.user_id != nil {
		fields = append(fields, memberprogress.FieldUserID)
	}
	if m.progress != nil {
		fields = append(fields, memberprogress.FieldProgress)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MemberProgressMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case memberprogress.FieldMemberID:
		return m.MemberID()
	case memberprogress.FieldUserID:
		return m.UserID()
	case memberprogress.FieldProgress:
		return m.Progress()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MemberProgressMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case memberprogress.FieldMemberID:
		return m.OldMemberID(ctx)
	case memberprogress.FieldUserID:
		return m.OldUserID(ctx)
	case memberprogress.FieldProgress:
		return m.OldProgress(ctx)
	}
	return nil, fmt.Errorf("unknown MemberProgress field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MemberProgressMutation) SetField(name string, value ent.Value) error {
	switch name {
	case memberprogress.FieldMemberID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMemberID(v)
		return nil
	case memberprogress.FieldUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case memberprogress.FieldProgress:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProgress(v)
		return nil
	}
	return fmt.Errorf("unknown MemberProgress field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MemberProgressMutation) AddedFields() []string {
	var fields []string
	if m.addmember_id != nil {
		fields = append(fields, memberprogress.FieldMemberID)
	}
	if m.adduser_id != nil {
		fields = append(fields, memberprogress.FieldUserID)
	}
	if m.addprogress != nil {
		fields = append(fields, memberprogress.FieldProgress)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MemberProgressMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case memberprogress.FieldMemberID:
		return m.AddedMemberID()
	case memberprogress.FieldUserID:
		return m.AddedUserID()
	case memberprogress.FieldProgress:
		return m.AddedProgress()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MemberProgressMutation) AddField(name string, value ent.Value) error {
	switch name {
	case memberprogress.FieldMemberID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMemberID(v)
		return nil
	case memberprogress.FieldUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserID(v)
		return nil
	case memberprogress.FieldProgress:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddProgress(v)
		return nil
	}
	return fmt.Errorf("unknown MemberProgress numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MemberProgressMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MemberProgressMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MemberProgressMutation) ClearField(name string) error {
	return fmt.Errorf("unknown MemberProgress nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MemberProgressMutation) ResetField(name string) error {
	switch name {
	case memberprogress.FieldMemberID:
		m.ResetMemberID()
		return nil
	case memberprogress.FieldUserID:
		m.ResetUserID()
		return nil
	case memberprogress.FieldProgress:
		m.ResetProgress()
		return nil
	}
	return fmt.Errorf("unknown MemberProgress field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MemberProgressMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.group != nil {
		edges = append(edges, memberprogress.EdgeGroup)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MemberProgressMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case memberprogress.EdgeGroup:
		if id := m.group; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MemberProgressMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MemberProgressMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MemberProgressMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedgroup {
		edges = append(edges, memberprogress.EdgeGroup)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MemberProgressMutation) EdgeCleared(name string) bool {
	switch name {
	case memberprogress.EdgeGroup:
		return m.clearedgroup
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MemberProgressMutation) ClearEdge(name string) error {
	switch name {
	case memberprogress.EdgeGroup:
		m.ClearGroup()
		return nil
	}
	return fmt.Errorf("unknown MemberProgress unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MemberProgressMutation) ResetEdge(name string) error {
	switch name {
	case memberprogress.EdgeGroup:
		m.ResetGroup()
		return nil
	}
	return fmt.Errorf("unknown MemberProgress edge %s", name)
}

// SubEventMutation represents an operation that mutates the SubEvent nodes in the graph.
type SubEventMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	name          *string
	picture       *string
	start_date    *time.Time
	end_date      *time.Time
	description   *string
	goal          *int64
	addgoal       *int64
	rule_id       *int64
	addrule_id    *int64
	status        *int64
	addstatus     *int64
	clearedFields map[string]struct{}
	event         *int64
	clearedevent  bool
	group         map[int64]struct{}
	removedgroup  map[int64]struct{}
	clearedgroup  bool
	done          bool
	oldValue      func(context.Context) (*SubEvent, error)
	predicates    []predicate.SubEvent
}

var _ ent.Mutation = (*SubEventMutation)(nil)

// subeventOption allows management of the mutation configuration using functional options.
type subeventOption func(*SubEventMutation)

// newSubEventMutation creates new mutation for the SubEvent entity.
func newSubEventMutation(c config, op Op, opts ...subeventOption) *SubEventMutation {
	m := &SubEventMutation{
		config:        c,
		op:            op,
		typ:           TypeSubEvent,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSubEventID sets the ID field of the mutation.
func withSubEventID(id int64) subeventOption {
	return func(m *SubEventMutation) {
		var (
			err   error
			once  sync.Once
			value *SubEvent
		)
		m.oldValue = func(ctx context.Context) (*SubEvent, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SubEvent.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSubEvent sets the old SubEvent of the mutation.
func withSubEvent(node *SubEvent) subeventOption {
	return func(m *SubEventMutation) {
		m.oldValue = func(context.Context) (*SubEvent, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SubEventMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SubEventMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SubEvent entities.
func (m *SubEventMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SubEventMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SubEventMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SubEvent.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *SubEventMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *SubEventMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the SubEvent entity.
// If the SubEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubEventMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *SubEventMutation) ClearName() {
	m.name = nil
	m.clearedFields[subevent.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *SubEventMutation) NameCleared() bool {
	_, ok := m.clearedFields[subevent.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *SubEventMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, subevent.FieldName)
}

// SetPicture sets the "picture" field.
func (m *SubEventMutation) SetPicture(s string) {
	m.picture = &s
}

// Picture returns the value of the "picture" field in the mutation.
func (m *SubEventMutation) Picture() (r string, exists bool) {
	v := m.picture
	if v == nil {
		return
	}
	return *v, true
}

// OldPicture returns the old "picture" field's value of the SubEvent entity.
// If the SubEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubEventMutation) OldPicture(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPicture is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPicture requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPicture: %w", err)
	}
	return oldValue.Picture, nil
}

// ResetPicture resets all changes to the "picture" field.
func (m *SubEventMutation) ResetPicture() {
	m.picture = nil
}

// SetStartDate sets the "start_date" field.
func (m *SubEventMutation) SetStartDate(t time.Time) {
	m.start_date = &t
}

// StartDate returns the value of the "start_date" field in the mutation.
func (m *SubEventMutation) StartDate() (r time.Time, exists bool) {
	v := m.start_date
	if v == nil {
		return
	}
	return *v, true
}

// OldStartDate returns the old "start_date" field's value of the SubEvent entity.
// If the SubEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubEventMutation) OldStartDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartDate: %w", err)
	}
	return oldValue.StartDate, nil
}

// ResetStartDate resets all changes to the "start_date" field.
func (m *SubEventMutation) ResetStartDate() {
	m.start_date = nil
}

// SetEndDate sets the "end_date" field.
func (m *SubEventMutation) SetEndDate(t time.Time) {
	m.end_date = &t
}

// EndDate returns the value of the "end_date" field in the mutation.
func (m *SubEventMutation) EndDate() (r time.Time, exists bool) {
	v := m.end_date
	if v == nil {
		return
	}
	return *v, true
}

// OldEndDate returns the old "end_date" field's value of the SubEvent entity.
// If the SubEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubEventMutation) OldEndDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndDate: %w", err)
	}
	return oldValue.EndDate, nil
}

// ResetEndDate resets all changes to the "end_date" field.
func (m *SubEventMutation) ResetEndDate() {
	m.end_date = nil
}

// SetDescription sets the "description" field.
func (m *SubEventMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *SubEventMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the SubEvent entity.
// If the SubEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubEventMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *SubEventMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[subevent.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *SubEventMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[subevent.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *SubEventMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, subevent.FieldDescription)
}

// SetGoal sets the "goal" field.
func (m *SubEventMutation) SetGoal(i int64) {
	m.goal = &i
	m.addgoal = nil
}

// Goal returns the value of the "goal" field in the mutation.
func (m *SubEventMutation) Goal() (r int64, exists bool) {
	v := m.goal
	if v == nil {
		return
	}
	return *v, true
}

// OldGoal returns the old "goal" field's value of the SubEvent entity.
// If the SubEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubEventMutation) OldGoal(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGoal is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGoal requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoal: %w", err)
	}
	return oldValue.Goal, nil
}

// AddGoal adds i to the "goal" field.
func (m *SubEventMutation) AddGoal(i int64) {
	if m.addgoal != nil {
		*m.addgoal += i
	} else {
		m.addgoal = &i
	}
}

// AddedGoal returns the value that was added to the "goal" field in this mutation.
func (m *SubEventMutation) AddedGoal() (r int64, exists bool) {
	v := m.addgoal
	if v == nil {
		return
	}
	return *v, true
}

// ResetGoal resets all changes to the "goal" field.
func (m *SubEventMutation) ResetGoal() {
	m.goal = nil
	m.addgoal = nil
}

// SetRuleID sets the "rule_id" field.
func (m *SubEventMutation) SetRuleID(i int64) {
	m.rule_id = &i
	m.addrule_id = nil
}

// RuleID returns the value of the "rule_id" field in the mutation.
func (m *SubEventMutation) RuleID() (r int64, exists bool) {
	v := m.rule_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRuleID returns the old "rule_id" field's value of the SubEvent entity.
// If the SubEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubEventMutation) OldRuleID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRuleID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRuleID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRuleID: %w", err)
	}
	return oldValue.RuleID, nil
}

// AddRuleID adds i to the "rule_id" field.
func (m *SubEventMutation) AddRuleID(i int64) {
	if m.addrule_id != nil {
		*m.addrule_id += i
	} else {
		m.addrule_id = &i
	}
}

// AddedRuleID returns the value that was added to the "rule_id" field in this mutation.
func (m *SubEventMutation) AddedRuleID() (r int64, exists bool) {
	v := m.addrule_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetRuleID resets all changes to the "rule_id" field.
func (m *SubEventMutation) ResetRuleID() {
	m.rule_id = nil
	m.addrule_id = nil
}

// SetStatus sets the "status" field.
func (m *SubEventMutation) SetStatus(i int64) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *SubEventMutation) Status() (r int64, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the SubEvent entity.
// If the SubEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubEventMutation) OldStatus(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *SubEventMutation) AddStatus(i int64) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *SubEventMutation) AddedStatus() (r int64, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *SubEventMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetEventID sets the "event" edge to the Event entity by id.
func (m *SubEventMutation) SetEventID(id int64) {
	m.event = &id
}

// ClearEvent clears the "event" edge to the Event entity.
func (m *SubEventMutation) ClearEvent() {
	m.clearedevent = true
}

// EventCleared reports if the "event" edge to the Event entity was cleared.
func (m *SubEventMutation) EventCleared() bool {
	return m.clearedevent
}

// EventID returns the "event" edge ID in the mutation.
func (m *SubEventMutation) EventID() (id int64, exists bool) {
	if m.event != nil {
		return *m.event, true
	}
	return
}

// EventIDs returns the "event" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EventID instead. It exists only for internal usage by the builders.
func (m *SubEventMutation) EventIDs() (ids []int64) {
	if id := m.event; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEvent resets all changes to the "event" edge.
func (m *SubEventMutation) ResetEvent() {
	m.event = nil
	m.clearedevent = false
}

// AddGroupIDs adds the "group" edge to the GroupProgress entity by ids.
func (m *SubEventMutation) AddGroupIDs(ids ...int64) {
	if m.group == nil {
		m.group = make(map[int64]struct{})
	}
	for i := range ids {
		m.group[ids[i]] = struct{}{}
	}
}

// ClearGroup clears the "group" edge to the GroupProgress entity.
func (m *SubEventMutation) ClearGroup() {
	m.clearedgroup = true
}

// GroupCleared reports if the "group" edge to the GroupProgress entity was cleared.
func (m *SubEventMutation) GroupCleared() bool {
	return m.clearedgroup
}

// RemoveGroupIDs removes the "group" edge to the GroupProgress entity by IDs.
func (m *SubEventMutation) RemoveGroupIDs(ids ...int64) {
	if m.removedgroup == nil {
		m.removedgroup = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.group, ids[i])
		m.removedgroup[ids[i]] = struct{}{}
	}
}

// RemovedGroup returns the removed IDs of the "group" edge to the GroupProgress entity.
func (m *SubEventMutation) RemovedGroupIDs() (ids []int64) {
	for id := range m.removedgroup {
		ids = append(ids, id)
	}
	return
}

// GroupIDs returns the "group" edge IDs in the mutation.
func (m *SubEventMutation) GroupIDs() (ids []int64) {
	for id := range m.group {
		ids = append(ids, id)
	}
	return
}

// ResetGroup resets all changes to the "group" edge.
func (m *SubEventMutation) ResetGroup() {
	m.group = nil
	m.clearedgroup = false
	m.removedgroup = nil
}

// Where appends a list predicates to the SubEventMutation builder.
func (m *SubEventMutation) Where(ps ...predicate.SubEvent) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SubEventMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SubEventMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SubEvent, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SubEventMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SubEventMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SubEvent).
func (m *SubEventMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SubEventMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.name != nil {
		fields = append(fields, subevent.FieldName)
	}
	if m.picture != nil {
		fields = append(fields, subevent.FieldPicture)
	}
	if m.start_date != nil {
		fields = append(fields, subevent.FieldStartDate)
	}
	if m.end_date != nil {
		fields = append(fields, subevent.FieldEndDate)
	}
	if m.description != nil {
		fields = append(fields, subevent.FieldDescription)
	}
	if m.goal != nil {
		fields = append(fields, subevent.FieldGoal)
	}
	if m.rule_id != nil {
		fields = append(fields, subevent.FieldRuleID)
	}
	if m.status != nil {
		fields = append(fields, subevent.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SubEventMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case subevent.FieldName:
		return m.Name()
	case subevent.FieldPicture:
		return m.Picture()
	case subevent.FieldStartDate:
		return m.StartDate()
	case subevent.FieldEndDate:
		return m.EndDate()
	case subevent.FieldDescription:
		return m.Description()
	case subevent.FieldGoal:
		return m.Goal()
	case subevent.FieldRuleID:
		return m.RuleID()
	case subevent.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SubEventMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case subevent.FieldName:
		return m.OldName(ctx)
	case subevent.FieldPicture:
		return m.OldPicture(ctx)
	case subevent.FieldStartDate:
		return m.OldStartDate(ctx)
	case subevent.FieldEndDate:
		return m.OldEndDate(ctx)
	case subevent.FieldDescription:
		return m.OldDescription(ctx)
	case subevent.FieldGoal:
		return m.OldGoal(ctx)
	case subevent.FieldRuleID:
		return m.OldRuleID(ctx)
	case subevent.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown SubEvent field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubEventMutation) SetField(name string, value ent.Value) error {
	switch name {
	case subevent.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case subevent.FieldPicture:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPicture(v)
		return nil
	case subevent.FieldStartDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartDate(v)
		return nil
	case subevent.FieldEndDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndDate(v)
		return nil
	case subevent.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case subevent.FieldGoal:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoal(v)
		return nil
	case subevent.FieldRuleID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRuleID(v)
		return nil
	case subevent.FieldStatus:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown SubEvent field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SubEventMutation) AddedFields() []string {
	var fields []string
	if m.addgoal != nil {
		fields = append(fields, subevent.FieldGoal)
	}
	if m.addrule_id != nil {
		fields = append(fields, subevent.FieldRuleID)
	}
	if m.addstatus != nil {
		fields = append(fields, subevent.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SubEventMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case subevent.FieldGoal:
		return m.AddedGoal()
	case subevent.FieldRuleID:
		return m.AddedRuleID()
	case subevent.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubEventMutation) AddField(name string, value ent.Value) error {
	switch name {
	case subevent.FieldGoal:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGoal(v)
		return nil
	case subevent.FieldRuleID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRuleID(v)
		return nil
	case subevent.FieldStatus:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown SubEvent numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SubEventMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(subevent.FieldName) {
		fields = append(fields, subevent.FieldName)
	}
	if m.FieldCleared(subevent.FieldDescription) {
		fields = append(fields, subevent.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SubEventMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SubEventMutation) ClearField(name string) error {
	switch name {
	case subevent.FieldName:
		m.ClearName()
		return nil
	case subevent.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown SubEvent nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SubEventMutation) ResetField(name string) error {
	switch name {
	case subevent.FieldName:
		m.ResetName()
		return nil
	case subevent.FieldPicture:
		m.ResetPicture()
		return nil
	case subevent.FieldStartDate:
		m.ResetStartDate()
		return nil
	case subevent.FieldEndDate:
		m.ResetEndDate()
		return nil
	case subevent.FieldDescription:
		m.ResetDescription()
		return nil
	case subevent.FieldGoal:
		m.ResetGoal()
		return nil
	case subevent.FieldRuleID:
		m.ResetRuleID()
		return nil
	case subevent.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown SubEvent field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SubEventMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.event != nil {
		edges = append(edges, subevent.EdgeEvent)
	}
	if m.group != nil {
		edges = append(edges, subevent.EdgeGroup)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SubEventMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case subevent.EdgeEvent:
		if id := m.event; id != nil {
			return []ent.Value{*id}
		}
	case subevent.EdgeGroup:
		ids := make([]ent.Value, 0, len(m.group))
		for id := range m.group {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SubEventMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedgroup != nil {
		edges = append(edges, subevent.EdgeGroup)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SubEventMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case subevent.EdgeGroup:
		ids := make([]ent.Value, 0, len(m.removedgroup))
		for id := range m.removedgroup {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SubEventMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedevent {
		edges = append(edges, subevent.EdgeEvent)
	}
	if m.clearedgroup {
		edges = append(edges, subevent.EdgeGroup)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SubEventMutation) EdgeCleared(name string) bool {
	switch name {
	case subevent.EdgeEvent:
		return m.clearedevent
	case subevent.EdgeGroup:
		return m.clearedgroup
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SubEventMutation) ClearEdge(name string) error {
	switch name {
	case subevent.EdgeEvent:
		m.ClearEvent()
		return nil
	}
	return fmt.Errorf("unknown SubEvent unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SubEventMutation) ResetEdge(name string) error {
	switch name {
	case subevent.EdgeEvent:
		m.ResetEvent()
		return nil
	case subevent.EdgeGroup:
		m.ResetGroup()
		return nil
	}
	return fmt.Errorf("unknown SubEvent edge %s", name)
}
