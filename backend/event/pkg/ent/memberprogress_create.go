// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/manhrev/runtracking/backend/event/pkg/ent/groupprogress"
	"github.com/manhrev/runtracking/backend/event/pkg/ent/memberprogress"
)

// MemberProgressCreate is the builder for creating a MemberProgress entity.
type MemberProgressCreate struct {
	config
	mutation *MemberProgressMutation
	hooks    []Hook
}

// SetMemberID sets the "member_id" field.
func (mpc *MemberProgressCreate) SetMemberID(i int64) *MemberProgressCreate {
	mpc.mutation.SetMemberID(i)
	return mpc
}

// SetUserID sets the "user_id" field.
func (mpc *MemberProgressCreate) SetUserID(i int64) *MemberProgressCreate {
	mpc.mutation.SetUserID(i)
	return mpc
}

// SetProgress sets the "progress" field.
func (mpc *MemberProgressCreate) SetProgress(i int64) *MemberProgressCreate {
	mpc.mutation.SetProgress(i)
	return mpc
}

// SetNillableProgress sets the "progress" field if the given value is not nil.
func (mpc *MemberProgressCreate) SetNillableProgress(i *int64) *MemberProgressCreate {
	if i != nil {
		mpc.SetProgress(*i)
	}
	return mpc
}

// SetID sets the "id" field.
func (mpc *MemberProgressCreate) SetID(i int64) *MemberProgressCreate {
	mpc.mutation.SetID(i)
	return mpc
}

// SetGroupID sets the "group" edge to the GroupProgress entity by ID.
func (mpc *MemberProgressCreate) SetGroupID(id int64) *MemberProgressCreate {
	mpc.mutation.SetGroupID(id)
	return mpc
}

// SetNillableGroupID sets the "group" edge to the GroupProgress entity by ID if the given value is not nil.
func (mpc *MemberProgressCreate) SetNillableGroupID(id *int64) *MemberProgressCreate {
	if id != nil {
		mpc = mpc.SetGroupID(*id)
	}
	return mpc
}

// SetGroup sets the "group" edge to the GroupProgress entity.
func (mpc *MemberProgressCreate) SetGroup(g *GroupProgress) *MemberProgressCreate {
	return mpc.SetGroupID(g.ID)
}

// Mutation returns the MemberProgressMutation object of the builder.
func (mpc *MemberProgressCreate) Mutation() *MemberProgressMutation {
	return mpc.mutation
}

// Save creates the MemberProgress in the database.
func (mpc *MemberProgressCreate) Save(ctx context.Context) (*MemberProgress, error) {
	mpc.defaults()
	return withHooks[*MemberProgress, MemberProgressMutation](ctx, mpc.sqlSave, mpc.mutation, mpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mpc *MemberProgressCreate) SaveX(ctx context.Context) *MemberProgress {
	v, err := mpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mpc *MemberProgressCreate) Exec(ctx context.Context) error {
	_, err := mpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpc *MemberProgressCreate) ExecX(ctx context.Context) {
	if err := mpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mpc *MemberProgressCreate) defaults() {
	if _, ok := mpc.mutation.Progress(); !ok {
		v := memberprogress.DefaultProgress
		mpc.mutation.SetProgress(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mpc *MemberProgressCreate) check() error {
	if _, ok := mpc.mutation.MemberID(); !ok {
		return &ValidationError{Name: "member_id", err: errors.New(`ent: missing required field "MemberProgress.member_id"`)}
	}
	if _, ok := mpc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "MemberProgress.user_id"`)}
	}
	if _, ok := mpc.mutation.Progress(); !ok {
		return &ValidationError{Name: "progress", err: errors.New(`ent: missing required field "MemberProgress.progress"`)}
	}
	return nil
}

func (mpc *MemberProgressCreate) sqlSave(ctx context.Context) (*MemberProgress, error) {
	if err := mpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	mpc.mutation.id = &_node.ID
	mpc.mutation.done = true
	return _node, nil
}

func (mpc *MemberProgressCreate) createSpec() (*MemberProgress, *sqlgraph.CreateSpec) {
	var (
		_node = &MemberProgress{config: mpc.config}
		_spec = sqlgraph.NewCreateSpec(memberprogress.Table, sqlgraph.NewFieldSpec(memberprogress.FieldID, field.TypeInt64))
	)
	if id, ok := mpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mpc.mutation.MemberID(); ok {
		_spec.SetField(memberprogress.FieldMemberID, field.TypeInt64, value)
		_node.MemberID = value
	}
	if value, ok := mpc.mutation.UserID(); ok {
		_spec.SetField(memberprogress.FieldUserID, field.TypeInt64, value)
		_node.UserID = value
	}
	if value, ok := mpc.mutation.Progress(); ok {
		_spec.SetField(memberprogress.FieldProgress, field.TypeInt64, value)
		_node.Progress = value
	}
	if nodes := mpc.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memberprogress.GroupTable,
			Columns: []string{memberprogress.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupprogress.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.group_progress_member = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MemberProgressCreateBulk is the builder for creating many MemberProgress entities in bulk.
type MemberProgressCreateBulk struct {
	config
	builders []*MemberProgressCreate
}

// Save creates the MemberProgress entities in the database.
func (mpcb *MemberProgressCreateBulk) Save(ctx context.Context) ([]*MemberProgress, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mpcb.builders))
	nodes := make([]*MemberProgress, len(mpcb.builders))
	mutators := make([]Mutator, len(mpcb.builders))
	for i := range mpcb.builders {
		func(i int, root context.Context) {
			builder := mpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MemberProgressMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mpcb *MemberProgressCreateBulk) SaveX(ctx context.Context) []*MemberProgress {
	v, err := mpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mpcb *MemberProgressCreateBulk) Exec(ctx context.Context) error {
	_, err := mpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpcb *MemberProgressCreateBulk) ExecX(ctx context.Context) {
	if err := mpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
