// Code generated by ent, DO NOT EDIT.

package eventgroupz

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the eventgroupz type in the database.
	Label = "event_groupz"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// EdgeEvent holds the string denoting the event edge name in mutations.
	EdgeEvent = "event"
	// EdgeParticipates holds the string denoting the participates edge name in mutations.
	EdgeParticipates = "participates"
	// Table holds the table name of the eventgroupz in the database.
	Table = "event_groupzs"
	// EventTable is the table that holds the event relation/edge. The primary key declared below.
	EventTable = "participates"
	// EventInverseTable is the table name for the Event entity.
	// It exists in this package in order to avoid circular dependency with the "event" package.
	EventInverseTable = "events"
	// ParticipatesTable is the table that holds the participates relation/edge.
	ParticipatesTable = "participates"
	// ParticipatesInverseTable is the table name for the Participate entity.
	// It exists in this package in order to avoid circular dependency with the "participate" package.
	ParticipatesInverseTable = "participates"
	// ParticipatesColumn is the table column denoting the participates relation/edge.
	ParticipatesColumn = "event_group_id"
)

// Columns holds all SQL columns for eventgroupz fields.
var Columns = []string{
	FieldID,
}

var (
	// EventPrimaryKey and EventColumn2 are the table columns denoting the
	// primary key for the event relation (M2M).
	EventPrimaryKey = []string{"event_id", "event_group_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Order defines the ordering method for the EventGroupz queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEventCount orders the results by event count.
func ByEventCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEventStep(), opts...)
	}
}

// ByEvent orders the results by event terms.
func ByEvent(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByParticipatesCount orders the results by participates count.
func ByParticipatesCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newParticipatesStep(), opts...)
	}
}

// ByParticipates orders the results by participates terms.
func ByParticipates(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParticipatesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newEventStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EventInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, EventTable, EventPrimaryKey...),
	)
}
func newParticipatesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ParticipatesInverseTable, ParticipatesColumn),
		sqlgraph.Edge(sqlgraph.O2M, true, ParticipatesTable, ParticipatesColumn),
	)
}
