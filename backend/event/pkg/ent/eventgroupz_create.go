// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/manhrev/runtracking/backend/event/pkg/ent/event"
	"github.com/manhrev/runtracking/backend/event/pkg/ent/eventgroupz"
)

// EventGroupzCreate is the builder for creating a EventGroupz entity.
type EventGroupzCreate struct {
	config
	mutation *EventGroupzMutation
	hooks    []Hook
}

// SetID sets the "id" field.
func (egc *EventGroupzCreate) SetID(i int64) *EventGroupzCreate {
	egc.mutation.SetID(i)
	return egc
}

// AddEventIDs adds the "event" edge to the Event entity by IDs.
func (egc *EventGroupzCreate) AddEventIDs(ids ...int64) *EventGroupzCreate {
	egc.mutation.AddEventIDs(ids...)
	return egc
}

// AddEvent adds the "event" edges to the Event entity.
func (egc *EventGroupzCreate) AddEvent(e ...*Event) *EventGroupzCreate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return egc.AddEventIDs(ids...)
}

// Mutation returns the EventGroupzMutation object of the builder.
func (egc *EventGroupzCreate) Mutation() *EventGroupzMutation {
	return egc.mutation
}

// Save creates the EventGroupz in the database.
func (egc *EventGroupzCreate) Save(ctx context.Context) (*EventGroupz, error) {
	return withHooks[*EventGroupz, EventGroupzMutation](ctx, egc.sqlSave, egc.mutation, egc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (egc *EventGroupzCreate) SaveX(ctx context.Context) *EventGroupz {
	v, err := egc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (egc *EventGroupzCreate) Exec(ctx context.Context) error {
	_, err := egc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (egc *EventGroupzCreate) ExecX(ctx context.Context) {
	if err := egc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (egc *EventGroupzCreate) check() error {
	return nil
}

func (egc *EventGroupzCreate) sqlSave(ctx context.Context) (*EventGroupz, error) {
	if err := egc.check(); err != nil {
		return nil, err
	}
	_node, _spec := egc.createSpec()
	if err := sqlgraph.CreateNode(ctx, egc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	egc.mutation.id = &_node.ID
	egc.mutation.done = true
	return _node, nil
}

func (egc *EventGroupzCreate) createSpec() (*EventGroupz, *sqlgraph.CreateSpec) {
	var (
		_node = &EventGroupz{config: egc.config}
		_spec = sqlgraph.NewCreateSpec(eventgroupz.Table, sqlgraph.NewFieldSpec(eventgroupz.FieldID, field.TypeInt64))
	)
	if id, ok := egc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if nodes := egc.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   eventgroupz.EventTable,
			Columns: eventgroupz.EventPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ParticipateCreate{config: egc.config, mutation: newParticipateMutation(egc.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EventGroupzCreateBulk is the builder for creating many EventGroupz entities in bulk.
type EventGroupzCreateBulk struct {
	config
	builders []*EventGroupzCreate
}

// Save creates the EventGroupz entities in the database.
func (egcb *EventGroupzCreateBulk) Save(ctx context.Context) ([]*EventGroupz, error) {
	specs := make([]*sqlgraph.CreateSpec, len(egcb.builders))
	nodes := make([]*EventGroupz, len(egcb.builders))
	mutators := make([]Mutator, len(egcb.builders))
	for i := range egcb.builders {
		func(i int, root context.Context) {
			builder := egcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EventGroupzMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, egcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, egcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, egcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (egcb *EventGroupzCreateBulk) SaveX(ctx context.Context) []*EventGroupz {
	v, err := egcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (egcb *EventGroupzCreateBulk) Exec(ctx context.Context) error {
	_, err := egcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (egcb *EventGroupzCreateBulk) ExecX(ctx context.Context) {
	if err := egcb.Exec(ctx); err != nil {
		panic(err)
	}
}
