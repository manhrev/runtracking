// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/manhrev/runtracking/backend/event/pkg/ent/event"
	"github.com/manhrev/runtracking/backend/event/pkg/ent/eventgroup"
)

// EventGroupCreate is the builder for creating a EventGroup entity.
type EventGroupCreate struct {
	config
	mutation *EventGroupMutation
	hooks    []Hook
}

// SetGroupID sets the "group_id" field.
func (egc *EventGroupCreate) SetGroupID(i int64) *EventGroupCreate {
	egc.mutation.SetGroupID(i)
	return egc
}

// SetJoinedAt sets the "joined_at" field.
func (egc *EventGroupCreate) SetJoinedAt(t time.Time) *EventGroupCreate {
	egc.mutation.SetJoinedAt(t)
	return egc
}

// SetNillableJoinedAt sets the "joined_at" field if the given value is not nil.
func (egc *EventGroupCreate) SetNillableJoinedAt(t *time.Time) *EventGroupCreate {
	if t != nil {
		egc.SetJoinedAt(*t)
	}
	return egc
}

// SetStatus sets the "status" field.
func (egc *EventGroupCreate) SetStatus(i int64) *EventGroupCreate {
	egc.mutation.SetStatus(i)
	return egc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (egc *EventGroupCreate) SetNillableStatus(i *int64) *EventGroupCreate {
	if i != nil {
		egc.SetStatus(*i)
	}
	return egc
}

// SetID sets the "id" field.
func (egc *EventGroupCreate) SetID(i int64) *EventGroupCreate {
	egc.mutation.SetID(i)
	return egc
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (egc *EventGroupCreate) SetEventID(id int64) *EventGroupCreate {
	egc.mutation.SetEventID(id)
	return egc
}

// SetNillableEventID sets the "event" edge to the Event entity by ID if the given value is not nil.
func (egc *EventGroupCreate) SetNillableEventID(id *int64) *EventGroupCreate {
	if id != nil {
		egc = egc.SetEventID(*id)
	}
	return egc
}

// SetEvent sets the "event" edge to the Event entity.
func (egc *EventGroupCreate) SetEvent(e *Event) *EventGroupCreate {
	return egc.SetEventID(e.ID)
}

// Mutation returns the EventGroupMutation object of the builder.
func (egc *EventGroupCreate) Mutation() *EventGroupMutation {
	return egc.mutation
}

// Save creates the EventGroup in the database.
func (egc *EventGroupCreate) Save(ctx context.Context) (*EventGroup, error) {
	egc.defaults()
	return withHooks[*EventGroup, EventGroupMutation](ctx, egc.sqlSave, egc.mutation, egc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (egc *EventGroupCreate) SaveX(ctx context.Context) *EventGroup {
	v, err := egc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (egc *EventGroupCreate) Exec(ctx context.Context) error {
	_, err := egc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (egc *EventGroupCreate) ExecX(ctx context.Context) {
	if err := egc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (egc *EventGroupCreate) defaults() {
	if _, ok := egc.mutation.JoinedAt(); !ok {
		v := eventgroup.DefaultJoinedAt()
		egc.mutation.SetJoinedAt(v)
	}
	if _, ok := egc.mutation.Status(); !ok {
		v := eventgroup.DefaultStatus
		egc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (egc *EventGroupCreate) check() error {
	if _, ok := egc.mutation.GroupID(); !ok {
		return &ValidationError{Name: "group_id", err: errors.New(`ent: missing required field "EventGroup.group_id"`)}
	}
	if _, ok := egc.mutation.JoinedAt(); !ok {
		return &ValidationError{Name: "joined_at", err: errors.New(`ent: missing required field "EventGroup.joined_at"`)}
	}
	if _, ok := egc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "EventGroup.status"`)}
	}
	return nil
}

func (egc *EventGroupCreate) sqlSave(ctx context.Context) (*EventGroup, error) {
	if err := egc.check(); err != nil {
		return nil, err
	}
	_node, _spec := egc.createSpec()
	if err := sqlgraph.CreateNode(ctx, egc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	egc.mutation.id = &_node.ID
	egc.mutation.done = true
	return _node, nil
}

func (egc *EventGroupCreate) createSpec() (*EventGroup, *sqlgraph.CreateSpec) {
	var (
		_node = &EventGroup{config: egc.config}
		_spec = sqlgraph.NewCreateSpec(eventgroup.Table, sqlgraph.NewFieldSpec(eventgroup.FieldID, field.TypeInt64))
	)
	if id, ok := egc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := egc.mutation.GroupID(); ok {
		_spec.SetField(eventgroup.FieldGroupID, field.TypeInt64, value)
		_node.GroupID = value
	}
	if value, ok := egc.mutation.JoinedAt(); ok {
		_spec.SetField(eventgroup.FieldJoinedAt, field.TypeTime, value)
		_node.JoinedAt = value
	}
	if value, ok := egc.mutation.Status(); ok {
		_spec.SetField(eventgroup.FieldStatus, field.TypeInt64, value)
		_node.Status = value
	}
	if nodes := egc.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventgroup.EventTable,
			Columns: []string{eventgroup.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.event_groups = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EventGroupCreateBulk is the builder for creating many EventGroup entities in bulk.
type EventGroupCreateBulk struct {
	config
	builders []*EventGroupCreate
}

// Save creates the EventGroup entities in the database.
func (egcb *EventGroupCreateBulk) Save(ctx context.Context) ([]*EventGroup, error) {
	specs := make([]*sqlgraph.CreateSpec, len(egcb.builders))
	nodes := make([]*EventGroup, len(egcb.builders))
	mutators := make([]Mutator, len(egcb.builders))
	for i := range egcb.builders {
		func(i int, root context.Context) {
			builder := egcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EventGroupMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, egcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, egcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, egcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (egcb *EventGroupCreateBulk) SaveX(ctx context.Context) []*EventGroup {
	v, err := egcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (egcb *EventGroupCreateBulk) Exec(ctx context.Context) error {
	_, err := egcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (egcb *EventGroupCreateBulk) ExecX(ctx context.Context) {
	if err := egcb.Exec(ctx); err != nil {
		panic(err)
	}
}
