// Code generated by ent, DO NOT EDIT.

package groupprogress

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/manhrev/runtracking/backend/event/pkg/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.GroupProgress {
	return predicate.GroupProgress(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.GroupProgress {
	return predicate.GroupProgress(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.GroupProgress {
	return predicate.GroupProgress(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.GroupProgress {
	return predicate.GroupProgress(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.GroupProgress {
	return predicate.GroupProgress(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.GroupProgress {
	return predicate.GroupProgress(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.GroupProgress {
	return predicate.GroupProgress(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.GroupProgress {
	return predicate.GroupProgress(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.GroupProgress {
	return predicate.GroupProgress(sql.FieldLTE(FieldID, id))
}

// GroupID applies equality check predicate on the "group_id" field. It's identical to GroupIDEQ.
func GroupID(v int64) predicate.GroupProgress {
	return predicate.GroupProgress(sql.FieldEQ(FieldGroupID, v))
}

// Progress applies equality check predicate on the "progress" field. It's identical to ProgressEQ.
func Progress(v int64) predicate.GroupProgress {
	return predicate.GroupProgress(sql.FieldEQ(FieldProgress, v))
}

// GroupIDEQ applies the EQ predicate on the "group_id" field.
func GroupIDEQ(v int64) predicate.GroupProgress {
	return predicate.GroupProgress(sql.FieldEQ(FieldGroupID, v))
}

// GroupIDNEQ applies the NEQ predicate on the "group_id" field.
func GroupIDNEQ(v int64) predicate.GroupProgress {
	return predicate.GroupProgress(sql.FieldNEQ(FieldGroupID, v))
}

// GroupIDIn applies the In predicate on the "group_id" field.
func GroupIDIn(vs ...int64) predicate.GroupProgress {
	return predicate.GroupProgress(sql.FieldIn(FieldGroupID, vs...))
}

// GroupIDNotIn applies the NotIn predicate on the "group_id" field.
func GroupIDNotIn(vs ...int64) predicate.GroupProgress {
	return predicate.GroupProgress(sql.FieldNotIn(FieldGroupID, vs...))
}

// GroupIDGT applies the GT predicate on the "group_id" field.
func GroupIDGT(v int64) predicate.GroupProgress {
	return predicate.GroupProgress(sql.FieldGT(FieldGroupID, v))
}

// GroupIDGTE applies the GTE predicate on the "group_id" field.
func GroupIDGTE(v int64) predicate.GroupProgress {
	return predicate.GroupProgress(sql.FieldGTE(FieldGroupID, v))
}

// GroupIDLT applies the LT predicate on the "group_id" field.
func GroupIDLT(v int64) predicate.GroupProgress {
	return predicate.GroupProgress(sql.FieldLT(FieldGroupID, v))
}

// GroupIDLTE applies the LTE predicate on the "group_id" field.
func GroupIDLTE(v int64) predicate.GroupProgress {
	return predicate.GroupProgress(sql.FieldLTE(FieldGroupID, v))
}

// ProgressEQ applies the EQ predicate on the "progress" field.
func ProgressEQ(v int64) predicate.GroupProgress {
	return predicate.GroupProgress(sql.FieldEQ(FieldProgress, v))
}

// ProgressNEQ applies the NEQ predicate on the "progress" field.
func ProgressNEQ(v int64) predicate.GroupProgress {
	return predicate.GroupProgress(sql.FieldNEQ(FieldProgress, v))
}

// ProgressIn applies the In predicate on the "progress" field.
func ProgressIn(vs ...int64) predicate.GroupProgress {
	return predicate.GroupProgress(sql.FieldIn(FieldProgress, vs...))
}

// ProgressNotIn applies the NotIn predicate on the "progress" field.
func ProgressNotIn(vs ...int64) predicate.GroupProgress {
	return predicate.GroupProgress(sql.FieldNotIn(FieldProgress, vs...))
}

// ProgressGT applies the GT predicate on the "progress" field.
func ProgressGT(v int64) predicate.GroupProgress {
	return predicate.GroupProgress(sql.FieldGT(FieldProgress, v))
}

// ProgressGTE applies the GTE predicate on the "progress" field.
func ProgressGTE(v int64) predicate.GroupProgress {
	return predicate.GroupProgress(sql.FieldGTE(FieldProgress, v))
}

// ProgressLT applies the LT predicate on the "progress" field.
func ProgressLT(v int64) predicate.GroupProgress {
	return predicate.GroupProgress(sql.FieldLT(FieldProgress, v))
}

// ProgressLTE applies the LTE predicate on the "progress" field.
func ProgressLTE(v int64) predicate.GroupProgress {
	return predicate.GroupProgress(sql.FieldLTE(FieldProgress, v))
}

// HasSubEvent applies the HasEdge predicate on the "sub_event" edge.
func HasSubEvent() predicate.GroupProgress {
	return predicate.GroupProgress(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SubEventTable, SubEventColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubEventWith applies the HasEdge predicate on the "sub_event" edge with a given conditions (other predicates).
func HasSubEventWith(preds ...predicate.SubEvent) predicate.GroupProgress {
	return predicate.GroupProgress(func(s *sql.Selector) {
		step := newSubEventStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMember applies the HasEdge predicate on the "member" edge.
func HasMember() predicate.GroupProgress {
	return predicate.GroupProgress(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MemberTable, MemberColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMemberWith applies the HasEdge predicate on the "member" edge with a given conditions (other predicates).
func HasMemberWith(preds ...predicate.MemberProgress) predicate.GroupProgress {
	return predicate.GroupProgress(func(s *sql.Selector) {
		step := newMemberStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GroupProgress) predicate.GroupProgress {
	return predicate.GroupProgress(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GroupProgress) predicate.GroupProgress {
	return predicate.GroupProgress(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GroupProgress) predicate.GroupProgress {
	return predicate.GroupProgress(func(s *sql.Selector) {
		p(s.Not())
	})
}
