// Code generated by ent, DO NOT EDIT.

package groupprogress

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the groupprogress type in the database.
	Label = "group_progress"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldGroupID holds the string denoting the group_id field in the database.
	FieldGroupID = "group_id"
	// FieldProgress holds the string denoting the progress field in the database.
	FieldProgress = "progress"
	// EdgeSubEvent holds the string denoting the sub_event edge name in mutations.
	EdgeSubEvent = "sub_event"
	// EdgeMember holds the string denoting the member edge name in mutations.
	EdgeMember = "member"
	// Table holds the table name of the groupprogress in the database.
	Table = "group_progresses"
	// SubEventTable is the table that holds the sub_event relation/edge.
	SubEventTable = "group_progresses"
	// SubEventInverseTable is the table name for the SubEvent entity.
	// It exists in this package in order to avoid circular dependency with the "subevent" package.
	SubEventInverseTable = "sub_events"
	// SubEventColumn is the table column denoting the sub_event relation/edge.
	SubEventColumn = "sub_event_group"
	// MemberTable is the table that holds the member relation/edge.
	MemberTable = "member_progresses"
	// MemberInverseTable is the table name for the MemberProgress entity.
	// It exists in this package in order to avoid circular dependency with the "memberprogress" package.
	MemberInverseTable = "member_progresses"
	// MemberColumn is the table column denoting the member relation/edge.
	MemberColumn = "group_progress_member"
)

// Columns holds all SQL columns for groupprogress fields.
var Columns = []string{
	FieldID,
	FieldGroupID,
	FieldProgress,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "group_progresses"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"sub_event_group",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultProgress holds the default value on creation for the "progress" field.
	DefaultProgress int64
)

// Order defines the ordering method for the GroupProgress queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByGroupID orders the results by the group_id field.
func ByGroupID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldGroupID, opts...).ToFunc()
}

// ByProgress orders the results by the progress field.
func ByProgress(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldProgress, opts...).ToFunc()
}

// BySubEventField orders the results by sub_event field.
func BySubEventField(field string, opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubEventStep(), sql.OrderByField(field, opts...))
	}
}

// ByMemberCount orders the results by member count.
func ByMemberCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMemberStep(), opts...)
	}
}

// ByMember orders the results by member terms.
func ByMember(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMemberStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSubEventStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubEventInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SubEventTable, SubEventColumn),
	)
}
func newMemberStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MemberInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MemberTable, MemberColumn),
	)
}
