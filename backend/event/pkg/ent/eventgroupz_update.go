// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/manhrev/runtracking/backend/event/pkg/ent/event"
	"github.com/manhrev/runtracking/backend/event/pkg/ent/eventgroupz"
	"github.com/manhrev/runtracking/backend/event/pkg/ent/predicate"
)

// EventGroupzUpdate is the builder for updating EventGroupz entities.
type EventGroupzUpdate struct {
	config
	hooks     []Hook
	mutation  *EventGroupzMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the EventGroupzUpdate builder.
func (egu *EventGroupzUpdate) Where(ps ...predicate.EventGroupz) *EventGroupzUpdate {
	egu.mutation.Where(ps...)
	return egu
}

// AddEventIDs adds the "event" edge to the Event entity by IDs.
func (egu *EventGroupzUpdate) AddEventIDs(ids ...int64) *EventGroupzUpdate {
	egu.mutation.AddEventIDs(ids...)
	return egu
}

// AddEvent adds the "event" edges to the Event entity.
func (egu *EventGroupzUpdate) AddEvent(e ...*Event) *EventGroupzUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return egu.AddEventIDs(ids...)
}

// Mutation returns the EventGroupzMutation object of the builder.
func (egu *EventGroupzUpdate) Mutation() *EventGroupzMutation {
	return egu.mutation
}

// ClearEvent clears all "event" edges to the Event entity.
func (egu *EventGroupzUpdate) ClearEvent() *EventGroupzUpdate {
	egu.mutation.ClearEvent()
	return egu
}

// RemoveEventIDs removes the "event" edge to Event entities by IDs.
func (egu *EventGroupzUpdate) RemoveEventIDs(ids ...int64) *EventGroupzUpdate {
	egu.mutation.RemoveEventIDs(ids...)
	return egu
}

// RemoveEvent removes "event" edges to Event entities.
func (egu *EventGroupzUpdate) RemoveEvent(e ...*Event) *EventGroupzUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return egu.RemoveEventIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (egu *EventGroupzUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, EventGroupzMutation](ctx, egu.sqlSave, egu.mutation, egu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (egu *EventGroupzUpdate) SaveX(ctx context.Context) int {
	affected, err := egu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (egu *EventGroupzUpdate) Exec(ctx context.Context) error {
	_, err := egu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (egu *EventGroupzUpdate) ExecX(ctx context.Context) {
	if err := egu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (egu *EventGroupzUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EventGroupzUpdate {
	egu.modifiers = append(egu.modifiers, modifiers...)
	return egu
}

func (egu *EventGroupzUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(eventgroupz.Table, eventgroupz.Columns, sqlgraph.NewFieldSpec(eventgroupz.FieldID, field.TypeInt64))
	if ps := egu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if egu.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   eventgroupz.EventTable,
			Columns: eventgroupz.EventPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt64),
			},
		}
		createE := &ParticipateCreate{config: egu.config, mutation: newParticipateMutation(egu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := egu.mutation.RemovedEventIDs(); len(nodes) > 0 && !egu.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   eventgroupz.EventTable,
			Columns: eventgroupz.EventPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ParticipateCreate{config: egu.config, mutation: newParticipateMutation(egu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := egu.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   eventgroupz.EventTable,
			Columns: eventgroupz.EventPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ParticipateCreate{config: egu.config, mutation: newParticipateMutation(egu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(egu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, egu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eventgroupz.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	egu.mutation.done = true
	return n, nil
}

// EventGroupzUpdateOne is the builder for updating a single EventGroupz entity.
type EventGroupzUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *EventGroupzMutation
	modifiers []func(*sql.UpdateBuilder)
}

// AddEventIDs adds the "event" edge to the Event entity by IDs.
func (eguo *EventGroupzUpdateOne) AddEventIDs(ids ...int64) *EventGroupzUpdateOne {
	eguo.mutation.AddEventIDs(ids...)
	return eguo
}

// AddEvent adds the "event" edges to the Event entity.
func (eguo *EventGroupzUpdateOne) AddEvent(e ...*Event) *EventGroupzUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eguo.AddEventIDs(ids...)
}

// Mutation returns the EventGroupzMutation object of the builder.
func (eguo *EventGroupzUpdateOne) Mutation() *EventGroupzMutation {
	return eguo.mutation
}

// ClearEvent clears all "event" edges to the Event entity.
func (eguo *EventGroupzUpdateOne) ClearEvent() *EventGroupzUpdateOne {
	eguo.mutation.ClearEvent()
	return eguo
}

// RemoveEventIDs removes the "event" edge to Event entities by IDs.
func (eguo *EventGroupzUpdateOne) RemoveEventIDs(ids ...int64) *EventGroupzUpdateOne {
	eguo.mutation.RemoveEventIDs(ids...)
	return eguo
}

// RemoveEvent removes "event" edges to Event entities.
func (eguo *EventGroupzUpdateOne) RemoveEvent(e ...*Event) *EventGroupzUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eguo.RemoveEventIDs(ids...)
}

// Where appends a list predicates to the EventGroupzUpdate builder.
func (eguo *EventGroupzUpdateOne) Where(ps ...predicate.EventGroupz) *EventGroupzUpdateOne {
	eguo.mutation.Where(ps...)
	return eguo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eguo *EventGroupzUpdateOne) Select(field string, fields ...string) *EventGroupzUpdateOne {
	eguo.fields = append([]string{field}, fields...)
	return eguo
}

// Save executes the query and returns the updated EventGroupz entity.
func (eguo *EventGroupzUpdateOne) Save(ctx context.Context) (*EventGroupz, error) {
	return withHooks[*EventGroupz, EventGroupzMutation](ctx, eguo.sqlSave, eguo.mutation, eguo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eguo *EventGroupzUpdateOne) SaveX(ctx context.Context) *EventGroupz {
	node, err := eguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eguo *EventGroupzUpdateOne) Exec(ctx context.Context) error {
	_, err := eguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eguo *EventGroupzUpdateOne) ExecX(ctx context.Context) {
	if err := eguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (eguo *EventGroupzUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EventGroupzUpdateOne {
	eguo.modifiers = append(eguo.modifiers, modifiers...)
	return eguo
}

func (eguo *EventGroupzUpdateOne) sqlSave(ctx context.Context) (_node *EventGroupz, err error) {
	_spec := sqlgraph.NewUpdateSpec(eventgroupz.Table, eventgroupz.Columns, sqlgraph.NewFieldSpec(eventgroupz.FieldID, field.TypeInt64))
	id, ok := eguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EventGroupz.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, eventgroupz.FieldID)
		for _, f := range fields {
			if !eventgroupz.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != eventgroupz.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if eguo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   eventgroupz.EventTable,
			Columns: eventgroupz.EventPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt64),
			},
		}
		createE := &ParticipateCreate{config: eguo.config, mutation: newParticipateMutation(eguo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eguo.mutation.RemovedEventIDs(); len(nodes) > 0 && !eguo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   eventgroupz.EventTable,
			Columns: eventgroupz.EventPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ParticipateCreate{config: eguo.config, mutation: newParticipateMutation(eguo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eguo.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   eventgroupz.EventTable,
			Columns: eventgroupz.EventPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ParticipateCreate{config: eguo.config, mutation: newParticipateMutation(eguo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(eguo.modifiers...)
	_node = &EventGroupz{config: eguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eventgroupz.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	eguo.mutation.done = true
	return _node, nil
}
