// Code generated by ent, DO NOT EDIT.

package participate

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the participate type in the database.
	Label = "participate"
	// FieldEventGroupID holds the string denoting the event_group_id field in the database.
	FieldEventGroupID = "event_group_id"
	// FieldEventID holds the string denoting the event_id field in the database.
	FieldEventID = "event_id"
	// FieldJoinedAt holds the string denoting the joined_at field in the database.
	FieldJoinedAt = "joined_at"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgeEvent holds the string denoting the event edge name in mutations.
	EdgeEvent = "event"
	// EdgeEventGroup holds the string denoting the event_group edge name in mutations.
	EdgeEventGroup = "event_group"
	// EventFieldID holds the string denoting the ID field of the Event.
	EventFieldID = "id"
	// EventGroupzFieldID holds the string denoting the ID field of the EventGroupz.
	EventGroupzFieldID = "id"
	// Table holds the table name of the participate in the database.
	Table = "participates"
	// EventTable is the table that holds the event relation/edge.
	EventTable = "participates"
	// EventInverseTable is the table name for the Event entity.
	// It exists in this package in order to avoid circular dependency with the "event" package.
	EventInverseTable = "events"
	// EventColumn is the table column denoting the event relation/edge.
	EventColumn = "event_id"
	// EventGroupTable is the table that holds the event_group relation/edge.
	EventGroupTable = "participates"
	// EventGroupInverseTable is the table name for the EventGroupz entity.
	// It exists in this package in order to avoid circular dependency with the "eventgroupz" package.
	EventGroupInverseTable = "event_groupzs"
	// EventGroupColumn is the table column denoting the event_group relation/edge.
	EventGroupColumn = "event_group_id"
)

// Columns holds all SQL columns for participate fields.
var Columns = []string{
	FieldEventGroupID,
	FieldEventID,
	FieldJoinedAt,
	FieldStatus,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultJoinedAt holds the default value on creation for the "joined_at" field.
	DefaultJoinedAt func() time.Time
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int64
)

// Order defines the ordering method for the Participate queries.
type Order func(*sql.Selector)

// ByEventGroupID orders the results by the event_group_id field.
func ByEventGroupID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldEventGroupID, opts...).ToFunc()
}

// ByEventID orders the results by the event_id field.
func ByEventID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldEventID, opts...).ToFunc()
}

// ByJoinedAt orders the results by the joined_at field.
func ByJoinedAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldJoinedAt, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByEventField orders the results by event field.
func ByEventField(field string, opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventStep(), sql.OrderByField(field, opts...))
	}
}

// ByEventGroupField orders the results by event_group field.
func ByEventGroupField(field string, opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventGroupStep(), sql.OrderByField(field, opts...))
	}
}
func newEventStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, EventColumn),
		sqlgraph.To(EventInverseTable, EventFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, EventTable, EventColumn),
	)
}
func newEventGroupStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, EventGroupColumn),
		sqlgraph.To(EventGroupInverseTable, EventGroupzFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, EventGroupTable, EventGroupColumn),
	)
}
