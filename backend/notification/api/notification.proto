syntax = "proto3";

package notification;

option go_package = "github.com/manhrev/runtracking/backend/group/pkg/api;notification";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

service Notification {
    rpc CheckIfExistOrSaveExpoPushToken(ExpoPushTokenRequest) returns (google.protobuf.Empty) {};
    rpc RemoveExpoPushToken(ExpoPushTokenRequest) returns (google.protobuf.Empty) {};
    rpc ListNotificationInfo(ListNotificationInfoRequest) returns(ListNotificationInfoReply) {};
    rpc DeleteNotificationInfo(IdRequest) returns(IdReply) {};
    rpc UpdateNotificationInfo(UpdateNotificationInfoRequest) returns (UpdateNotificationInfoReply) {};
}

message UpdateNotificationInfoRequest{
    int64 id = 1;
    bool is_seen = 2;
}

message UpdateNotificationInfoReply{
    int64 id_updated = 1;
}

message IdRequest{
    int64 id = 1;
}

message IdReply{
    int64 id = 1;
}

message ExpoPushTokenRequest{
    string expo_push_token = 2;
}

message ListNotificationInfoReply{
    repeated NotificationInfo notification_list = 1;
    int64 total = 2;
}

message PushNotiRequest{
    string messeage = 1;
    google.protobuf.Timestamp scheduled_time = 2;
    SOURCE_TYPE source_type = 3;
    int64 source_id = 4;
    repeated int64 receive_ids = 5;
}

message ListNotificationInfoRequest{
    uint32 limit = 1;
    uint64 offset = 2;
}

message NotificationInfo{
    int64 id = 1;
    string message = 2;
    SOURCE_TYPE source_type = 3;
    int64 source_id = 6;

    // size of receive_ids > 0 => notify to list of users with ids given
    repeated int64 receive_ids = 8;
    string image = 7;
    bool is_seen = 4;
    google.protobuf.Timestamp time = 5;
}

enum SOURCE_TYPE{
        ADMIN = 0;
        GROUP = 1;
        EVENT = 2;
        PERSONAL = 3;
        PLAN = 4;
    }





