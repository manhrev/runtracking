// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/manhrev/runtracking/backend/notification/pkg/ent/notification"
	"github.com/manhrev/runtracking/backend/notification/pkg/ent/notificationtype"
	"github.com/manhrev/runtracking/backend/notification/pkg/ent/predicate"
)

// NotificationTypeUpdate is the builder for updating NotificationType entities.
type NotificationTypeUpdate struct {
	config
	hooks    []Hook
	mutation *NotificationTypeMutation
}

// Where appends a list predicates to the NotificationTypeUpdate builder.
func (ntu *NotificationTypeUpdate) Where(ps ...predicate.NotificationType) *NotificationTypeUpdate {
	ntu.mutation.Where(ps...)
	return ntu
}

// SetTypeName sets the "type_name" field.
func (ntu *NotificationTypeUpdate) SetTypeName(s string) *NotificationTypeUpdate {
	ntu.mutation.SetTypeName(s)
	return ntu
}

// SetNillableTypeName sets the "type_name" field if the given value is not nil.
func (ntu *NotificationTypeUpdate) SetNillableTypeName(s *string) *NotificationTypeUpdate {
	if s != nil {
		ntu.SetTypeName(*s)
	}
	return ntu
}

// ClearTypeName clears the value of the "type_name" field.
func (ntu *NotificationTypeUpdate) ClearTypeName() *NotificationTypeUpdate {
	ntu.mutation.ClearTypeName()
	return ntu
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (ntu *NotificationTypeUpdate) AddNotificationIDs(ids ...int64) *NotificationTypeUpdate {
	ntu.mutation.AddNotificationIDs(ids...)
	return ntu
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (ntu *NotificationTypeUpdate) AddNotifications(n ...*Notification) *NotificationTypeUpdate {
	ids := make([]int64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ntu.AddNotificationIDs(ids...)
}

// Mutation returns the NotificationTypeMutation object of the builder.
func (ntu *NotificationTypeUpdate) Mutation() *NotificationTypeMutation {
	return ntu.mutation
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (ntu *NotificationTypeUpdate) ClearNotifications() *NotificationTypeUpdate {
	ntu.mutation.ClearNotifications()
	return ntu
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (ntu *NotificationTypeUpdate) RemoveNotificationIDs(ids ...int64) *NotificationTypeUpdate {
	ntu.mutation.RemoveNotificationIDs(ids...)
	return ntu
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (ntu *NotificationTypeUpdate) RemoveNotifications(n ...*Notification) *NotificationTypeUpdate {
	ids := make([]int64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ntu.RemoveNotificationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ntu *NotificationTypeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, NotificationTypeMutation](ctx, ntu.sqlSave, ntu.mutation, ntu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ntu *NotificationTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := ntu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ntu *NotificationTypeUpdate) Exec(ctx context.Context) error {
	_, err := ntu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ntu *NotificationTypeUpdate) ExecX(ctx context.Context) {
	if err := ntu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ntu *NotificationTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   notificationtype.Table,
			Columns: notificationtype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: notificationtype.FieldID,
			},
		},
	}
	if ps := ntu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ntu.mutation.TypeName(); ok {
		_spec.SetField(notificationtype.FieldTypeName, field.TypeString, value)
	}
	if ntu.mutation.TypeNameCleared() {
		_spec.ClearField(notificationtype.FieldTypeName, field.TypeString)
	}
	if ntu.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationtype.NotificationsTable,
			Columns: []string{notificationtype.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: notification.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ntu.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !ntu.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationtype.NotificationsTable,
			Columns: []string{notificationtype.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: notification.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ntu.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationtype.NotificationsTable,
			Columns: []string{notificationtype.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: notification.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ntu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notificationtype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ntu.mutation.done = true
	return n, nil
}

// NotificationTypeUpdateOne is the builder for updating a single NotificationType entity.
type NotificationTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NotificationTypeMutation
}

// SetTypeName sets the "type_name" field.
func (ntuo *NotificationTypeUpdateOne) SetTypeName(s string) *NotificationTypeUpdateOne {
	ntuo.mutation.SetTypeName(s)
	return ntuo
}

// SetNillableTypeName sets the "type_name" field if the given value is not nil.
func (ntuo *NotificationTypeUpdateOne) SetNillableTypeName(s *string) *NotificationTypeUpdateOne {
	if s != nil {
		ntuo.SetTypeName(*s)
	}
	return ntuo
}

// ClearTypeName clears the value of the "type_name" field.
func (ntuo *NotificationTypeUpdateOne) ClearTypeName() *NotificationTypeUpdateOne {
	ntuo.mutation.ClearTypeName()
	return ntuo
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (ntuo *NotificationTypeUpdateOne) AddNotificationIDs(ids ...int64) *NotificationTypeUpdateOne {
	ntuo.mutation.AddNotificationIDs(ids...)
	return ntuo
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (ntuo *NotificationTypeUpdateOne) AddNotifications(n ...*Notification) *NotificationTypeUpdateOne {
	ids := make([]int64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ntuo.AddNotificationIDs(ids...)
}

// Mutation returns the NotificationTypeMutation object of the builder.
func (ntuo *NotificationTypeUpdateOne) Mutation() *NotificationTypeMutation {
	return ntuo.mutation
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (ntuo *NotificationTypeUpdateOne) ClearNotifications() *NotificationTypeUpdateOne {
	ntuo.mutation.ClearNotifications()
	return ntuo
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (ntuo *NotificationTypeUpdateOne) RemoveNotificationIDs(ids ...int64) *NotificationTypeUpdateOne {
	ntuo.mutation.RemoveNotificationIDs(ids...)
	return ntuo
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (ntuo *NotificationTypeUpdateOne) RemoveNotifications(n ...*Notification) *NotificationTypeUpdateOne {
	ids := make([]int64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ntuo.RemoveNotificationIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ntuo *NotificationTypeUpdateOne) Select(field string, fields ...string) *NotificationTypeUpdateOne {
	ntuo.fields = append([]string{field}, fields...)
	return ntuo
}

// Save executes the query and returns the updated NotificationType entity.
func (ntuo *NotificationTypeUpdateOne) Save(ctx context.Context) (*NotificationType, error) {
	return withHooks[*NotificationType, NotificationTypeMutation](ctx, ntuo.sqlSave, ntuo.mutation, ntuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ntuo *NotificationTypeUpdateOne) SaveX(ctx context.Context) *NotificationType {
	node, err := ntuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ntuo *NotificationTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := ntuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ntuo *NotificationTypeUpdateOne) ExecX(ctx context.Context) {
	if err := ntuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ntuo *NotificationTypeUpdateOne) sqlSave(ctx context.Context) (_node *NotificationType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   notificationtype.Table,
			Columns: notificationtype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: notificationtype.FieldID,
			},
		},
	}
	id, ok := ntuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "NotificationType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ntuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, notificationtype.FieldID)
		for _, f := range fields {
			if !notificationtype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != notificationtype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ntuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ntuo.mutation.TypeName(); ok {
		_spec.SetField(notificationtype.FieldTypeName, field.TypeString, value)
	}
	if ntuo.mutation.TypeNameCleared() {
		_spec.ClearField(notificationtype.FieldTypeName, field.TypeString)
	}
	if ntuo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationtype.NotificationsTable,
			Columns: []string{notificationtype.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: notification.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ntuo.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !ntuo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationtype.NotificationsTable,
			Columns: []string{notificationtype.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: notification.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ntuo.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationtype.NotificationsTable,
			Columns: []string{notificationtype.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: notification.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &NotificationType{config: ntuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ntuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notificationtype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ntuo.mutation.done = true
	return _node, nil
}
