// Code generated by ent, DO NOT EDIT.

package notification

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/manhrev/runtracking/backend/notification/pkg/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldID, id))
}

// Message applies equality check predicate on the "message" field. It's identical to MessageEQ.
func Message(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldMessage, v))
}

// SourceType applies equality check predicate on the "source_type" field. It's identical to SourceTypeEQ.
func SourceType(v int64) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldSourceType, v))
}

// SourceID applies equality check predicate on the "source_id" field. It's identical to SourceIDEQ.
func SourceID(v int64) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldSourceID, v))
}

// ScheduledTime applies equality check predicate on the "scheduled_time" field. It's identical to ScheduledTimeEQ.
func ScheduledTime(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldScheduledTime, v))
}

// MessageEQ applies the EQ predicate on the "message" field.
func MessageEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldMessage, v))
}

// MessageNEQ applies the NEQ predicate on the "message" field.
func MessageNEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldMessage, v))
}

// MessageIn applies the In predicate on the "message" field.
func MessageIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldMessage, vs...))
}

// MessageNotIn applies the NotIn predicate on the "message" field.
func MessageNotIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldMessage, vs...))
}

// MessageGT applies the GT predicate on the "message" field.
func MessageGT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldMessage, v))
}

// MessageGTE applies the GTE predicate on the "message" field.
func MessageGTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldMessage, v))
}

// MessageLT applies the LT predicate on the "message" field.
func MessageLT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldMessage, v))
}

// MessageLTE applies the LTE predicate on the "message" field.
func MessageLTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldMessage, v))
}

// MessageContains applies the Contains predicate on the "message" field.
func MessageContains(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContains(FieldMessage, v))
}

// MessageHasPrefix applies the HasPrefix predicate on the "message" field.
func MessageHasPrefix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasPrefix(FieldMessage, v))
}

// MessageHasSuffix applies the HasSuffix predicate on the "message" field.
func MessageHasSuffix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasSuffix(FieldMessage, v))
}

// MessageIsNil applies the IsNil predicate on the "message" field.
func MessageIsNil() predicate.Notification {
	return predicate.Notification(sql.FieldIsNull(FieldMessage))
}

// MessageNotNil applies the NotNil predicate on the "message" field.
func MessageNotNil() predicate.Notification {
	return predicate.Notification(sql.FieldNotNull(FieldMessage))
}

// MessageEqualFold applies the EqualFold predicate on the "message" field.
func MessageEqualFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEqualFold(FieldMessage, v))
}

// MessageContainsFold applies the ContainsFold predicate on the "message" field.
func MessageContainsFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContainsFold(FieldMessage, v))
}

// SourceTypeEQ applies the EQ predicate on the "source_type" field.
func SourceTypeEQ(v int64) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldSourceType, v))
}

// SourceTypeNEQ applies the NEQ predicate on the "source_type" field.
func SourceTypeNEQ(v int64) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldSourceType, v))
}

// SourceTypeIn applies the In predicate on the "source_type" field.
func SourceTypeIn(vs ...int64) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldSourceType, vs...))
}

// SourceTypeNotIn applies the NotIn predicate on the "source_type" field.
func SourceTypeNotIn(vs ...int64) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldSourceType, vs...))
}

// SourceTypeGT applies the GT predicate on the "source_type" field.
func SourceTypeGT(v int64) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldSourceType, v))
}

// SourceTypeGTE applies the GTE predicate on the "source_type" field.
func SourceTypeGTE(v int64) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldSourceType, v))
}

// SourceTypeLT applies the LT predicate on the "source_type" field.
func SourceTypeLT(v int64) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldSourceType, v))
}

// SourceTypeLTE applies the LTE predicate on the "source_type" field.
func SourceTypeLTE(v int64) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldSourceType, v))
}

// SourceTypeIsNil applies the IsNil predicate on the "source_type" field.
func SourceTypeIsNil() predicate.Notification {
	return predicate.Notification(sql.FieldIsNull(FieldSourceType))
}

// SourceTypeNotNil applies the NotNil predicate on the "source_type" field.
func SourceTypeNotNil() predicate.Notification {
	return predicate.Notification(sql.FieldNotNull(FieldSourceType))
}

// SourceIDEQ applies the EQ predicate on the "source_id" field.
func SourceIDEQ(v int64) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldSourceID, v))
}

// SourceIDNEQ applies the NEQ predicate on the "source_id" field.
func SourceIDNEQ(v int64) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldSourceID, v))
}

// SourceIDIn applies the In predicate on the "source_id" field.
func SourceIDIn(vs ...int64) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldSourceID, vs...))
}

// SourceIDNotIn applies the NotIn predicate on the "source_id" field.
func SourceIDNotIn(vs ...int64) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldSourceID, vs...))
}

// SourceIDGT applies the GT predicate on the "source_id" field.
func SourceIDGT(v int64) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldSourceID, v))
}

// SourceIDGTE applies the GTE predicate on the "source_id" field.
func SourceIDGTE(v int64) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldSourceID, v))
}

// SourceIDLT applies the LT predicate on the "source_id" field.
func SourceIDLT(v int64) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldSourceID, v))
}

// SourceIDLTE applies the LTE predicate on the "source_id" field.
func SourceIDLTE(v int64) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldSourceID, v))
}

// SourceIDIsNil applies the IsNil predicate on the "source_id" field.
func SourceIDIsNil() predicate.Notification {
	return predicate.Notification(sql.FieldIsNull(FieldSourceID))
}

// SourceIDNotNil applies the NotNil predicate on the "source_id" field.
func SourceIDNotNil() predicate.Notification {
	return predicate.Notification(sql.FieldNotNull(FieldSourceID))
}

// ReceiveIdsIsNil applies the IsNil predicate on the "receive_ids" field.
func ReceiveIdsIsNil() predicate.Notification {
	return predicate.Notification(sql.FieldIsNull(FieldReceiveIds))
}

// ReceiveIdsNotNil applies the NotNil predicate on the "receive_ids" field.
func ReceiveIdsNotNil() predicate.Notification {
	return predicate.Notification(sql.FieldNotNull(FieldReceiveIds))
}

// ScheduledTimeEQ applies the EQ predicate on the "scheduled_time" field.
func ScheduledTimeEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldScheduledTime, v))
}

// ScheduledTimeNEQ applies the NEQ predicate on the "scheduled_time" field.
func ScheduledTimeNEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldScheduledTime, v))
}

// ScheduledTimeIn applies the In predicate on the "scheduled_time" field.
func ScheduledTimeIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldScheduledTime, vs...))
}

// ScheduledTimeNotIn applies the NotIn predicate on the "scheduled_time" field.
func ScheduledTimeNotIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldScheduledTime, vs...))
}

// ScheduledTimeGT applies the GT predicate on the "scheduled_time" field.
func ScheduledTimeGT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldScheduledTime, v))
}

// ScheduledTimeGTE applies the GTE predicate on the "scheduled_time" field.
func ScheduledTimeGTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldScheduledTime, v))
}

// ScheduledTimeLT applies the LT predicate on the "scheduled_time" field.
func ScheduledTimeLT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldScheduledTime, v))
}

// ScheduledTimeLTE applies the LTE predicate on the "scheduled_time" field.
func ScheduledTimeLTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldScheduledTime, v))
}

// ScheduledTimeIsNil applies the IsNil predicate on the "scheduled_time" field.
func ScheduledTimeIsNil() predicate.Notification {
	return predicate.Notification(sql.FieldIsNull(FieldScheduledTime))
}

// ScheduledTimeNotNil applies the NotNil predicate on the "scheduled_time" field.
func ScheduledTimeNotNil() predicate.Notification {
	return predicate.Notification(sql.FieldNotNull(FieldScheduledTime))
}

// HasNotificationUsers applies the HasEdge predicate on the "notification_users" edge.
func HasNotificationUsers() predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, NotificationUsersTable, NotificationUsersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNotificationUsersWith applies the HasEdge predicate on the "notification_users" edge with a given conditions (other predicates).
func HasNotificationUsersWith(preds ...predicate.NotificationUser) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(NotificationUsersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, NotificationUsersTable, NotificationUsersColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Notification) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Notification) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Notification) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		p(s.Not())
	})
}
