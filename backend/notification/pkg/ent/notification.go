// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/manhrev/runtracking/backend/notification/pkg/ent/notification"
	"github.com/manhrev/runtracking/backend/notification/pkg/ent/notificationtype"
)

// Notification is the model entity for the Notification schema.
type Notification struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
	// TypeID holds the value of the "type_id" field.
	TypeID int64 `json:"type_id,omitempty"`
	// ScheduledTime holds the value of the "scheduled_time" field.
	ScheduledTime time.Time `json:"scheduled_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NotificationQuery when eager-loading is set.
	Edges                           NotificationEdges `json:"edges"`
	notification_type_notifications *int64
}

// NotificationEdges holds the relations/edges for other nodes in the graph.
type NotificationEdges struct {
	// NotificationType holds the value of the notification_type edge.
	NotificationType *NotificationType `json:"notification_type,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// NotificationTypeOrErr returns the NotificationType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NotificationEdges) NotificationTypeOrErr() (*NotificationType, error) {
	if e.loadedTypes[0] {
		if e.NotificationType == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: notificationtype.Label}
		}
		return e.NotificationType, nil
	}
	return nil, &NotLoadedError{edge: "notification_type"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Notification) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case notification.FieldID, notification.FieldTypeID:
			values[i] = new(sql.NullInt64)
		case notification.FieldMessage:
			values[i] = new(sql.NullString)
		case notification.FieldScheduledTime:
			values[i] = new(sql.NullTime)
		case notification.ForeignKeys[0]: // notification_type_notifications
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Notification", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Notification fields.
func (n *Notification) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case notification.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			n.ID = int64(value.Int64)
		case notification.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				n.Message = value.String
			}
		case notification.FieldTypeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type_id", values[i])
			} else if value.Valid {
				n.TypeID = value.Int64
			}
		case notification.FieldScheduledTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field scheduled_time", values[i])
			} else if value.Valid {
				n.ScheduledTime = value.Time
			}
		case notification.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field notification_type_notifications", value)
			} else if value.Valid {
				n.notification_type_notifications = new(int64)
				*n.notification_type_notifications = int64(value.Int64)
			}
		}
	}
	return nil
}

// QueryNotificationType queries the "notification_type" edge of the Notification entity.
func (n *Notification) QueryNotificationType() *NotificationTypeQuery {
	return NewNotificationClient(n.config).QueryNotificationType(n)
}

// Update returns a builder for updating this Notification.
// Note that you need to call Notification.Unwrap() before calling this method if this Notification
// was returned from a transaction, and the transaction was committed or rolled back.
func (n *Notification) Update() *NotificationUpdateOne {
	return NewNotificationClient(n.config).UpdateOne(n)
}

// Unwrap unwraps the Notification entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (n *Notification) Unwrap() *Notification {
	_tx, ok := n.config.driver.(*txDriver)
	if !ok {
		panic("ent: Notification is not a transactional entity")
	}
	n.config.driver = _tx.drv
	return n
}

// String implements the fmt.Stringer.
func (n *Notification) String() string {
	var builder strings.Builder
	builder.WriteString("Notification(")
	builder.WriteString(fmt.Sprintf("id=%v, ", n.ID))
	builder.WriteString("message=")
	builder.WriteString(n.Message)
	builder.WriteString(", ")
	builder.WriteString("type_id=")
	builder.WriteString(fmt.Sprintf("%v", n.TypeID))
	builder.WriteString(", ")
	builder.WriteString("scheduled_time=")
	builder.WriteString(n.ScheduledTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Notifications is a parsable slice of Notification.
type Notifications []*Notification

func (n Notifications) config(cfg config) {
	for _i := range n {
		n[_i].config = cfg
	}
}
