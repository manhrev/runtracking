// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/manhrev/runtracking/backend/notification/pkg/ent/notificationtype"
)

// NotificationType is the model entity for the NotificationType schema.
type NotificationType struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// TypeName holds the value of the "type_name" field.
	TypeName string `json:"type_name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NotificationTypeQuery when eager-loading is set.
	Edges                           NotificationTypeEdges `json:"edges"`
	notification_user_notifications *int64
}

// NotificationTypeEdges holds the relations/edges for other nodes in the graph.
type NotificationTypeEdges struct {
	// Notifications holds the value of the notifications edge.
	Notifications []*Notification `json:"notifications,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// NotificationsOrErr returns the Notifications value or an error if the edge
// was not loaded in eager-loading.
func (e NotificationTypeEdges) NotificationsOrErr() ([]*Notification, error) {
	if e.loadedTypes[0] {
		return e.Notifications, nil
	}
	return nil, &NotLoadedError{edge: "notifications"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NotificationType) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case notificationtype.FieldID:
			values[i] = new(sql.NullInt64)
		case notificationtype.FieldTypeName:
			values[i] = new(sql.NullString)
		case notificationtype.ForeignKeys[0]: // notification_user_notifications
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type NotificationType", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NotificationType fields.
func (nt *NotificationType) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case notificationtype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			nt.ID = int64(value.Int64)
		case notificationtype.FieldTypeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type_name", values[i])
			} else if value.Valid {
				nt.TypeName = value.String
			}
		case notificationtype.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field notification_user_notifications", value)
			} else if value.Valid {
				nt.notification_user_notifications = new(int64)
				*nt.notification_user_notifications = int64(value.Int64)
			}
		}
	}
	return nil
}

// QueryNotifications queries the "notifications" edge of the NotificationType entity.
func (nt *NotificationType) QueryNotifications() *NotificationQuery {
	return NewNotificationTypeClient(nt.config).QueryNotifications(nt)
}

// Update returns a builder for updating this NotificationType.
// Note that you need to call NotificationType.Unwrap() before calling this method if this NotificationType
// was returned from a transaction, and the transaction was committed or rolled back.
func (nt *NotificationType) Update() *NotificationTypeUpdateOne {
	return NewNotificationTypeClient(nt.config).UpdateOne(nt)
}

// Unwrap unwraps the NotificationType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (nt *NotificationType) Unwrap() *NotificationType {
	_tx, ok := nt.config.driver.(*txDriver)
	if !ok {
		panic("ent: NotificationType is not a transactional entity")
	}
	nt.config.driver = _tx.drv
	return nt
}

// String implements the fmt.Stringer.
func (nt *NotificationType) String() string {
	var builder strings.Builder
	builder.WriteString("NotificationType(")
	builder.WriteString(fmt.Sprintf("id=%v, ", nt.ID))
	builder.WriteString("type_name=")
	builder.WriteString(nt.TypeName)
	builder.WriteByte(')')
	return builder.String()
}

// NotificationTypes is a parsable slice of NotificationType.
type NotificationTypes []*NotificationType

func (nt NotificationTypes) config(cfg config) {
	for _i := range nt {
		nt[_i].config = cfg
	}
}
