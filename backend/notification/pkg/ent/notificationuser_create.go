// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/manhrev/runtracking/backend/notification/pkg/ent/notification"
	"github.com/manhrev/runtracking/backend/notification/pkg/ent/notificationuser"
)

// NotificationUserCreate is the builder for creating a NotificationUser entity.
type NotificationUserCreate struct {
	config
	mutation *NotificationUserMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (nuc *NotificationUserCreate) SetUserID(i int64) *NotificationUserCreate {
	nuc.mutation.SetUserID(i)
	return nuc
}

// SetIsSeen sets the "is_seen" field.
func (nuc *NotificationUserCreate) SetIsSeen(b bool) *NotificationUserCreate {
	nuc.mutation.SetIsSeen(b)
	return nuc
}

// SetNillableIsSeen sets the "is_seen" field if the given value is not nil.
func (nuc *NotificationUserCreate) SetNillableIsSeen(b *bool) *NotificationUserCreate {
	if b != nil {
		nuc.SetIsSeen(*b)
	}
	return nuc
}

// SetCreatedAt sets the "created_at" field.
func (nuc *NotificationUserCreate) SetCreatedAt(t time.Time) *NotificationUserCreate {
	nuc.mutation.SetCreatedAt(t)
	return nuc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nuc *NotificationUserCreate) SetNillableCreatedAt(t *time.Time) *NotificationUserCreate {
	if t != nil {
		nuc.SetCreatedAt(*t)
	}
	return nuc
}

// SetID sets the "id" field.
func (nuc *NotificationUserCreate) SetID(i int64) *NotificationUserCreate {
	nuc.mutation.SetID(i)
	return nuc
}

// SetNotificationID sets the "notification" edge to the Notification entity by ID.
func (nuc *NotificationUserCreate) SetNotificationID(id int64) *NotificationUserCreate {
	nuc.mutation.SetNotificationID(id)
	return nuc
}

// SetNillableNotificationID sets the "notification" edge to the Notification entity by ID if the given value is not nil.
func (nuc *NotificationUserCreate) SetNillableNotificationID(id *int64) *NotificationUserCreate {
	if id != nil {
		nuc = nuc.SetNotificationID(*id)
	}
	return nuc
}

// SetNotification sets the "notification" edge to the Notification entity.
func (nuc *NotificationUserCreate) SetNotification(n *Notification) *NotificationUserCreate {
	return nuc.SetNotificationID(n.ID)
}

// Mutation returns the NotificationUserMutation object of the builder.
func (nuc *NotificationUserCreate) Mutation() *NotificationUserMutation {
	return nuc.mutation
}

// Save creates the NotificationUser in the database.
func (nuc *NotificationUserCreate) Save(ctx context.Context) (*NotificationUser, error) {
	nuc.defaults()
	return withHooks[*NotificationUser, NotificationUserMutation](ctx, nuc.sqlSave, nuc.mutation, nuc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (nuc *NotificationUserCreate) SaveX(ctx context.Context) *NotificationUser {
	v, err := nuc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nuc *NotificationUserCreate) Exec(ctx context.Context) error {
	_, err := nuc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuc *NotificationUserCreate) ExecX(ctx context.Context) {
	if err := nuc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nuc *NotificationUserCreate) defaults() {
	if _, ok := nuc.mutation.CreatedAt(); !ok {
		v := notificationuser.DefaultCreatedAt()
		nuc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nuc *NotificationUserCreate) check() error {
	if _, ok := nuc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "NotificationUser.user_id"`)}
	}
	if _, ok := nuc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "NotificationUser.created_at"`)}
	}
	return nil
}

func (nuc *NotificationUserCreate) sqlSave(ctx context.Context) (*NotificationUser, error) {
	if err := nuc.check(); err != nil {
		return nil, err
	}
	_node, _spec := nuc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nuc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	nuc.mutation.id = &_node.ID
	nuc.mutation.done = true
	return _node, nil
}

func (nuc *NotificationUserCreate) createSpec() (*NotificationUser, *sqlgraph.CreateSpec) {
	var (
		_node = &NotificationUser{config: nuc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: notificationuser.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: notificationuser.FieldID,
			},
		}
	)
	if id, ok := nuc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := nuc.mutation.UserID(); ok {
		_spec.SetField(notificationuser.FieldUserID, field.TypeInt64, value)
		_node.UserID = value
	}
	if value, ok := nuc.mutation.IsSeen(); ok {
		_spec.SetField(notificationuser.FieldIsSeen, field.TypeBool, value)
		_node.IsSeen = value
	}
	if value, ok := nuc.mutation.CreatedAt(); ok {
		_spec.SetField(notificationuser.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := nuc.mutation.NotificationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notificationuser.NotificationTable,
			Columns: []string{notificationuser.NotificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: notification.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.notification_notification_users = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// NotificationUserCreateBulk is the builder for creating many NotificationUser entities in bulk.
type NotificationUserCreateBulk struct {
	config
	builders []*NotificationUserCreate
}

// Save creates the NotificationUser entities in the database.
func (nucb *NotificationUserCreateBulk) Save(ctx context.Context) ([]*NotificationUser, error) {
	specs := make([]*sqlgraph.CreateSpec, len(nucb.builders))
	nodes := make([]*NotificationUser, len(nucb.builders))
	mutators := make([]Mutator, len(nucb.builders))
	for i := range nucb.builders {
		func(i int, root context.Context) {
			builder := nucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NotificationUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, nucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, nucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, nucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (nucb *NotificationUserCreateBulk) SaveX(ctx context.Context) []*NotificationUser {
	v, err := nucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nucb *NotificationUserCreateBulk) Exec(ctx context.Context) error {
	_, err := nucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nucb *NotificationUserCreateBulk) ExecX(ctx context.Context) {
	if err := nucb.Exec(ctx); err != nil {
		panic(err)
	}
}
