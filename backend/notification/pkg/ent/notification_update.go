// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/manhrev/runtracking/backend/notification/pkg/ent/notification"
	"github.com/manhrev/runtracking/backend/notification/pkg/ent/notificationuser"
	"github.com/manhrev/runtracking/backend/notification/pkg/ent/predicate"
)

// NotificationUpdate is the builder for updating Notification entities.
type NotificationUpdate struct {
	config
	hooks     []Hook
	mutation  *NotificationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the NotificationUpdate builder.
func (nu *NotificationUpdate) Where(ps ...predicate.Notification) *NotificationUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetMessage sets the "message" field.
func (nu *NotificationUpdate) SetMessage(s string) *NotificationUpdate {
	nu.mutation.SetMessage(s)
	return nu
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableMessage(s *string) *NotificationUpdate {
	if s != nil {
		nu.SetMessage(*s)
	}
	return nu
}

// ClearMessage clears the value of the "message" field.
func (nu *NotificationUpdate) ClearMessage() *NotificationUpdate {
	nu.mutation.ClearMessage()
	return nu
}

// SetSourceType sets the "source_type" field.
func (nu *NotificationUpdate) SetSourceType(i int64) *NotificationUpdate {
	nu.mutation.ResetSourceType()
	nu.mutation.SetSourceType(i)
	return nu
}

// SetNillableSourceType sets the "source_type" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableSourceType(i *int64) *NotificationUpdate {
	if i != nil {
		nu.SetSourceType(*i)
	}
	return nu
}

// AddSourceType adds i to the "source_type" field.
func (nu *NotificationUpdate) AddSourceType(i int64) *NotificationUpdate {
	nu.mutation.AddSourceType(i)
	return nu
}

// ClearSourceType clears the value of the "source_type" field.
func (nu *NotificationUpdate) ClearSourceType() *NotificationUpdate {
	nu.mutation.ClearSourceType()
	return nu
}

// SetSourceID sets the "source_id" field.
func (nu *NotificationUpdate) SetSourceID(i int64) *NotificationUpdate {
	nu.mutation.ResetSourceID()
	nu.mutation.SetSourceID(i)
	return nu
}

// SetNillableSourceID sets the "source_id" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableSourceID(i *int64) *NotificationUpdate {
	if i != nil {
		nu.SetSourceID(*i)
	}
	return nu
}

// AddSourceID adds i to the "source_id" field.
func (nu *NotificationUpdate) AddSourceID(i int64) *NotificationUpdate {
	nu.mutation.AddSourceID(i)
	return nu
}

// ClearSourceID clears the value of the "source_id" field.
func (nu *NotificationUpdate) ClearSourceID() *NotificationUpdate {
	nu.mutation.ClearSourceID()
	return nu
}

// SetReceiveIds sets the "receive_ids" field.
func (nu *NotificationUpdate) SetReceiveIds(i []int64) *NotificationUpdate {
	nu.mutation.SetReceiveIds(i)
	return nu
}

// AppendReceiveIds appends i to the "receive_ids" field.
func (nu *NotificationUpdate) AppendReceiveIds(i []int64) *NotificationUpdate {
	nu.mutation.AppendReceiveIds(i)
	return nu
}

// ClearReceiveIds clears the value of the "receive_ids" field.
func (nu *NotificationUpdate) ClearReceiveIds() *NotificationUpdate {
	nu.mutation.ClearReceiveIds()
	return nu
}

// SetScheduledTime sets the "scheduled_time" field.
func (nu *NotificationUpdate) SetScheduledTime(t time.Time) *NotificationUpdate {
	nu.mutation.SetScheduledTime(t)
	return nu
}

// SetNillableScheduledTime sets the "scheduled_time" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableScheduledTime(t *time.Time) *NotificationUpdate {
	if t != nil {
		nu.SetScheduledTime(*t)
	}
	return nu
}

// ClearScheduledTime clears the value of the "scheduled_time" field.
func (nu *NotificationUpdate) ClearScheduledTime() *NotificationUpdate {
	nu.mutation.ClearScheduledTime()
	return nu
}

// AddNotificationUserIDs adds the "notification_users" edge to the NotificationUser entity by IDs.
func (nu *NotificationUpdate) AddNotificationUserIDs(ids ...int64) *NotificationUpdate {
	nu.mutation.AddNotificationUserIDs(ids...)
	return nu
}

// AddNotificationUsers adds the "notification_users" edges to the NotificationUser entity.
func (nu *NotificationUpdate) AddNotificationUsers(n ...*NotificationUser) *NotificationUpdate {
	ids := make([]int64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nu.AddNotificationUserIDs(ids...)
}

// Mutation returns the NotificationMutation object of the builder.
func (nu *NotificationUpdate) Mutation() *NotificationMutation {
	return nu.mutation
}

// ClearNotificationUsers clears all "notification_users" edges to the NotificationUser entity.
func (nu *NotificationUpdate) ClearNotificationUsers() *NotificationUpdate {
	nu.mutation.ClearNotificationUsers()
	return nu
}

// RemoveNotificationUserIDs removes the "notification_users" edge to NotificationUser entities by IDs.
func (nu *NotificationUpdate) RemoveNotificationUserIDs(ids ...int64) *NotificationUpdate {
	nu.mutation.RemoveNotificationUserIDs(ids...)
	return nu
}

// RemoveNotificationUsers removes "notification_users" edges to NotificationUser entities.
func (nu *NotificationUpdate) RemoveNotificationUsers(n ...*NotificationUser) *NotificationUpdate {
	ids := make([]int64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nu.RemoveNotificationUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NotificationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, NotificationMutation](ctx, nu.sqlSave, nu.mutation, nu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NotificationUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NotificationUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NotificationUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (nu *NotificationUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *NotificationUpdate {
	nu.modifiers = append(nu.modifiers, modifiers...)
	return nu
}

func (nu *NotificationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   notification.Table,
			Columns: notification.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: notification.FieldID,
			},
		},
	}
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.Message(); ok {
		_spec.SetField(notification.FieldMessage, field.TypeString, value)
	}
	if nu.mutation.MessageCleared() {
		_spec.ClearField(notification.FieldMessage, field.TypeString)
	}
	if value, ok := nu.mutation.SourceType(); ok {
		_spec.SetField(notification.FieldSourceType, field.TypeInt64, value)
	}
	if value, ok := nu.mutation.AddedSourceType(); ok {
		_spec.AddField(notification.FieldSourceType, field.TypeInt64, value)
	}
	if nu.mutation.SourceTypeCleared() {
		_spec.ClearField(notification.FieldSourceType, field.TypeInt64)
	}
	if value, ok := nu.mutation.SourceID(); ok {
		_spec.SetField(notification.FieldSourceID, field.TypeInt64, value)
	}
	if value, ok := nu.mutation.AddedSourceID(); ok {
		_spec.AddField(notification.FieldSourceID, field.TypeInt64, value)
	}
	if nu.mutation.SourceIDCleared() {
		_spec.ClearField(notification.FieldSourceID, field.TypeInt64)
	}
	if value, ok := nu.mutation.ReceiveIds(); ok {
		_spec.SetField(notification.FieldReceiveIds, field.TypeJSON, value)
	}
	if value, ok := nu.mutation.AppendedReceiveIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, notification.FieldReceiveIds, value)
		})
	}
	if nu.mutation.ReceiveIdsCleared() {
		_spec.ClearField(notification.FieldReceiveIds, field.TypeJSON)
	}
	if value, ok := nu.mutation.ScheduledTime(); ok {
		_spec.SetField(notification.FieldScheduledTime, field.TypeTime, value)
	}
	if nu.mutation.ScheduledTimeCleared() {
		_spec.ClearField(notification.FieldScheduledTime, field.TypeTime)
	}
	if nu.mutation.NotificationUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notification.NotificationUsersTable,
			Columns: []string{notification.NotificationUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: notificationuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedNotificationUsersIDs(); len(nodes) > 0 && !nu.mutation.NotificationUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notification.NotificationUsersTable,
			Columns: []string{notification.NotificationUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: notificationuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.NotificationUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notification.NotificationUsersTable,
			Columns: []string{notification.NotificationUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: notificationuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(nu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nu.mutation.done = true
	return n, nil
}

// NotificationUpdateOne is the builder for updating a single Notification entity.
type NotificationUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *NotificationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetMessage sets the "message" field.
func (nuo *NotificationUpdateOne) SetMessage(s string) *NotificationUpdateOne {
	nuo.mutation.SetMessage(s)
	return nuo
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableMessage(s *string) *NotificationUpdateOne {
	if s != nil {
		nuo.SetMessage(*s)
	}
	return nuo
}

// ClearMessage clears the value of the "message" field.
func (nuo *NotificationUpdateOne) ClearMessage() *NotificationUpdateOne {
	nuo.mutation.ClearMessage()
	return nuo
}

// SetSourceType sets the "source_type" field.
func (nuo *NotificationUpdateOne) SetSourceType(i int64) *NotificationUpdateOne {
	nuo.mutation.ResetSourceType()
	nuo.mutation.SetSourceType(i)
	return nuo
}

// SetNillableSourceType sets the "source_type" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableSourceType(i *int64) *NotificationUpdateOne {
	if i != nil {
		nuo.SetSourceType(*i)
	}
	return nuo
}

// AddSourceType adds i to the "source_type" field.
func (nuo *NotificationUpdateOne) AddSourceType(i int64) *NotificationUpdateOne {
	nuo.mutation.AddSourceType(i)
	return nuo
}

// ClearSourceType clears the value of the "source_type" field.
func (nuo *NotificationUpdateOne) ClearSourceType() *NotificationUpdateOne {
	nuo.mutation.ClearSourceType()
	return nuo
}

// SetSourceID sets the "source_id" field.
func (nuo *NotificationUpdateOne) SetSourceID(i int64) *NotificationUpdateOne {
	nuo.mutation.ResetSourceID()
	nuo.mutation.SetSourceID(i)
	return nuo
}

// SetNillableSourceID sets the "source_id" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableSourceID(i *int64) *NotificationUpdateOne {
	if i != nil {
		nuo.SetSourceID(*i)
	}
	return nuo
}

// AddSourceID adds i to the "source_id" field.
func (nuo *NotificationUpdateOne) AddSourceID(i int64) *NotificationUpdateOne {
	nuo.mutation.AddSourceID(i)
	return nuo
}

// ClearSourceID clears the value of the "source_id" field.
func (nuo *NotificationUpdateOne) ClearSourceID() *NotificationUpdateOne {
	nuo.mutation.ClearSourceID()
	return nuo
}

// SetReceiveIds sets the "receive_ids" field.
func (nuo *NotificationUpdateOne) SetReceiveIds(i []int64) *NotificationUpdateOne {
	nuo.mutation.SetReceiveIds(i)
	return nuo
}

// AppendReceiveIds appends i to the "receive_ids" field.
func (nuo *NotificationUpdateOne) AppendReceiveIds(i []int64) *NotificationUpdateOne {
	nuo.mutation.AppendReceiveIds(i)
	return nuo
}

// ClearReceiveIds clears the value of the "receive_ids" field.
func (nuo *NotificationUpdateOne) ClearReceiveIds() *NotificationUpdateOne {
	nuo.mutation.ClearReceiveIds()
	return nuo
}

// SetScheduledTime sets the "scheduled_time" field.
func (nuo *NotificationUpdateOne) SetScheduledTime(t time.Time) *NotificationUpdateOne {
	nuo.mutation.SetScheduledTime(t)
	return nuo
}

// SetNillableScheduledTime sets the "scheduled_time" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableScheduledTime(t *time.Time) *NotificationUpdateOne {
	if t != nil {
		nuo.SetScheduledTime(*t)
	}
	return nuo
}

// ClearScheduledTime clears the value of the "scheduled_time" field.
func (nuo *NotificationUpdateOne) ClearScheduledTime() *NotificationUpdateOne {
	nuo.mutation.ClearScheduledTime()
	return nuo
}

// AddNotificationUserIDs adds the "notification_users" edge to the NotificationUser entity by IDs.
func (nuo *NotificationUpdateOne) AddNotificationUserIDs(ids ...int64) *NotificationUpdateOne {
	nuo.mutation.AddNotificationUserIDs(ids...)
	return nuo
}

// AddNotificationUsers adds the "notification_users" edges to the NotificationUser entity.
func (nuo *NotificationUpdateOne) AddNotificationUsers(n ...*NotificationUser) *NotificationUpdateOne {
	ids := make([]int64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nuo.AddNotificationUserIDs(ids...)
}

// Mutation returns the NotificationMutation object of the builder.
func (nuo *NotificationUpdateOne) Mutation() *NotificationMutation {
	return nuo.mutation
}

// ClearNotificationUsers clears all "notification_users" edges to the NotificationUser entity.
func (nuo *NotificationUpdateOne) ClearNotificationUsers() *NotificationUpdateOne {
	nuo.mutation.ClearNotificationUsers()
	return nuo
}

// RemoveNotificationUserIDs removes the "notification_users" edge to NotificationUser entities by IDs.
func (nuo *NotificationUpdateOne) RemoveNotificationUserIDs(ids ...int64) *NotificationUpdateOne {
	nuo.mutation.RemoveNotificationUserIDs(ids...)
	return nuo
}

// RemoveNotificationUsers removes "notification_users" edges to NotificationUser entities.
func (nuo *NotificationUpdateOne) RemoveNotificationUsers(n ...*NotificationUser) *NotificationUpdateOne {
	ids := make([]int64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nuo.RemoveNotificationUserIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NotificationUpdateOne) Select(field string, fields ...string) *NotificationUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated Notification entity.
func (nuo *NotificationUpdateOne) Save(ctx context.Context) (*Notification, error) {
	return withHooks[*Notification, NotificationMutation](ctx, nuo.sqlSave, nuo.mutation, nuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NotificationUpdateOne) SaveX(ctx context.Context) *Notification {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NotificationUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NotificationUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (nuo *NotificationUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *NotificationUpdateOne {
	nuo.modifiers = append(nuo.modifiers, modifiers...)
	return nuo
}

func (nuo *NotificationUpdateOne) sqlSave(ctx context.Context) (_node *Notification, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   notification.Table,
			Columns: notification.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: notification.FieldID,
			},
		},
	}
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Notification.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, notification.FieldID)
		for _, f := range fields {
			if !notification.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != notification.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.Message(); ok {
		_spec.SetField(notification.FieldMessage, field.TypeString, value)
	}
	if nuo.mutation.MessageCleared() {
		_spec.ClearField(notification.FieldMessage, field.TypeString)
	}
	if value, ok := nuo.mutation.SourceType(); ok {
		_spec.SetField(notification.FieldSourceType, field.TypeInt64, value)
	}
	if value, ok := nuo.mutation.AddedSourceType(); ok {
		_spec.AddField(notification.FieldSourceType, field.TypeInt64, value)
	}
	if nuo.mutation.SourceTypeCleared() {
		_spec.ClearField(notification.FieldSourceType, field.TypeInt64)
	}
	if value, ok := nuo.mutation.SourceID(); ok {
		_spec.SetField(notification.FieldSourceID, field.TypeInt64, value)
	}
	if value, ok := nuo.mutation.AddedSourceID(); ok {
		_spec.AddField(notification.FieldSourceID, field.TypeInt64, value)
	}
	if nuo.mutation.SourceIDCleared() {
		_spec.ClearField(notification.FieldSourceID, field.TypeInt64)
	}
	if value, ok := nuo.mutation.ReceiveIds(); ok {
		_spec.SetField(notification.FieldReceiveIds, field.TypeJSON, value)
	}
	if value, ok := nuo.mutation.AppendedReceiveIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, notification.FieldReceiveIds, value)
		})
	}
	if nuo.mutation.ReceiveIdsCleared() {
		_spec.ClearField(notification.FieldReceiveIds, field.TypeJSON)
	}
	if value, ok := nuo.mutation.ScheduledTime(); ok {
		_spec.SetField(notification.FieldScheduledTime, field.TypeTime, value)
	}
	if nuo.mutation.ScheduledTimeCleared() {
		_spec.ClearField(notification.FieldScheduledTime, field.TypeTime)
	}
	if nuo.mutation.NotificationUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notification.NotificationUsersTable,
			Columns: []string{notification.NotificationUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: notificationuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedNotificationUsersIDs(); len(nodes) > 0 && !nuo.mutation.NotificationUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notification.NotificationUsersTable,
			Columns: []string{notification.NotificationUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: notificationuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.NotificationUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notification.NotificationUsersTable,
			Columns: []string{notification.NotificationUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: notificationuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(nuo.modifiers...)
	_node = &Notification{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nuo.mutation.done = true
	return _node, nil
}
