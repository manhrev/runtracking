// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/manhrev/runtracking/backend/notification/pkg/ent/notification"
	"github.com/manhrev/runtracking/backend/notification/pkg/ent/notificationuser"
	"github.com/manhrev/runtracking/backend/notification/pkg/ent/predicate"
	"github.com/manhrev/runtracking/backend/notification/pkg/ent/userdevice"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeNotification     = "Notification"
	TypeNotificationUser = "NotificationUser"
	TypeUserDevice       = "UserDevice"
)

// NotificationMutation represents an operation that mutates the Notification nodes in the graph.
type NotificationMutation struct {
	config
	op                        Op
	typ                       string
	id                        *int64
	message                   *string
	source_type               *int64
	addsource_type            *int64
	source_id                 *int64
	addsource_id              *int64
	receive_ids               *[]int64
	appendreceive_ids         []int64
	scheduled_time            *time.Time
	clearedFields             map[string]struct{}
	notification_users        map[int64]struct{}
	removednotification_users map[int64]struct{}
	clearednotification_users bool
	done                      bool
	oldValue                  func(context.Context) (*Notification, error)
	predicates                []predicate.Notification
}

var _ ent.Mutation = (*NotificationMutation)(nil)

// notificationOption allows management of the mutation configuration using functional options.
type notificationOption func(*NotificationMutation)

// newNotificationMutation creates new mutation for the Notification entity.
func newNotificationMutation(c config, op Op, opts ...notificationOption) *NotificationMutation {
	m := &NotificationMutation{
		config:        c,
		op:            op,
		typ:           TypeNotification,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNotificationID sets the ID field of the mutation.
func withNotificationID(id int64) notificationOption {
	return func(m *NotificationMutation) {
		var (
			err   error
			once  sync.Once
			value *Notification
		)
		m.oldValue = func(ctx context.Context) (*Notification, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Notification.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNotification sets the old Notification of the mutation.
func withNotification(node *Notification) notificationOption {
	return func(m *NotificationMutation) {
		m.oldValue = func(context.Context) (*Notification, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NotificationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NotificationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Notification entities.
func (m *NotificationMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NotificationMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *NotificationMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Notification.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMessage sets the "message" field.
func (m *NotificationMutation) SetMessage(s string) {
	m.message = &s
}

// Message returns the value of the "message" field in the mutation.
func (m *NotificationMutation) Message() (r string, exists bool) {
	v := m.message
	if v == nil {
		return
	}
	return *v, true
}

// OldMessage returns the old "message" field's value of the Notification entity.
// If the Notification object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMutation) OldMessage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessage: %w", err)
	}
	return oldValue.Message, nil
}

// ClearMessage clears the value of the "message" field.
func (m *NotificationMutation) ClearMessage() {
	m.message = nil
	m.clearedFields[notification.FieldMessage] = struct{}{}
}

// MessageCleared returns if the "message" field was cleared in this mutation.
func (m *NotificationMutation) MessageCleared() bool {
	_, ok := m.clearedFields[notification.FieldMessage]
	return ok
}

// ResetMessage resets all changes to the "message" field.
func (m *NotificationMutation) ResetMessage() {
	m.message = nil
	delete(m.clearedFields, notification.FieldMessage)
}

// SetSourceType sets the "source_type" field.
func (m *NotificationMutation) SetSourceType(i int64) {
	m.source_type = &i
	m.addsource_type = nil
}

// SourceType returns the value of the "source_type" field in the mutation.
func (m *NotificationMutation) SourceType() (r int64, exists bool) {
	v := m.source_type
	if v == nil {
		return
	}
	return *v, true
}

// OldSourceType returns the old "source_type" field's value of the Notification entity.
// If the Notification object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMutation) OldSourceType(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSourceType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSourceType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSourceType: %w", err)
	}
	return oldValue.SourceType, nil
}

// AddSourceType adds i to the "source_type" field.
func (m *NotificationMutation) AddSourceType(i int64) {
	if m.addsource_type != nil {
		*m.addsource_type += i
	} else {
		m.addsource_type = &i
	}
}

// AddedSourceType returns the value that was added to the "source_type" field in this mutation.
func (m *NotificationMutation) AddedSourceType() (r int64, exists bool) {
	v := m.addsource_type
	if v == nil {
		return
	}
	return *v, true
}

// ClearSourceType clears the value of the "source_type" field.
func (m *NotificationMutation) ClearSourceType() {
	m.source_type = nil
	m.addsource_type = nil
	m.clearedFields[notification.FieldSourceType] = struct{}{}
}

// SourceTypeCleared returns if the "source_type" field was cleared in this mutation.
func (m *NotificationMutation) SourceTypeCleared() bool {
	_, ok := m.clearedFields[notification.FieldSourceType]
	return ok
}

// ResetSourceType resets all changes to the "source_type" field.
func (m *NotificationMutation) ResetSourceType() {
	m.source_type = nil
	m.addsource_type = nil
	delete(m.clearedFields, notification.FieldSourceType)
}

// SetSourceID sets the "source_id" field.
func (m *NotificationMutation) SetSourceID(i int64) {
	m.source_id = &i
	m.addsource_id = nil
}

// SourceID returns the value of the "source_id" field in the mutation.
func (m *NotificationMutation) SourceID() (r int64, exists bool) {
	v := m.source_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSourceID returns the old "source_id" field's value of the Notification entity.
// If the Notification object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMutation) OldSourceID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSourceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSourceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSourceID: %w", err)
	}
	return oldValue.SourceID, nil
}

// AddSourceID adds i to the "source_id" field.
func (m *NotificationMutation) AddSourceID(i int64) {
	if m.addsource_id != nil {
		*m.addsource_id += i
	} else {
		m.addsource_id = &i
	}
}

// AddedSourceID returns the value that was added to the "source_id" field in this mutation.
func (m *NotificationMutation) AddedSourceID() (r int64, exists bool) {
	v := m.addsource_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearSourceID clears the value of the "source_id" field.
func (m *NotificationMutation) ClearSourceID() {
	m.source_id = nil
	m.addsource_id = nil
	m.clearedFields[notification.FieldSourceID] = struct{}{}
}

// SourceIDCleared returns if the "source_id" field was cleared in this mutation.
func (m *NotificationMutation) SourceIDCleared() bool {
	_, ok := m.clearedFields[notification.FieldSourceID]
	return ok
}

// ResetSourceID resets all changes to the "source_id" field.
func (m *NotificationMutation) ResetSourceID() {
	m.source_id = nil
	m.addsource_id = nil
	delete(m.clearedFields, notification.FieldSourceID)
}

// SetReceiveIds sets the "receive_ids" field.
func (m *NotificationMutation) SetReceiveIds(i []int64) {
	m.receive_ids = &i
	m.appendreceive_ids = nil
}

// ReceiveIds returns the value of the "receive_ids" field in the mutation.
func (m *NotificationMutation) ReceiveIds() (r []int64, exists bool) {
	v := m.receive_ids
	if v == nil {
		return
	}
	return *v, true
}

// OldReceiveIds returns the old "receive_ids" field's value of the Notification entity.
// If the Notification object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMutation) OldReceiveIds(ctx context.Context) (v []int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReceiveIds is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReceiveIds requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReceiveIds: %w", err)
	}
	return oldValue.ReceiveIds, nil
}

// AppendReceiveIds adds i to the "receive_ids" field.
func (m *NotificationMutation) AppendReceiveIds(i []int64) {
	m.appendreceive_ids = append(m.appendreceive_ids, i...)
}

// AppendedReceiveIds returns the list of values that were appended to the "receive_ids" field in this mutation.
func (m *NotificationMutation) AppendedReceiveIds() ([]int64, bool) {
	if len(m.appendreceive_ids) == 0 {
		return nil, false
	}
	return m.appendreceive_ids, true
}

// ClearReceiveIds clears the value of the "receive_ids" field.
func (m *NotificationMutation) ClearReceiveIds() {
	m.receive_ids = nil
	m.appendreceive_ids = nil
	m.clearedFields[notification.FieldReceiveIds] = struct{}{}
}

// ReceiveIdsCleared returns if the "receive_ids" field was cleared in this mutation.
func (m *NotificationMutation) ReceiveIdsCleared() bool {
	_, ok := m.clearedFields[notification.FieldReceiveIds]
	return ok
}

// ResetReceiveIds resets all changes to the "receive_ids" field.
func (m *NotificationMutation) ResetReceiveIds() {
	m.receive_ids = nil
	m.appendreceive_ids = nil
	delete(m.clearedFields, notification.FieldReceiveIds)
}

// SetScheduledTime sets the "scheduled_time" field.
func (m *NotificationMutation) SetScheduledTime(t time.Time) {
	m.scheduled_time = &t
}

// ScheduledTime returns the value of the "scheduled_time" field in the mutation.
func (m *NotificationMutation) ScheduledTime() (r time.Time, exists bool) {
	v := m.scheduled_time
	if v == nil {
		return
	}
	return *v, true
}

// OldScheduledTime returns the old "scheduled_time" field's value of the Notification entity.
// If the Notification object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMutation) OldScheduledTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScheduledTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScheduledTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScheduledTime: %w", err)
	}
	return oldValue.ScheduledTime, nil
}

// ClearScheduledTime clears the value of the "scheduled_time" field.
func (m *NotificationMutation) ClearScheduledTime() {
	m.scheduled_time = nil
	m.clearedFields[notification.FieldScheduledTime] = struct{}{}
}

// ScheduledTimeCleared returns if the "scheduled_time" field was cleared in this mutation.
func (m *NotificationMutation) ScheduledTimeCleared() bool {
	_, ok := m.clearedFields[notification.FieldScheduledTime]
	return ok
}

// ResetScheduledTime resets all changes to the "scheduled_time" field.
func (m *NotificationMutation) ResetScheduledTime() {
	m.scheduled_time = nil
	delete(m.clearedFields, notification.FieldScheduledTime)
}

// AddNotificationUserIDs adds the "notification_users" edge to the NotificationUser entity by ids.
func (m *NotificationMutation) AddNotificationUserIDs(ids ...int64) {
	if m.notification_users == nil {
		m.notification_users = make(map[int64]struct{})
	}
	for i := range ids {
		m.notification_users[ids[i]] = struct{}{}
	}
}

// ClearNotificationUsers clears the "notification_users" edge to the NotificationUser entity.
func (m *NotificationMutation) ClearNotificationUsers() {
	m.clearednotification_users = true
}

// NotificationUsersCleared reports if the "notification_users" edge to the NotificationUser entity was cleared.
func (m *NotificationMutation) NotificationUsersCleared() bool {
	return m.clearednotification_users
}

// RemoveNotificationUserIDs removes the "notification_users" edge to the NotificationUser entity by IDs.
func (m *NotificationMutation) RemoveNotificationUserIDs(ids ...int64) {
	if m.removednotification_users == nil {
		m.removednotification_users = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.notification_users, ids[i])
		m.removednotification_users[ids[i]] = struct{}{}
	}
}

// RemovedNotificationUsers returns the removed IDs of the "notification_users" edge to the NotificationUser entity.
func (m *NotificationMutation) RemovedNotificationUsersIDs() (ids []int64) {
	for id := range m.removednotification_users {
		ids = append(ids, id)
	}
	return
}

// NotificationUsersIDs returns the "notification_users" edge IDs in the mutation.
func (m *NotificationMutation) NotificationUsersIDs() (ids []int64) {
	for id := range m.notification_users {
		ids = append(ids, id)
	}
	return
}

// ResetNotificationUsers resets all changes to the "notification_users" edge.
func (m *NotificationMutation) ResetNotificationUsers() {
	m.notification_users = nil
	m.clearednotification_users = false
	m.removednotification_users = nil
}

// Where appends a list predicates to the NotificationMutation builder.
func (m *NotificationMutation) Where(ps ...predicate.Notification) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the NotificationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *NotificationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Notification, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *NotificationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *NotificationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Notification).
func (m *NotificationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NotificationMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.message != nil {
		fields = append(fields, notification.FieldMessage)
	}
	if m.source_type != nil {
		fields = append(fields, notification.FieldSourceType)
	}
	if m.source_id != nil {
		fields = append(fields, notification.FieldSourceID)
	}
	if m.receive_ids != nil {
		fields = append(fields, notification.FieldReceiveIds)
	}
	if m.scheduled_time != nil {
		fields = append(fields, notification.FieldScheduledTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NotificationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case notification.FieldMessage:
		return m.Message()
	case notification.FieldSourceType:
		return m.SourceType()
	case notification.FieldSourceID:
		return m.SourceID()
	case notification.FieldReceiveIds:
		return m.ReceiveIds()
	case notification.FieldScheduledTime:
		return m.ScheduledTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NotificationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case notification.FieldMessage:
		return m.OldMessage(ctx)
	case notification.FieldSourceType:
		return m.OldSourceType(ctx)
	case notification.FieldSourceID:
		return m.OldSourceID(ctx)
	case notification.FieldReceiveIds:
		return m.OldReceiveIds(ctx)
	case notification.FieldScheduledTime:
		return m.OldScheduledTime(ctx)
	}
	return nil, fmt.Errorf("unknown Notification field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NotificationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case notification.FieldMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessage(v)
		return nil
	case notification.FieldSourceType:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSourceType(v)
		return nil
	case notification.FieldSourceID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSourceID(v)
		return nil
	case notification.FieldReceiveIds:
		v, ok := value.([]int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReceiveIds(v)
		return nil
	case notification.FieldScheduledTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScheduledTime(v)
		return nil
	}
	return fmt.Errorf("unknown Notification field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NotificationMutation) AddedFields() []string {
	var fields []string
	if m.addsource_type != nil {
		fields = append(fields, notification.FieldSourceType)
	}
	if m.addsource_id != nil {
		fields = append(fields, notification.FieldSourceID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NotificationMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case notification.FieldSourceType:
		return m.AddedSourceType()
	case notification.FieldSourceID:
		return m.AddedSourceID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NotificationMutation) AddField(name string, value ent.Value) error {
	switch name {
	case notification.FieldSourceType:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSourceType(v)
		return nil
	case notification.FieldSourceID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSourceID(v)
		return nil
	}
	return fmt.Errorf("unknown Notification numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NotificationMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(notification.FieldMessage) {
		fields = append(fields, notification.FieldMessage)
	}
	if m.FieldCleared(notification.FieldSourceType) {
		fields = append(fields, notification.FieldSourceType)
	}
	if m.FieldCleared(notification.FieldSourceID) {
		fields = append(fields, notification.FieldSourceID)
	}
	if m.FieldCleared(notification.FieldReceiveIds) {
		fields = append(fields, notification.FieldReceiveIds)
	}
	if m.FieldCleared(notification.FieldScheduledTime) {
		fields = append(fields, notification.FieldScheduledTime)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NotificationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NotificationMutation) ClearField(name string) error {
	switch name {
	case notification.FieldMessage:
		m.ClearMessage()
		return nil
	case notification.FieldSourceType:
		m.ClearSourceType()
		return nil
	case notification.FieldSourceID:
		m.ClearSourceID()
		return nil
	case notification.FieldReceiveIds:
		m.ClearReceiveIds()
		return nil
	case notification.FieldScheduledTime:
		m.ClearScheduledTime()
		return nil
	}
	return fmt.Errorf("unknown Notification nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NotificationMutation) ResetField(name string) error {
	switch name {
	case notification.FieldMessage:
		m.ResetMessage()
		return nil
	case notification.FieldSourceType:
		m.ResetSourceType()
		return nil
	case notification.FieldSourceID:
		m.ResetSourceID()
		return nil
	case notification.FieldReceiveIds:
		m.ResetReceiveIds()
		return nil
	case notification.FieldScheduledTime:
		m.ResetScheduledTime()
		return nil
	}
	return fmt.Errorf("unknown Notification field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NotificationMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.notification_users != nil {
		edges = append(edges, notification.EdgeNotificationUsers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NotificationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case notification.EdgeNotificationUsers:
		ids := make([]ent.Value, 0, len(m.notification_users))
		for id := range m.notification_users {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NotificationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removednotification_users != nil {
		edges = append(edges, notification.EdgeNotificationUsers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NotificationMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case notification.EdgeNotificationUsers:
		ids := make([]ent.Value, 0, len(m.removednotification_users))
		for id := range m.removednotification_users {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NotificationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearednotification_users {
		edges = append(edges, notification.EdgeNotificationUsers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NotificationMutation) EdgeCleared(name string) bool {
	switch name {
	case notification.EdgeNotificationUsers:
		return m.clearednotification_users
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NotificationMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Notification unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NotificationMutation) ResetEdge(name string) error {
	switch name {
	case notification.EdgeNotificationUsers:
		m.ResetNotificationUsers()
		return nil
	}
	return fmt.Errorf("unknown Notification edge %s", name)
}

// NotificationUserMutation represents an operation that mutates the NotificationUser nodes in the graph.
type NotificationUserMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int64
	user_id             *int64
	adduser_id          *int64
	is_seen             *bool
	created_at          *time.Time
	clearedFields       map[string]struct{}
	notification        *int64
	clearednotification bool
	done                bool
	oldValue            func(context.Context) (*NotificationUser, error)
	predicates          []predicate.NotificationUser
}

var _ ent.Mutation = (*NotificationUserMutation)(nil)

// notificationuserOption allows management of the mutation configuration using functional options.
type notificationuserOption func(*NotificationUserMutation)

// newNotificationUserMutation creates new mutation for the NotificationUser entity.
func newNotificationUserMutation(c config, op Op, opts ...notificationuserOption) *NotificationUserMutation {
	m := &NotificationUserMutation{
		config:        c,
		op:            op,
		typ:           TypeNotificationUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNotificationUserID sets the ID field of the mutation.
func withNotificationUserID(id int64) notificationuserOption {
	return func(m *NotificationUserMutation) {
		var (
			err   error
			once  sync.Once
			value *NotificationUser
		)
		m.oldValue = func(ctx context.Context) (*NotificationUser, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().NotificationUser.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNotificationUser sets the old NotificationUser of the mutation.
func withNotificationUser(node *NotificationUser) notificationuserOption {
	return func(m *NotificationUserMutation) {
		m.oldValue = func(context.Context) (*NotificationUser, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NotificationUserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NotificationUserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of NotificationUser entities.
func (m *NotificationUserMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NotificationUserMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *NotificationUserMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().NotificationUser.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *NotificationUserMutation) SetUserID(i int64) {
	m.user_id = &i
	m.adduser_id = nil
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *NotificationUserMutation) UserID() (r int64, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the NotificationUser entity.
// If the NotificationUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationUserMutation) OldUserID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// AddUserID adds i to the "user_id" field.
func (m *NotificationUserMutation) AddUserID(i int64) {
	if m.adduser_id != nil {
		*m.adduser_id += i
	} else {
		m.adduser_id = &i
	}
}

// AddedUserID returns the value that was added to the "user_id" field in this mutation.
func (m *NotificationUserMutation) AddedUserID() (r int64, exists bool) {
	v := m.adduser_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *NotificationUserMutation) ResetUserID() {
	m.user_id = nil
	m.adduser_id = nil
}

// SetIsSeen sets the "is_seen" field.
func (m *NotificationUserMutation) SetIsSeen(b bool) {
	m.is_seen = &b
}

// IsSeen returns the value of the "is_seen" field in the mutation.
func (m *NotificationUserMutation) IsSeen() (r bool, exists bool) {
	v := m.is_seen
	if v == nil {
		return
	}
	return *v, true
}

// OldIsSeen returns the old "is_seen" field's value of the NotificationUser entity.
// If the NotificationUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationUserMutation) OldIsSeen(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsSeen is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsSeen requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsSeen: %w", err)
	}
	return oldValue.IsSeen, nil
}

// ClearIsSeen clears the value of the "is_seen" field.
func (m *NotificationUserMutation) ClearIsSeen() {
	m.is_seen = nil
	m.clearedFields[notificationuser.FieldIsSeen] = struct{}{}
}

// IsSeenCleared returns if the "is_seen" field was cleared in this mutation.
func (m *NotificationUserMutation) IsSeenCleared() bool {
	_, ok := m.clearedFields[notificationuser.FieldIsSeen]
	return ok
}

// ResetIsSeen resets all changes to the "is_seen" field.
func (m *NotificationUserMutation) ResetIsSeen() {
	m.is_seen = nil
	delete(m.clearedFields, notificationuser.FieldIsSeen)
}

// SetCreatedAt sets the "created_at" field.
func (m *NotificationUserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *NotificationUserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the NotificationUser entity.
// If the NotificationUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationUserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *NotificationUserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetNotificationID sets the "notification" edge to the Notification entity by id.
func (m *NotificationUserMutation) SetNotificationID(id int64) {
	m.notification = &id
}

// ClearNotification clears the "notification" edge to the Notification entity.
func (m *NotificationUserMutation) ClearNotification() {
	m.clearednotification = true
}

// NotificationCleared reports if the "notification" edge to the Notification entity was cleared.
func (m *NotificationUserMutation) NotificationCleared() bool {
	return m.clearednotification
}

// NotificationID returns the "notification" edge ID in the mutation.
func (m *NotificationUserMutation) NotificationID() (id int64, exists bool) {
	if m.notification != nil {
		return *m.notification, true
	}
	return
}

// NotificationIDs returns the "notification" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// NotificationID instead. It exists only for internal usage by the builders.
func (m *NotificationUserMutation) NotificationIDs() (ids []int64) {
	if id := m.notification; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetNotification resets all changes to the "notification" edge.
func (m *NotificationUserMutation) ResetNotification() {
	m.notification = nil
	m.clearednotification = false
}

// Where appends a list predicates to the NotificationUserMutation builder.
func (m *NotificationUserMutation) Where(ps ...predicate.NotificationUser) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the NotificationUserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *NotificationUserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.NotificationUser, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *NotificationUserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *NotificationUserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (NotificationUser).
func (m *NotificationUserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NotificationUserMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.user_id != nil {
		fields = append(fields, notificationuser.FieldUserID)
	}
	if m.is_seen != nil {
		fields = append(fields, notificationuser.FieldIsSeen)
	}
	if m.created_at != nil {
		fields = append(fields, notificationuser.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NotificationUserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case notificationuser.FieldUserID:
		return m.UserID()
	case notificationuser.FieldIsSeen:
		return m.IsSeen()
	case notificationuser.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NotificationUserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case notificationuser.FieldUserID:
		return m.OldUserID(ctx)
	case notificationuser.FieldIsSeen:
		return m.OldIsSeen(ctx)
	case notificationuser.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown NotificationUser field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NotificationUserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case notificationuser.FieldUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case notificationuser.FieldIsSeen:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsSeen(v)
		return nil
	case notificationuser.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown NotificationUser field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NotificationUserMutation) AddedFields() []string {
	var fields []string
	if m.adduser_id != nil {
		fields = append(fields, notificationuser.FieldUserID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NotificationUserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case notificationuser.FieldUserID:
		return m.AddedUserID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NotificationUserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case notificationuser.FieldUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserID(v)
		return nil
	}
	return fmt.Errorf("unknown NotificationUser numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NotificationUserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(notificationuser.FieldIsSeen) {
		fields = append(fields, notificationuser.FieldIsSeen)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NotificationUserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NotificationUserMutation) ClearField(name string) error {
	switch name {
	case notificationuser.FieldIsSeen:
		m.ClearIsSeen()
		return nil
	}
	return fmt.Errorf("unknown NotificationUser nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NotificationUserMutation) ResetField(name string) error {
	switch name {
	case notificationuser.FieldUserID:
		m.ResetUserID()
		return nil
	case notificationuser.FieldIsSeen:
		m.ResetIsSeen()
		return nil
	case notificationuser.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown NotificationUser field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NotificationUserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.notification != nil {
		edges = append(edges, notificationuser.EdgeNotification)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NotificationUserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case notificationuser.EdgeNotification:
		if id := m.notification; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NotificationUserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NotificationUserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NotificationUserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearednotification {
		edges = append(edges, notificationuser.EdgeNotification)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NotificationUserMutation) EdgeCleared(name string) bool {
	switch name {
	case notificationuser.EdgeNotification:
		return m.clearednotification
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NotificationUserMutation) ClearEdge(name string) error {
	switch name {
	case notificationuser.EdgeNotification:
		m.ClearNotification()
		return nil
	}
	return fmt.Errorf("unknown NotificationUser unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NotificationUserMutation) ResetEdge(name string) error {
	switch name {
	case notificationuser.EdgeNotification:
		m.ResetNotification()
		return nil
	}
	return fmt.Errorf("unknown NotificationUser edge %s", name)
}

// UserDeviceMutation represents an operation that mutates the UserDevice nodes in the graph.
type UserDeviceMutation struct {
	config
	op              Op
	typ             string
	id              *int64
	user_id         *int64
	adduser_id      *int64
	expo_push_token *string
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*UserDevice, error)
	predicates      []predicate.UserDevice
}

var _ ent.Mutation = (*UserDeviceMutation)(nil)

// userdeviceOption allows management of the mutation configuration using functional options.
type userdeviceOption func(*UserDeviceMutation)

// newUserDeviceMutation creates new mutation for the UserDevice entity.
func newUserDeviceMutation(c config, op Op, opts ...userdeviceOption) *UserDeviceMutation {
	m := &UserDeviceMutation{
		config:        c,
		op:            op,
		typ:           TypeUserDevice,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserDeviceID sets the ID field of the mutation.
func withUserDeviceID(id int64) userdeviceOption {
	return func(m *UserDeviceMutation) {
		var (
			err   error
			once  sync.Once
			value *UserDevice
		)
		m.oldValue = func(ctx context.Context) (*UserDevice, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserDevice.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserDevice sets the old UserDevice of the mutation.
func withUserDevice(node *UserDevice) userdeviceOption {
	return func(m *UserDeviceMutation) {
		m.oldValue = func(context.Context) (*UserDevice, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserDeviceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserDeviceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of UserDevice entities.
func (m *UserDeviceMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserDeviceMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserDeviceMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserDevice.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *UserDeviceMutation) SetUserID(i int64) {
	m.user_id = &i
	m.adduser_id = nil
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *UserDeviceMutation) UserID() (r int64, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the UserDevice entity.
// If the UserDevice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserDeviceMutation) OldUserID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// AddUserID adds i to the "user_id" field.
func (m *UserDeviceMutation) AddUserID(i int64) {
	if m.adduser_id != nil {
		*m.adduser_id += i
	} else {
		m.adduser_id = &i
	}
}

// AddedUserID returns the value that was added to the "user_id" field in this mutation.
func (m *UserDeviceMutation) AddedUserID() (r int64, exists bool) {
	v := m.adduser_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *UserDeviceMutation) ResetUserID() {
	m.user_id = nil
	m.adduser_id = nil
}

// SetExpoPushToken sets the "expo_push_token" field.
func (m *UserDeviceMutation) SetExpoPushToken(s string) {
	m.expo_push_token = &s
}

// ExpoPushToken returns the value of the "expo_push_token" field in the mutation.
func (m *UserDeviceMutation) ExpoPushToken() (r string, exists bool) {
	v := m.expo_push_token
	if v == nil {
		return
	}
	return *v, true
}

// OldExpoPushToken returns the old "expo_push_token" field's value of the UserDevice entity.
// If the UserDevice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserDeviceMutation) OldExpoPushToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpoPushToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpoPushToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpoPushToken: %w", err)
	}
	return oldValue.ExpoPushToken, nil
}

// ClearExpoPushToken clears the value of the "expo_push_token" field.
func (m *UserDeviceMutation) ClearExpoPushToken() {
	m.expo_push_token = nil
	m.clearedFields[userdevice.FieldExpoPushToken] = struct{}{}
}

// ExpoPushTokenCleared returns if the "expo_push_token" field was cleared in this mutation.
func (m *UserDeviceMutation) ExpoPushTokenCleared() bool {
	_, ok := m.clearedFields[userdevice.FieldExpoPushToken]
	return ok
}

// ResetExpoPushToken resets all changes to the "expo_push_token" field.
func (m *UserDeviceMutation) ResetExpoPushToken() {
	m.expo_push_token = nil
	delete(m.clearedFields, userdevice.FieldExpoPushToken)
}

// Where appends a list predicates to the UserDeviceMutation builder.
func (m *UserDeviceMutation) Where(ps ...predicate.UserDevice) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserDeviceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserDeviceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.UserDevice, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserDeviceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserDeviceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (UserDevice).
func (m *UserDeviceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserDeviceMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.user_id != nil {
		fields = append(fields, userdevice.FieldUserID)
	}
	if m.expo_push_token != nil {
		fields = append(fields, userdevice.FieldExpoPushToken)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserDeviceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case userdevice.FieldUserID:
		return m.UserID()
	case userdevice.FieldExpoPushToken:
		return m.ExpoPushToken()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserDeviceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case userdevice.FieldUserID:
		return m.OldUserID(ctx)
	case userdevice.FieldExpoPushToken:
		return m.OldExpoPushToken(ctx)
	}
	return nil, fmt.Errorf("unknown UserDevice field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserDeviceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case userdevice.FieldUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case userdevice.FieldExpoPushToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpoPushToken(v)
		return nil
	}
	return fmt.Errorf("unknown UserDevice field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserDeviceMutation) AddedFields() []string {
	var fields []string
	if m.adduser_id != nil {
		fields = append(fields, userdevice.FieldUserID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserDeviceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case userdevice.FieldUserID:
		return m.AddedUserID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserDeviceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case userdevice.FieldUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserID(v)
		return nil
	}
	return fmt.Errorf("unknown UserDevice numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserDeviceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(userdevice.FieldExpoPushToken) {
		fields = append(fields, userdevice.FieldExpoPushToken)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserDeviceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserDeviceMutation) ClearField(name string) error {
	switch name {
	case userdevice.FieldExpoPushToken:
		m.ClearExpoPushToken()
		return nil
	}
	return fmt.Errorf("unknown UserDevice nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserDeviceMutation) ResetField(name string) error {
	switch name {
	case userdevice.FieldUserID:
		m.ResetUserID()
		return nil
	case userdevice.FieldExpoPushToken:
		m.ResetExpoPushToken()
		return nil
	}
	return fmt.Errorf("unknown UserDevice field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserDeviceMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserDeviceMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserDeviceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserDeviceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserDeviceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserDeviceMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserDeviceMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown UserDevice unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserDeviceMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown UserDevice edge %s", name)
}
