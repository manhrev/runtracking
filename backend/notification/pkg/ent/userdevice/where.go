// Code generated by ent, DO NOT EDIT.

package userdevice

import (
	"entgo.io/ent/dialect/sql"
	"github.com/manhrev/runtracking/backend/notification/pkg/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int64) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldEQ(FieldUserID, v))
}

// ExpoPushToken applies equality check predicate on the "expo_push_token" field. It's identical to ExpoPushTokenEQ.
func ExpoPushToken(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldEQ(FieldExpoPushToken, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int64) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int64) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int64) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int64) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v int64) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v int64) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v int64) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v int64) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldLTE(FieldUserID, v))
}

// ExpoPushTokenEQ applies the EQ predicate on the "expo_push_token" field.
func ExpoPushTokenEQ(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldEQ(FieldExpoPushToken, v))
}

// ExpoPushTokenNEQ applies the NEQ predicate on the "expo_push_token" field.
func ExpoPushTokenNEQ(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldNEQ(FieldExpoPushToken, v))
}

// ExpoPushTokenIn applies the In predicate on the "expo_push_token" field.
func ExpoPushTokenIn(vs ...string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldIn(FieldExpoPushToken, vs...))
}

// ExpoPushTokenNotIn applies the NotIn predicate on the "expo_push_token" field.
func ExpoPushTokenNotIn(vs ...string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldNotIn(FieldExpoPushToken, vs...))
}

// ExpoPushTokenGT applies the GT predicate on the "expo_push_token" field.
func ExpoPushTokenGT(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldGT(FieldExpoPushToken, v))
}

// ExpoPushTokenGTE applies the GTE predicate on the "expo_push_token" field.
func ExpoPushTokenGTE(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldGTE(FieldExpoPushToken, v))
}

// ExpoPushTokenLT applies the LT predicate on the "expo_push_token" field.
func ExpoPushTokenLT(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldLT(FieldExpoPushToken, v))
}

// ExpoPushTokenLTE applies the LTE predicate on the "expo_push_token" field.
func ExpoPushTokenLTE(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldLTE(FieldExpoPushToken, v))
}

// ExpoPushTokenContains applies the Contains predicate on the "expo_push_token" field.
func ExpoPushTokenContains(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldContains(FieldExpoPushToken, v))
}

// ExpoPushTokenHasPrefix applies the HasPrefix predicate on the "expo_push_token" field.
func ExpoPushTokenHasPrefix(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldHasPrefix(FieldExpoPushToken, v))
}

// ExpoPushTokenHasSuffix applies the HasSuffix predicate on the "expo_push_token" field.
func ExpoPushTokenHasSuffix(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldHasSuffix(FieldExpoPushToken, v))
}

// ExpoPushTokenIsNil applies the IsNil predicate on the "expo_push_token" field.
func ExpoPushTokenIsNil() predicate.UserDevice {
	return predicate.UserDevice(sql.FieldIsNull(FieldExpoPushToken))
}

// ExpoPushTokenNotNil applies the NotNil predicate on the "expo_push_token" field.
func ExpoPushTokenNotNil() predicate.UserDevice {
	return predicate.UserDevice(sql.FieldNotNull(FieldExpoPushToken))
}

// ExpoPushTokenEqualFold applies the EqualFold predicate on the "expo_push_token" field.
func ExpoPushTokenEqualFold(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldEqualFold(FieldExpoPushToken, v))
}

// ExpoPushTokenContainsFold applies the ContainsFold predicate on the "expo_push_token" field.
func ExpoPushTokenContainsFold(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldContainsFold(FieldExpoPushToken, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserDevice) predicate.UserDevice {
	return predicate.UserDevice(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserDevice) predicate.UserDevice {
	return predicate.UserDevice(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserDevice) predicate.UserDevice {
	return predicate.UserDevice(func(s *sql.Selector) {
		p(s.Not())
	})
}
