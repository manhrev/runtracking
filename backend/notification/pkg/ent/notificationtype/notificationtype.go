// Code generated by ent, DO NOT EDIT.

package notificationtype

const (
	// Label holds the string label denoting the notificationtype type in the database.
	Label = "notification_type"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTypeName holds the string denoting the type_name field in the database.
	FieldTypeName = "type_name"
	// EdgeNotifications holds the string denoting the notifications edge name in mutations.
	EdgeNotifications = "notifications"
	// Table holds the table name of the notificationtype in the database.
	Table = "notification_types"
	// NotificationsTable is the table that holds the notifications relation/edge.
	NotificationsTable = "notifications"
	// NotificationsInverseTable is the table name for the Notification entity.
	// It exists in this package in order to avoid circular dependency with the "notification" package.
	NotificationsInverseTable = "notifications"
	// NotificationsColumn is the table column denoting the notifications relation/edge.
	NotificationsColumn = "notification_type_notifications"
)

// Columns holds all SQL columns for notificationtype fields.
var Columns = []string{
	FieldID,
	FieldTypeName,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "notification_types"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"notification_user_notifications",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
