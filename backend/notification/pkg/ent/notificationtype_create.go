// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/manhrev/runtracking/backend/notification/pkg/ent/notification"
	"github.com/manhrev/runtracking/backend/notification/pkg/ent/notificationtype"
)

// NotificationTypeCreate is the builder for creating a NotificationType entity.
type NotificationTypeCreate struct {
	config
	mutation *NotificationTypeMutation
	hooks    []Hook
}

// SetTypeName sets the "type_name" field.
func (ntc *NotificationTypeCreate) SetTypeName(s string) *NotificationTypeCreate {
	ntc.mutation.SetTypeName(s)
	return ntc
}

// SetNillableTypeName sets the "type_name" field if the given value is not nil.
func (ntc *NotificationTypeCreate) SetNillableTypeName(s *string) *NotificationTypeCreate {
	if s != nil {
		ntc.SetTypeName(*s)
	}
	return ntc
}

// SetID sets the "id" field.
func (ntc *NotificationTypeCreate) SetID(i int64) *NotificationTypeCreate {
	ntc.mutation.SetID(i)
	return ntc
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (ntc *NotificationTypeCreate) AddNotificationIDs(ids ...int64) *NotificationTypeCreate {
	ntc.mutation.AddNotificationIDs(ids...)
	return ntc
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (ntc *NotificationTypeCreate) AddNotifications(n ...*Notification) *NotificationTypeCreate {
	ids := make([]int64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ntc.AddNotificationIDs(ids...)
}

// Mutation returns the NotificationTypeMutation object of the builder.
func (ntc *NotificationTypeCreate) Mutation() *NotificationTypeMutation {
	return ntc.mutation
}

// Save creates the NotificationType in the database.
func (ntc *NotificationTypeCreate) Save(ctx context.Context) (*NotificationType, error) {
	return withHooks[*NotificationType, NotificationTypeMutation](ctx, ntc.sqlSave, ntc.mutation, ntc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ntc *NotificationTypeCreate) SaveX(ctx context.Context) *NotificationType {
	v, err := ntc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ntc *NotificationTypeCreate) Exec(ctx context.Context) error {
	_, err := ntc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ntc *NotificationTypeCreate) ExecX(ctx context.Context) {
	if err := ntc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ntc *NotificationTypeCreate) check() error {
	return nil
}

func (ntc *NotificationTypeCreate) sqlSave(ctx context.Context) (*NotificationType, error) {
	if err := ntc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ntc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ntc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	ntc.mutation.id = &_node.ID
	ntc.mutation.done = true
	return _node, nil
}

func (ntc *NotificationTypeCreate) createSpec() (*NotificationType, *sqlgraph.CreateSpec) {
	var (
		_node = &NotificationType{config: ntc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: notificationtype.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: notificationtype.FieldID,
			},
		}
	)
	if id, ok := ntc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ntc.mutation.TypeName(); ok {
		_spec.SetField(notificationtype.FieldTypeName, field.TypeString, value)
		_node.TypeName = value
	}
	if nodes := ntc.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationtype.NotificationsTable,
			Columns: []string{notificationtype.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: notification.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// NotificationTypeCreateBulk is the builder for creating many NotificationType entities in bulk.
type NotificationTypeCreateBulk struct {
	config
	builders []*NotificationTypeCreate
}

// Save creates the NotificationType entities in the database.
func (ntcb *NotificationTypeCreateBulk) Save(ctx context.Context) ([]*NotificationType, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ntcb.builders))
	nodes := make([]*NotificationType, len(ntcb.builders))
	mutators := make([]Mutator, len(ntcb.builders))
	for i := range ntcb.builders {
		func(i int, root context.Context) {
			builder := ntcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NotificationTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ntcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ntcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ntcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ntcb *NotificationTypeCreateBulk) SaveX(ctx context.Context) []*NotificationType {
	v, err := ntcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ntcb *NotificationTypeCreateBulk) Exec(ctx context.Context) error {
	_, err := ntcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ntcb *NotificationTypeCreateBulk) ExecX(ctx context.Context) {
	if err := ntcb.Exec(ctx); err != nil {
		panic(err)
	}
}
