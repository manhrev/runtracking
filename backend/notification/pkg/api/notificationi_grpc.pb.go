// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/notificationi.proto

package notification

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NotificationIClient is the client API for NotificationI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationIClient interface {
	PushNotification(ctx context.Context, in *PushNotiRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type notificationIClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationIClient(cc grpc.ClientConnInterface) NotificationIClient {
	return &notificationIClient{cc}
}

func (c *notificationIClient) PushNotification(ctx context.Context, in *PushNotiRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/notification.NotificationI/PushNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationIServer is the server API for NotificationI service.
// All implementations must embed UnimplementedNotificationIServer
// for forward compatibility
type NotificationIServer interface {
	PushNotification(context.Context, *PushNotiRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedNotificationIServer()
}

// UnimplementedNotificationIServer must be embedded to have forward compatible implementations.
type UnimplementedNotificationIServer struct {
}

func (UnimplementedNotificationIServer) PushNotification(context.Context, *PushNotiRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushNotification not implemented")
}
func (UnimplementedNotificationIServer) mustEmbedUnimplementedNotificationIServer() {}

// UnsafeNotificationIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationIServer will
// result in compilation errors.
type UnsafeNotificationIServer interface {
	mustEmbedUnimplementedNotificationIServer()
}

func RegisterNotificationIServer(s grpc.ServiceRegistrar, srv NotificationIServer) {
	s.RegisterService(&NotificationI_ServiceDesc, srv)
}

func _NotificationI_PushNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushNotiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationIServer).PushNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.NotificationI/PushNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationIServer).PushNotification(ctx, req.(*PushNotiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificationI_ServiceDesc is the grpc.ServiceDesc for NotificationI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notification.NotificationI",
	HandlerType: (*NotificationIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushNotification",
			Handler:    _NotificationI_PushNotification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/notificationi.proto",
}
