package cloudtask

import (
	"context"
	b64 "encoding/base64"
	"encoding/json"
	"fmt"
	"log"
	"os"
	"testing"

	cloudtasks "cloud.google.com/go/cloudtasks/apiv2"
	taskspb "cloud.google.com/go/cloudtasks/apiv2/cloudtaskspb"
	_ "github.com/go-sql-driver/mysql"
	"google.golang.org/api/option"
	"google.golang.org/protobuf/types/known/timestamppb"
)

func Test_List(t *testing.T) {
	os.Setenv("CREDENTIAL_KEY", "ewogICJ0eXBlIjogInNlcnZpY2VfYWNjb3VudCIsCiAgInByb2plY3RfaWQiOiAibmV3LXJ1bnRyYWNraW5nIiwKICAicHJpdmF0ZV9rZXlfaWQiOiAiNzVhZmQzMDg1Yjg4MGQwNmM1MDczZjE5MTJmNzM5MGM5ZTYwNmYwYSIsCiAgInByaXZhdGVfa2V5IjogIi0tLS0tQkVHSU4gUFJJVkFURSBLRVktLS0tLVxuTUlJRXZRSUJBREFOQmdrcWhraUc5dzBCQVFFRkFBU0NCS2N3Z2dTakFnRUFBb0lCQVFEbWdVOW13MmdkUlJTbFxuc2NBYVNvenNPQVZXZG82THBOMlNITk5YN0dQSEtVOG9Tcy9aOVN1UW43a3RHTytYcTNjYlpaZk1zUTl3ZUFFalxuMXZGcUN6NWh4T0srdU93b1l6dVQrS3ExN09uQmo4Zk9FWS9GbFBFL2JyaUNueGNQU0cyQlM4Q1A1SS9tM1pNelxuSjV2Zk5SZVZndnE1azdiTkpkL0hSSEo1T1AvL3AvS0ROUVoyVUt2cVkrMkF5ZTdwY1BBcTVBZ1owbXZwMGgrT1xuK1ViWUJhMXZ4Yld0ODNaU0llZzgvYTkzY052TUR0cDQzWW9DWGUzN0RlaXFyVU1zTHk4cWhvOENmczQwekhqYlxuT2JiQWFwa1p0K3FWczIwNW9PbVlkUWNoU24vVEoxSWIvaU85cCt4MW96b3hVZzRUdURKR1ZoZnNaT01FWHlQcFxuUGhxR2syTWxBZ01CQUFFQ2dnRUFXcWU2d2JEU2pzaHZnV2N5SldUeW5haSt1SzJ5REV2UDlMb3ZpS0hvOEJoWVxuRUlHejA0WHdGMVlxTHdsaW1hVVBHQkJScm1ob3FSUVpacTRQam1SVHFZSVVwMnYxUFVFaDJtVnZSbE9oNzhXTFxua0lrcG9VeWR3UlBicjB2QWR2dEdUaGFyNml1N1NOSVdKWVZMY1hMaERxVlAxSks2ejE0NDc1Y0U2cFkzWUtVK1xuejdZVm1xSU1meGZmMXBZUm9UMCtmeFN6Q1pxbEROOWxLTFBkMzFqRDNOZzhNMXVXWmwzMTVOZmtSZUFNOGR3bFxuUWI1ajJucUl2RjFoSXBJazNuNWlWTnhTZ1FHSTFSSGtNWElFeVpkQzRSTWJoTXB3M05jdS9NTnVoMnQwVVo5elxuQk9sTVJkbm1aYVBnWjk2ajJNQ2wxanhxdXlMN2t1TXFWSDJROXA2aEZRS0JnUUQwc2FnYUpMbzlyVHhxMGdkRlxuc0wrRnViZ0dDV0htWjQyZUNuZ29CVSt0UldGckxtTXVSOEw0M0NlZnAwVy9YSnNEalFMcWt2eG1xTENPbC9XdVxuaGFOa09MMXQ1NnRSSGtMNDEzQ3FwUUh2UkpDNXRtUk9IZFRZc3dzeGdiSldRdk10bXZJV3lxY0tCaEg1RjJvRlxucWJsOHVzOGsza29qUzg3Zyt3c3h1SG13SndLQmdRRHhKOUpnRE9hUHdpR3c0ZG9nNFdHVEFHYWR3Y0swQkFrN1xuRm91NDRMcU9zZmJLQXIwdjFoL1lBQUtkdEowUVc5c0Y1QzRUaXUzRWpkM2pZQUdIM3gzbjJyb01lNFBJKzdHQlxuQTd2THFWa2E1WGkvV1c5RDUzdjVwOUg5VXRIQzM5OFQ0bFF5RUdRTjJvWUZTRnUrcFBlRnU2ZlZ2L2l4MFRvL1xuVEhtMSt3d1Ywd0tCZ1FEV2FBamxCNE9OWVl0TUNrYkhBTzJBcmxBYU1nUnZrQk1lQlF4dC9PRm84UjlBZkQvNVxub0hXdCs3SllpWWhxK2lqMS9vd3NvS2k3QjFyVlJ6L0dNV0VQQTB5d3pjdG1ZNzdKTG5XUmdNNW1LazBwL1RCOFxuNWxUSG9ITFJhVlNya3pSanBKNDE3RkpiVFNCWWcvU3BpNk4xTUhjclZmL2VWNkdwcnkrSzNKcjhCd0tCZ0JqR1xuZTVHTW9iOVJOWDdqcFRKTmxXV3gyOWtIU0FhUWg1WS9lYmxUdFRibHg3SDNXQkpyRURoenY5RU45amp4QnU1elxuQTl6VUlCdGFhOXBwU1o3NDZDeWl4d3h6UUJYTTdlNlFRS0hxMHhHMVU1TnREOFpOS09wOE9GR3JTWXVZem1WUFxua2xEV2FFRVlHejY5c1ZkRHdYNUd5alptazVsSklvL1FQb3pZcnVRckFvR0FLS0pKOVVUQkRBbTRsem5Bbk55bVxuRUs3eHZiZEs0ZitiY3hsMzhOa3FJT3dneFJ3VlFPMHdSdWcrYTdCYjcvNW0xYTYrYVJ1bTZuRGIwSS9hQlRQV1xualVlQTQxMnByOThKdEFnZVQ0MDV2d3poOGQ1TzdqYkVNL3R3c3dncXpJSUxncW53NnZlb0dSZW4rczlPclI3YlxuNjB5b0RNVjhlejZDeUtSakNWdG1SdEk9XG4tLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tXG4iLAogICJjbGllbnRfZW1haWwiOiAiZ290cmFja2VyLXNlcnZpY2UtYWNjb291bnRAbmV3LXJ1bnRyYWNraW5nLmlhbS5nc2VydmljZWFjY291bnQuY29tIiwKICAiY2xpZW50X2lkIjogIjExMzUxOTY1OTMwMDA5MTQ1NjA2MCIsCiAgImF1dGhfdXJpIjogImh0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbS9vL29hdXRoMi9hdXRoIiwKICAidG9rZW5fdXJpIjogImh0dHBzOi8vb2F1dGgyLmdvb2dsZWFwaXMuY29tL3Rva2VuIiwKICAiYXV0aF9wcm92aWRlcl94NTA5X2NlcnRfdXJsIjogImh0")
	credentialKeyBase64 = os.Getenv("CREDENTIAL_KEY")
	// str := "ewogICJ0eXBlIjogInNlcnZpY2VfYWNjb3VudCIsCiAgInByb2plY3RfaWQiOiAi bmV3LXJ1bnRyYWNraW5nIiwKICAicHJpdmF0ZV9rZXlfaWQiOiAiNzVhZmQzMDg1 Yjg4MGQwNmM1MDczZjE5MTJmNzM5MGM5ZTYwNmYwYSIsCiAgInByaXZhdGVfa2V5 IjogIi0tLS0tQkVHSU4gUFJJVkFURSBLRVktLS0tLVxuTUlJRXZRSUJBREFOQmdr cWhraUc5dzBCQVFFRkFBU0NCS2N3Z2dTakFnRUFBb0lCQVFEbWdVOW13MmdkUlJT bFxuc2NBYVNvenNPQVZXZG82THBOMlNITk5YN0dQSEtVOG9Tcy9aOVN1UW43a3RH TytYcTNjYlpaZk1zUTl3ZUFFalxuMXZGcUN6NWh4T0srdU93b1l6dVQrS3ExN09u Qmo4Zk9FWS9GbFBFL2JyaUNueGNQU0cyQlM4Q1A1SS9tM1pNelxuSjV2Zk5SZVZn dnE1azdiTkpkL0hSSEo1T1AvL3AvS0ROUVoyVUt2cVkrMkF5ZTdwY1BBcTVBZ1ow bXZwMGgrT1xuK1ViWUJhMXZ4Yld0ODNaU0llZzgvYTkzY052TUR0cDQzWW9DWGUz N0RlaXFyVU1zTHk4cWhvOENmczQwekhqYlxuT2JiQWFwa1p0K3FWczIwNW9PbVlk UWNoU24vVEoxSWIvaU85cCt4MW96b3hVZzRUdURKR1ZoZnNaT01FWHlQcFxuUGhx R2syTWxBZ01CQUFFQ2dnRUFXcWU2d2JEU2pzaHZnV2N5SldUeW5haSt1SzJ5REV2 UDlMb3ZpS0hvOEJoWVxuRUlHejA0WHdGMVlxTHdsaW1hVVBHQkJScm1ob3FSUVpa cTRQam1SVHFZSVVwMnYxUFVFaDJtVnZSbE9oNzhXTFxua0lrcG9VeWR3UlBicjB2 QWR2dEdUaGFyNml1N1NOSVdKWVZMY1hMaERxVlAxSks2ejE0NDc1Y0U2cFkzWUtV K1xuejdZVm1xSU1meGZmMXBZUm9UMCtmeFN6Q1pxbEROOWxLTFBkMzFqRDNOZzhN MXVXWmwzMTVOZmtSZUFNOGR3bFxuUWI1ajJucUl2RjFoSXBJazNuNWlWTnhTZ1FH STFSSGtNWElFeVpkQzRSTWJoTXB3M05jdS9NTnVoMnQwVVo5elxuQk9sTVJkbm1a YVBnWjk2ajJNQ2wxanhxdXlMN2t1TXFWSDJROXA2aEZRS0JnUUQwc2FnYUpMbzly VHhxMGdkRlxuc0wrRnViZ0dDV0htWjQyZUNuZ29CVSt0UldGckxtTXVSOEw0M0Nl ZnAwVy9YSnNEalFMcWt2eG1xTENPbC9XdVxuaGFOa09MMXQ1NnRSSGtMNDEzQ3Fw UUh2UkpDNXRtUk9IZFRZc3dzeGdiSldRdk10bXZJV3lxY0tCaEg1RjJvRlxucWJs OHVzOGsza29qUzg3Zyt3c3h1SG13SndLQmdRRHhKOUpnRE9hUHdpR3c0ZG9nNFdH VEFHYWR3Y0swQkFrN1xuRm91NDRMcU9zZmJLQXIwdjFoL1lBQUtkdEowUVc5c0Y1 QzRUaXUzRWpkM2pZQUdIM3gzbjJyb01lNFBJKzdHQlxuQTd2THFWa2E1WGkvV1c5 RDUzdjVwOUg5VXRIQzM5OFQ0bFF5RUdRTjJvWUZTRnUrcFBlRnU2ZlZ2L2l4MFRv L1xuVEhtMSt3d1Ywd0tCZ1FEV2FBamxCNE9OWVl0TUNrYkhBTzJBcmxBYU1nUnZr Qk1lQlF4dC9PRm84UjlBZkQvNVxub0hXdCs3SllpWWhxK2lqMS9vd3NvS2k3QjFy VlJ6L0dNV0VQQTB5d3pjdG1ZNzdKTG5XUmdNNW1LazBwL1RCOFxuNWxUSG9ITFJh VlNya3pSanBKNDE3RkpiVFNCWWcvU3BpNk4xTUhjclZmL2VWNkdwcnkrSzNKcjhC d0tCZ0JqR1xuZTVHTW9iOVJOWDdqcFRKTmxXV3gyOWtIU0FhUWg1WS9lYmxUdFRi bHg3SDNXQkpyRURoenY5RU45amp4QnU1elxuQTl6VUlCdGFhOXBwU1o3NDZDeWl4 d3h6UUJYTTdlNlFRS0hxMHhHMVU1TnREOFpOS09wOE9GR3JTWXVZem1WUFxua2xE V2FFRVlHejY5c1ZkRHdYNUd5alptazVsSklvL1FQb3pZcnVRckFvR0FLS0pKOVVU QkRBbTRsem5Bbk55bVxuRUs3eHZiZEs0ZitiY3hsMzhOa3FJT3dneFJ3VlFPMHdS dWcrYTdCYjcvNW0xYTYrYVJ1bTZuRGIwSS9hQlRQV1xualVlQTQxMnByOThKdEFn ZVQ0MDV2d3poOGQ1TzdqYkVNL3R3c3dncXpJSUxncW53NnZlb0dSZW4rczlPclI3 YlxuNjB5b0RNVjhlejZDeUtSakNWdG1SdEk9XG4tLS0tLUVORCBQUklWQVRFIEtF WS0tLS0tXG4iLAogICJjbGllbnRfZW1haWwiOiAiZ290cmFja2VyLXNlcnZpY2Ut YWNjb291bnRAbmV3LXJ1bnRyYWNraW5nLmlhbS5nc2VydmljZWFjY291bnQuY29t IiwKICAiY2xpZW50X2lkIjogIjExMzUxOTY1OTMwMDA5MTQ1NjA2MCIsCiAgImF1 dGhfdXJpIjogImh0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbS9vL29hdXRoMi9h dXRoIiwKICAidG9rZW5fdXJpIjogImh0dHBzOi8vb2F1dGgyLmdvb2dsZWFwaXMu Y29tL3Rva2VuIiwKICAiYXV0aF9wcm92aWRlcl94NTA5X2NlcnRfdXJsIjogImh0"
	// fmt.Println(strings.ReplaceAll(str, " ", ""))
	cred, err := b64.StdEncoding.DecodeString(credentialKeyBase64)
	if err != nil {
		log.Printf("Error decoding JSON: %v", err)
		return
	}

	fmt.Print(cred)
}

func Test_Create_Task(t *testing.T) {
	ctx := context.Background()
	var client *cloudtasks.Client
	const (
		// gcp_cloud_task_host string = os.Getenv("GCP_CLOUD_TASK_HOST")
		// gcp_cloud_task_port string = os.Getenv("GCP_CLOUD_TASK_PORT")

		gcp_cloud_task_project_id  string = "new-runtracking"
		gcp_cloud_task_location_id string = "asia-southeast1"
		gcp_cloud_task_queue_id    string = "notification"
	)
	os.Setenv("CREDENTIAL_KEY", "ewogICJ0eXBlIjogInNlcnZpY2VfYWNjb3VudCIsCiAgInByb2plY3RfaWQiOiAibmV3LXJ1bnRyYWNraW5nIiwKICAicHJpdmF0ZV9rZXlfaWQiOiAiNzVhZmQzMDg1Yjg4MGQwNmM1MDczZjE5MTJmNzM5MGM5ZTYwNmYwYSIsCiAgInByaXZhdGVfa2V5IjogIi0tLS0tQkVHSU4gUFJJVkFURSBLRVktLS0tLVxuTUlJRXZRSUJBREFOQmdrcWhraUc5dzBCQVFFRkFBU0NCS2N3Z2dTakFnRUFBb0lCQVFEbWdVOW13MmdkUlJTbFxuc2NBYVNvenNPQVZXZG82THBOMlNITk5YN0dQSEtVOG9Tcy9aOVN1UW43a3RHTytYcTNjYlpaZk1zUTl3ZUFFalxuMXZGcUN6NWh4T0srdU93b1l6dVQrS3ExN09uQmo4Zk9FWS9GbFBFL2JyaUNueGNQU0cyQlM4Q1A1SS9tM1pNelxuSjV2Zk5SZVZndnE1azdiTkpkL0hSSEo1T1AvL3AvS0ROUVoyVUt2cVkrMkF5ZTdwY1BBcTVBZ1owbXZwMGgrT1xuK1ViWUJhMXZ4Yld0ODNaU0llZzgvYTkzY052TUR0cDQzWW9DWGUzN0RlaXFyVU1zTHk4cWhvOENmczQwekhqYlxuT2JiQWFwa1p0K3FWczIwNW9PbVlkUWNoU24vVEoxSWIvaU85cCt4MW96b3hVZzRUdURKR1ZoZnNaT01FWHlQcFxuUGhxR2syTWxBZ01CQUFFQ2dnRUFXcWU2d2JEU2pzaHZnV2N5SldUeW5haSt1SzJ5REV2UDlMb3ZpS0hvOEJoWVxuRUlHejA0WHdGMVlxTHdsaW1hVVBHQkJScm1ob3FSUVpacTRQam1SVHFZSVVwMnYxUFVFaDJtVnZSbE9oNzhXTFxua0lrcG9VeWR3UlBicjB2QWR2dEdUaGFyNml1N1NOSVdKWVZMY1hMaERxVlAxSks2ejE0NDc1Y0U2cFkzWUtVK1xuejdZVm1xSU1meGZmMXBZUm9UMCtmeFN6Q1pxbEROOWxLTFBkMzFqRDNOZzhNMXVXWmwzMTVOZmtSZUFNOGR3bFxuUWI1ajJucUl2RjFoSXBJazNuNWlWTnhTZ1FHSTFSSGtNWElFeVpkQzRSTWJoTXB3M05jdS9NTnVoMnQwVVo5elxuQk9sTVJkbm1aYVBnWjk2ajJNQ2wxanhxdXlMN2t1TXFWSDJROXA2aEZRS0JnUUQwc2FnYUpMbzlyVHhxMGdkRlxuc0wrRnViZ0dDV0htWjQyZUNuZ29CVSt0UldGckxtTXVSOEw0M0NlZnAwVy9YSnNEalFMcWt2eG1xTENPbC9XdVxuaGFOa09MMXQ1NnRSSGtMNDEzQ3FwUUh2UkpDNXRtUk9IZFRZc3dzeGdiSldRdk10bXZJV3lxY0tCaEg1RjJvRlxucWJsOHVzOGsza29qUzg3Zyt3c3h1SG13SndLQmdRRHhKOUpnRE9hUHdpR3c0ZG9nNFdHVEFHYWR3Y0swQkFrN1xuRm91NDRMcU9zZmJLQXIwdjFoL1lBQUtkdEowUVc5c0Y1QzRUaXUzRWpkM2pZQUdIM3gzbjJyb01lNFBJKzdHQlxuQTd2THFWa2E1WGkvV1c5RDUzdjVwOUg5VXRIQzM5OFQ0bFF5RUdRTjJvWUZTRnUrcFBlRnU2ZlZ2L2l4MFRvL1xuVEhtMSt3d1Ywd0tCZ1FEV2FBamxCNE9OWVl0TUNrYkhBTzJBcmxBYU1nUnZrQk1lQlF4dC9PRm84UjlBZkQvNVxub0hXdCs3SllpWWhxK2lqMS9vd3NvS2k3QjFyVlJ6L0dNV0VQQTB5d3pjdG1ZNzdKTG5XUmdNNW1LazBwL1RCOFxuNWxUSG9ITFJhVlNya3pSanBKNDE3RkpiVFNCWWcvU3BpNk4xTUhjclZmL2VWNkdwcnkrSzNKcjhCd0tCZ0JqR1xuZTVHTW9iOVJOWDdqcFRKTmxXV3gyOWtIU0FhUWg1WS9lYmxUdFRibHg3SDNXQkpyRURoenY5RU45amp4QnU1elxuQTl6VUlCdGFhOXBwU1o3NDZDeWl4d3h6UUJYTTdlNlFRS0hxMHhHMVU1TnREOFpOS09wOE9GR3JTWXVZem1WUFxua2xEV2FFRVlHejY5c1ZkRHdYNUd5alptazVsSklvL1FQb3pZcnVRckFvR0FLS0pKOVVUQkRBbTRsem5Bbk55bVxuRUs3eHZiZEs0ZitiY3hsMzhOa3FJT3dneFJ3VlFPMHdSdWcrYTdCYjcvNW0xYTYrYVJ1bTZuRGIwSS9hQlRQV1xualVlQTQxMnByOThKdEFnZVQ0MDV2d3poOGQ1TzdqYkVNL3R3c3dncXpJSUxncW53NnZlb0dSZW4rczlPclI3YlxuNjB5b0RNVjhlejZDeUtSakNWdG1SdEk9XG4tLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tXG4iLAogICJjbGllbnRfZW1haWwiOiAiZ290cmFja2VyLXNlcnZpY2UtYWNjb291bnRAbmV3LXJ1bnRyYWNraW5nLmlhbS5nc2VydmljZWFjY291bnQuY29tIiwKICAiY2xpZW50X2lkIjogIjExMzUxOTY1OTMwMDA5MTQ1NjA2MCIsCiAgImF1dGhfdXJpIjogImh0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbS9vL29hdXRoMi9hdXRoIiwKICAidG9rZW5fdXJpIjogImh0dHBzOi8vb2F1dGgyLmdvb2dsZWFwaXMuY29tL3Rva2VuIiwKICAiYXV0aF9wcm92aWRlcl94NTA5X2NlcnRfdXJsIjogImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92MS9jZXJ0cyIsCiAgImNsaWVudF94NTA5X2NlcnRfdXJsIjogImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL3JvYm90L3YxL21ldGFkYXRhL3g1MDkvZ290cmFja2VyLXNlcnZpY2UtYWNjb291bnQlNDBuZXctcnVudHJhY2tpbmcuaWFtLmdzZXJ2aWNlYWNjb3VudC5jb20iCn0K")
	credentialKeyBase64 = os.Getenv("CREDENTIAL_KEY")

	cred, err := b64.StdEncoding.DecodeString(credentialKeyBase64)
	if err != nil {
		log.Printf("Error decoding JSON: %v", err)
		return
	}

	var grades map[string]interface{}
	err = json.Unmarshal(cred, grades)
	if err != nil {
		fmt.Println(err)
	}

	fmt.Println(grades)

	client, err = cloudtasks.NewClient(ctx, option.WithCredentialsJSON(cred))
	if err != nil {
		fmt.Println(err)
	}
	queuePath := fmt.Sprintf("projects/%s/locations/%s/queues/%s", gcp_cloud_task_project_id,
		gcp_cloud_task_location_id, gcp_cloud_task_queue_id)
	// log.Println(scheduledTime)
	// Build the Task payload.
	// https://godoc.org/google.golang.org/genproto/googleapis/cloud/tasks/v2#CreateTaskRequest
	req := &taskspb.CreateTaskRequest{
		Parent: queuePath,
		Task: &taskspb.Task{
			// https://godoc.org/google.golang.org/genproto/googleapis/cloud/tasks/v2#HttpRequest
			MessageType: &taskspb.Task_HttpRequest{
				HttpRequest: &taskspb.HttpRequest{
					HttpMethod: taskspb.HttpMethod_POST,
					Url:        "https://intermediary-jzg35jprna-as.a.run.app/notification/pushnotification",
				},
			},
			ScheduleTime: timestamppb.Now(),
		},
	}

	log.Printf("Client INFO: %v/n", client)
	log.Printf("Task Request: %v/n", req)

}
