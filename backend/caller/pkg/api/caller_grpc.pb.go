// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/caller.proto

package caller

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CallerClient is the client API for Caller service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CallerClient interface {
	CallSample(ctx context.Context, in *CallSampleRequest, opts ...grpc.CallOption) (*CallSampleReply, error)
}

type callerClient struct {
	cc grpc.ClientConnInterface
}

func NewCallerClient(cc grpc.ClientConnInterface) CallerClient {
	return &callerClient{cc}
}

func (c *callerClient) CallSample(ctx context.Context, in *CallSampleRequest, opts ...grpc.CallOption) (*CallSampleReply, error) {
	out := new(CallSampleReply)
	err := c.cc.Invoke(ctx, "/caller.Caller/CallSample", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CallerServer is the server API for Caller service.
// All implementations must embed UnimplementedCallerServer
// for forward compatibility
type CallerServer interface {
	CallSample(context.Context, *CallSampleRequest) (*CallSampleReply, error)
	mustEmbedUnimplementedCallerServer()
}

// UnimplementedCallerServer must be embedded to have forward compatible implementations.
type UnimplementedCallerServer struct {
}

func (UnimplementedCallerServer) CallSample(context.Context, *CallSampleRequest) (*CallSampleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallSample not implemented")
}
func (UnimplementedCallerServer) mustEmbedUnimplementedCallerServer() {}

// UnsafeCallerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CallerServer will
// result in compilation errors.
type UnsafeCallerServer interface {
	mustEmbedUnimplementedCallerServer()
}

func RegisterCallerServer(s grpc.ServiceRegistrar, srv CallerServer) {
	s.RegisterService(&Caller_ServiceDesc, srv)
}

func _Caller_CallSample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallSampleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallerServer).CallSample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/caller.Caller/CallSample",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallerServer).CallSample(ctx, req.(*CallSampleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Caller_ServiceDesc is the grpc.ServiceDesc for Caller service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Caller_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "caller.Caller",
	HandlerType: (*CallerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CallSample",
			Handler:    _Caller_CallSample_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/caller.proto",
}
