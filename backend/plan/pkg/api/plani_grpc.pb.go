// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/plani.proto

package plan

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlanIClient is the client API for PlanI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlanIClient interface {
	UpdatePlanProgress(ctx context.Context, in *UpdatePlanProgressRequest, opts ...grpc.CallOption) (*UpdatePlanProgressReply, error)
	// for intermediary, cloud schedule check daily progress -> call intermediary -> call plani
	CheckDaily(ctx context.Context, in *CheckDailyRequest, opts ...grpc.CallOption) (*CheckDailyReply, error)
}

type planIClient struct {
	cc grpc.ClientConnInterface
}

func NewPlanIClient(cc grpc.ClientConnInterface) PlanIClient {
	return &planIClient{cc}
}

func (c *planIClient) UpdatePlanProgress(ctx context.Context, in *UpdatePlanProgressRequest, opts ...grpc.CallOption) (*UpdatePlanProgressReply, error) {
	out := new(UpdatePlanProgressReply)
	err := c.cc.Invoke(ctx, "/plan.PlanI/UpdatePlanProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planIClient) CheckDaily(ctx context.Context, in *CheckDailyRequest, opts ...grpc.CallOption) (*CheckDailyReply, error) {
	out := new(CheckDailyReply)
	err := c.cc.Invoke(ctx, "/plan.PlanI/CheckDaily", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlanIServer is the server API for PlanI service.
// All implementations must embed UnimplementedPlanIServer
// for forward compatibility
type PlanIServer interface {
	UpdatePlanProgress(context.Context, *UpdatePlanProgressRequest) (*UpdatePlanProgressReply, error)
	// for intermediary, cloud schedule check daily progress -> call intermediary -> call plani
	CheckDaily(context.Context, *CheckDailyRequest) (*CheckDailyReply, error)
	mustEmbedUnimplementedPlanIServer()
}

// UnimplementedPlanIServer must be embedded to have forward compatible implementations.
type UnimplementedPlanIServer struct {
}

func (UnimplementedPlanIServer) UpdatePlanProgress(context.Context, *UpdatePlanProgressRequest) (*UpdatePlanProgressReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlanProgress not implemented")
}
func (UnimplementedPlanIServer) CheckDaily(context.Context, *CheckDailyRequest) (*CheckDailyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckDaily not implemented")
}
func (UnimplementedPlanIServer) mustEmbedUnimplementedPlanIServer() {}

// UnsafePlanIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlanIServer will
// result in compilation errors.
type UnsafePlanIServer interface {
	mustEmbedUnimplementedPlanIServer()
}

func RegisterPlanIServer(s grpc.ServiceRegistrar, srv PlanIServer) {
	s.RegisterService(&PlanI_ServiceDesc, srv)
}

func _PlanI_UpdatePlanProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlanProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanIServer).UpdatePlanProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plan.PlanI/UpdatePlanProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanIServer).UpdatePlanProgress(ctx, req.(*UpdatePlanProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanI_CheckDaily_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckDailyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanIServer).CheckDaily(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plan.PlanI/CheckDaily",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanIServer).CheckDaily(ctx, req.(*CheckDailyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlanI_ServiceDesc is the grpc.ServiceDesc for PlanI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlanI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "plan.PlanI",
	HandlerType: (*PlanIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdatePlanProgress",
			Handler:    _PlanI_UpdatePlanProgress_Handler,
		},
		{
			MethodName: "CheckDaily",
			Handler:    _PlanI_CheckDaily_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/plani.proto",
}
