// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: api/plan.proto

package plan

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ActivityType int32

const (
	ActivityType_ACTIVITY_TYPE_UNSPECIFIED ActivityType = 0
	ActivityType_ACTIVITY_TYPE_RUNNING     ActivityType = 1
	ActivityType_ACTIVITY_TYPE_CYCLING     ActivityType = 2
	ActivityType_ACTIVITY_TYPE_WALKING     ActivityType = 3
)

// Enum value maps for ActivityType.
var (
	ActivityType_name = map[int32]string{
		0: "ACTIVITY_TYPE_UNSPECIFIED",
		1: "ACTIVITY_TYPE_RUNNING",
		2: "ACTIVITY_TYPE_CYCLING",
		3: "ACTIVITY_TYPE_WALKING",
	}
	ActivityType_value = map[string]int32{
		"ACTIVITY_TYPE_UNSPECIFIED": 0,
		"ACTIVITY_TYPE_RUNNING":     1,
		"ACTIVITY_TYPE_CYCLING":     2,
		"ACTIVITY_TYPE_WALKING":     3,
	}
)

func (x ActivityType) Enum() *ActivityType {
	p := new(ActivityType)
	*p = x
	return p
}

func (x ActivityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActivityType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_plan_proto_enumTypes[0].Descriptor()
}

func (ActivityType) Type() protoreflect.EnumType {
	return &file_api_plan_proto_enumTypes[0]
}

func (x ActivityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActivityType.Descriptor instead.
func (ActivityType) EnumDescriptor() ([]byte, []int) {
	return file_api_plan_proto_rawDescGZIP(), []int{0}
}

type Rule int32

const (
	Rule_RULE_UNSPECIFIED          Rule = 0
	Rule_RULE_TOTAL_DISTANCE       Rule = 1
	Rule_RULE_TOTAL_DISTANCE_DAILY Rule = 2
	Rule_RULE_TOTAL_TIME           Rule = 3
	Rule_RULE_TOTAL_TIME_DAILY     Rule = 4
	Rule_RULE_TOTAL_ACTIVITY       Rule = 5
	Rule_RULE_TOTAL_ACTIVITY_DAILY Rule = 6
	Rule_RULE_TOTAL_CALORIES       Rule = 7
	Rule_RULE_TOTAL_CALORIES_DAILY Rule = 8
)

// Enum value maps for Rule.
var (
	Rule_name = map[int32]string{
		0: "RULE_UNSPECIFIED",
		1: "RULE_TOTAL_DISTANCE",
		2: "RULE_TOTAL_DISTANCE_DAILY",
		3: "RULE_TOTAL_TIME",
		4: "RULE_TOTAL_TIME_DAILY",
		5: "RULE_TOTAL_ACTIVITY",
		6: "RULE_TOTAL_ACTIVITY_DAILY",
		7: "RULE_TOTAL_CALORIES",
		8: "RULE_TOTAL_CALORIES_DAILY",
	}
	Rule_value = map[string]int32{
		"RULE_UNSPECIFIED":          0,
		"RULE_TOTAL_DISTANCE":       1,
		"RULE_TOTAL_DISTANCE_DAILY": 2,
		"RULE_TOTAL_TIME":           3,
		"RULE_TOTAL_TIME_DAILY":     4,
		"RULE_TOTAL_ACTIVITY":       5,
		"RULE_TOTAL_ACTIVITY_DAILY": 6,
		"RULE_TOTAL_CALORIES":       7,
		"RULE_TOTAL_CALORIES_DAILY": 8,
	}
)

func (x Rule) Enum() *Rule {
	p := new(Rule)
	*p = x
	return p
}

func (x Rule) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Rule) Descriptor() protoreflect.EnumDescriptor {
	return file_api_plan_proto_enumTypes[1].Descriptor()
}

func (Rule) Type() protoreflect.EnumType {
	return &file_api_plan_proto_enumTypes[1]
}

func (x Rule) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Rule.Descriptor instead.
func (Rule) EnumDescriptor() ([]byte, []int) {
	return file_api_plan_proto_rawDescGZIP(), []int{1}
}

type RuleStatus int32

const (
	RuleStatus_RULE_STATUS_UNSPECIFIED RuleStatus = 0
	RuleStatus_RULE_STATUS_FAILED      RuleStatus = 1
	RuleStatus_RULE_STATUS_COMPLETED   RuleStatus = 2
	RuleStatus_RULE_STATUS_INPROGRESS  RuleStatus = 3
)

// Enum value maps for RuleStatus.
var (
	RuleStatus_name = map[int32]string{
		0: "RULE_STATUS_UNSPECIFIED",
		1: "RULE_STATUS_FAILED",
		2: "RULE_STATUS_COMPLETED",
		3: "RULE_STATUS_INPROGRESS",
	}
	RuleStatus_value = map[string]int32{
		"RULE_STATUS_UNSPECIFIED": 0,
		"RULE_STATUS_FAILED":      1,
		"RULE_STATUS_COMPLETED":   2,
		"RULE_STATUS_INPROGRESS":  3,
	}
)

func (x RuleStatus) Enum() *RuleStatus {
	p := new(RuleStatus)
	*p = x
	return p
}

func (x RuleStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RuleStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_plan_proto_enumTypes[2].Descriptor()
}

func (RuleStatus) Type() protoreflect.EnumType {
	return &file_api_plan_proto_enumTypes[2]
}

func (x RuleStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RuleStatus.Descriptor instead.
func (RuleStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_plan_proto_rawDescGZIP(), []int{2}
}

type PlanSortBy int32

const (
	PlanSortBy_PLAN_SORT_BY_UNSPECIFIED  PlanSortBy = 0
	PlanSortBy_PLAN_SORT_BY_CREATED_TIME PlanSortBy = 1 // Same as Date created
	PlanSortBy_PLAN_SORT_BY_PROGESS      PlanSortBy = 2
	PlanSortBy_PLAN_SORT_BY_END_TIME     PlanSortBy = 3
	PlanSortBy_PLAN_SORT_BY_START_TIME   PlanSortBy = 4
)

// Enum value maps for PlanSortBy.
var (
	PlanSortBy_name = map[int32]string{
		0: "PLAN_SORT_BY_UNSPECIFIED",
		1: "PLAN_SORT_BY_CREATED_TIME",
		2: "PLAN_SORT_BY_PROGESS",
		3: "PLAN_SORT_BY_END_TIME",
		4: "PLAN_SORT_BY_START_TIME",
	}
	PlanSortBy_value = map[string]int32{
		"PLAN_SORT_BY_UNSPECIFIED":  0,
		"PLAN_SORT_BY_CREATED_TIME": 1,
		"PLAN_SORT_BY_PROGESS":      2,
		"PLAN_SORT_BY_END_TIME":     3,
		"PLAN_SORT_BY_START_TIME":   4,
	}
)

func (x PlanSortBy) Enum() *PlanSortBy {
	p := new(PlanSortBy)
	*p = x
	return p
}

func (x PlanSortBy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlanSortBy) Descriptor() protoreflect.EnumDescriptor {
	return file_api_plan_proto_enumTypes[3].Descriptor()
}

func (PlanSortBy) Type() protoreflect.EnumType {
	return &file_api_plan_proto_enumTypes[3]
}

func (x PlanSortBy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlanSortBy.Descriptor instead.
func (PlanSortBy) EnumDescriptor() ([]byte, []int) {
	return file_api_plan_proto_rawDescGZIP(), []int{3}
}

type CreatePlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rule         Rule                   `protobuf:"varint,1,opt,name=rule,proto3,enum=plan.Rule" json:"rule,omitempty"`
	ActivityType ActivityType           `protobuf:"varint,2,opt,name=activity_type,json=activityType,proto3,enum=plan.ActivityType" json:"activity_type,omitempty"`
	StartTime    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Goal         int64                  `protobuf:"varint,5,opt,name=goal,proto3" json:"goal,omitempty"`
	Name         string                 `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Note         string                 `protobuf:"bytes,7,opt,name=note,proto3" json:"note,omitempty"`
	TimeZone     uint32                 `protobuf:"varint,8,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
}

func (x *CreatePlanRequest) Reset() {
	*x = CreatePlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_plan_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlanRequest) ProtoMessage() {}

func (x *CreatePlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_plan_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePlanRequest.ProtoReflect.Descriptor instead.
func (*CreatePlanRequest) Descriptor() ([]byte, []int) {
	return file_api_plan_proto_rawDescGZIP(), []int{0}
}

func (x *CreatePlanRequest) GetRule() Rule {
	if x != nil {
		return x.Rule
	}
	return Rule_RULE_UNSPECIFIED
}

func (x *CreatePlanRequest) GetActivityType() ActivityType {
	if x != nil {
		return x.ActivityType
	}
	return ActivityType_ACTIVITY_TYPE_UNSPECIFIED
}

func (x *CreatePlanRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *CreatePlanRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *CreatePlanRequest) GetGoal() int64 {
	if x != nil {
		return x.Goal
	}
	return 0
}

func (x *CreatePlanRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreatePlanRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *CreatePlanRequest) GetTimeZone() uint32 {
	if x != nil {
		return x.TimeZone
	}
	return 0
}

type CreatePlanReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreatePlanReply) Reset() {
	*x = CreatePlanReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_plan_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePlanReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlanReply) ProtoMessage() {}

func (x *CreatePlanReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_plan_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePlanReply.ProtoReflect.Descriptor instead.
func (*CreatePlanReply) Descriptor() ([]byte, []int) {
	return file_api_plan_proto_rawDescGZIP(), []int{1}
}

type PlanProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Value     int64                  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PlanProgress) Reset() {
	*x = PlanProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_plan_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanProgress) ProtoMessage() {}

func (x *PlanProgress) ProtoReflect() protoreflect.Message {
	mi := &file_api_plan_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanProgress.ProtoReflect.Descriptor instead.
func (*PlanProgress) Descriptor() ([]byte, []int) {
	return file_api_plan_proto_rawDescGZIP(), []int{2}
}

func (x *PlanProgress) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *PlanProgress) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type PlanInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ActivityType ActivityType           `protobuf:"varint,2,opt,name=activity_type,json=activityType,proto3,enum=plan.ActivityType" json:"activity_type,omitempty"`
	StartTime    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Goal         int64                  `protobuf:"varint,5,opt,name=goal,proto3" json:"goal,omitempty"`
	Total        int64                  `protobuf:"varint,6,opt,name=total,proto3" json:"total,omitempty"`
	Name         string                 `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	Note         string                 `protobuf:"bytes,9,opt,name=note,proto3" json:"note,omitempty"`
	Rule         Rule                   `protobuf:"varint,10,opt,name=rule,proto3,enum=plan.Rule" json:"rule,omitempty"`
	Progress     []*PlanProgress        `protobuf:"bytes,11,rep,name=progress,proto3" json:"progress,omitempty"`
	CreatedAt    *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Status       RuleStatus             `protobuf:"varint,12,opt,name=status,proto3,enum=plan.RuleStatus" json:"status,omitempty"`
}

func (x *PlanInfo) Reset() {
	*x = PlanInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_plan_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanInfo) ProtoMessage() {}

func (x *PlanInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_plan_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanInfo.ProtoReflect.Descriptor instead.
func (*PlanInfo) Descriptor() ([]byte, []int) {
	return file_api_plan_proto_rawDescGZIP(), []int{3}
}

func (x *PlanInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PlanInfo) GetActivityType() ActivityType {
	if x != nil {
		return x.ActivityType
	}
	return ActivityType_ACTIVITY_TYPE_UNSPECIFIED
}

func (x *PlanInfo) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *PlanInfo) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *PlanInfo) GetGoal() int64 {
	if x != nil {
		return x.Goal
	}
	return 0
}

func (x *PlanInfo) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PlanInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlanInfo) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *PlanInfo) GetRule() Rule {
	if x != nil {
		return x.Rule
	}
	return Rule_RULE_UNSPECIFIED
}

func (x *PlanInfo) GetProgress() []*PlanProgress {
	if x != nil {
		return x.Progress
	}
	return nil
}

func (x *PlanInfo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PlanInfo) GetStatus() RuleStatus {
	if x != nil {
		return x.Status
	}
	return RuleStatus_RULE_STATUS_UNSPECIFIED
}

type ListPlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit        uint32                 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset       uint64                 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Ascending    bool                   `protobuf:"varint,3,opt,name=ascending,proto3" json:"ascending,omitempty"`
	SortBy       PlanSortBy             `protobuf:"varint,4,opt,name=sort_by,json=sortBy,proto3,enum=plan.PlanSortBy" json:"sort_by,omitempty"`
	ActivityType ActivityType           `protobuf:"varint,5,opt,name=activity_type,json=activityType,proto3,enum=plan.ActivityType" json:"activity_type,omitempty"` // only get activity with this type, to get all, pass ACTIVITY_TYPE_UNSPECIFIED
	From         *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=from,proto3" json:"from,omitempty"`
	To           *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *ListPlanRequest) Reset() {
	*x = ListPlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_plan_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPlanRequest) ProtoMessage() {}

func (x *ListPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_plan_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPlanRequest.ProtoReflect.Descriptor instead.
func (*ListPlanRequest) Descriptor() ([]byte, []int) {
	return file_api_plan_proto_rawDescGZIP(), []int{4}
}

func (x *ListPlanRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListPlanRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListPlanRequest) GetAscending() bool {
	if x != nil {
		return x.Ascending
	}
	return false
}

func (x *ListPlanRequest) GetSortBy() PlanSortBy {
	if x != nil {
		return x.SortBy
	}
	return PlanSortBy_PLAN_SORT_BY_UNSPECIFIED
}

func (x *ListPlanRequest) GetActivityType() ActivityType {
	if x != nil {
		return x.ActivityType
	}
	return ActivityType_ACTIVITY_TYPE_UNSPECIFIED
}

func (x *ListPlanRequest) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *ListPlanRequest) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

type ListPlanReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plans []*PlanInfo `protobuf:"bytes,1,rep,name=plans,proto3" json:"plans,omitempty"`
	Total int64       `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ListPlanReply) Reset() {
	*x = ListPlanReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_plan_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPlanReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPlanReply) ProtoMessage() {}

func (x *ListPlanReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_plan_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPlanReply.ProtoReflect.Descriptor instead.
func (*ListPlanReply) Descriptor() ([]byte, []int) {
	return file_api_plan_proto_rawDescGZIP(), []int{5}
}

func (x *ListPlanReply) GetPlans() []*PlanInfo {
	if x != nil {
		return x.Plans
	}
	return nil
}

func (x *ListPlanReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type DeletePlansRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeletePlansRequest) Reset() {
	*x = DeletePlansRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_plan_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePlansRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePlansRequest) ProtoMessage() {}

func (x *DeletePlansRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_plan_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePlansRequest.ProtoReflect.Descriptor instead.
func (*DeletePlansRequest) Descriptor() ([]byte, []int) {
	return file_api_plan_proto_rawDescGZIP(), []int{6}
}

func (x *DeletePlansRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeletePlansReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeletePlansReply) Reset() {
	*x = DeletePlansReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_plan_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePlansReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePlansReply) ProtoMessage() {}

func (x *DeletePlansReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_plan_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePlansReply.ProtoReflect.Descriptor instead.
func (*DeletePlansReply) Descriptor() ([]byte, []int) {
	return file_api_plan_proto_rawDescGZIP(), []int{7}
}

type UpdatePlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	EndTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"` // only ra sau
	Goal    int64                  `protobuf:"varint,5,opt,name=goal,proto3" json:"goal,omitempty"`
	Name    string                 `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Note    string                 `protobuf:"bytes,7,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *UpdatePlanRequest) Reset() {
	*x = UpdatePlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_plan_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePlanRequest) ProtoMessage() {}

func (x *UpdatePlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_plan_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePlanRequest.ProtoReflect.Descriptor instead.
func (*UpdatePlanRequest) Descriptor() ([]byte, []int) {
	return file_api_plan_proto_rawDescGZIP(), []int{8}
}

func (x *UpdatePlanRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdatePlanRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *UpdatePlanRequest) GetGoal() int64 {
	if x != nil {
		return x.Goal
	}
	return 0
}

func (x *UpdatePlanRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdatePlanRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type UpdatePlanReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdatePlanReply) Reset() {
	*x = UpdatePlanReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_plan_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePlanReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePlanReply) ProtoMessage() {}

func (x *UpdatePlanReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_plan_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePlanReply.ProtoReflect.Descriptor instead.
func (*UpdatePlanReply) Descriptor() ([]byte, []int) {
	return file_api_plan_proto_rawDescGZIP(), []int{9}
}

var File_api_plan_proto protoreflect.FileDescriptor

var file_api_plan_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb7, 0x02, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x37, 0x0a,
	0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x61, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e,
	0x65, 0x22, 0x11, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x5e, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xcc, 0x03, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x37, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x67, 0x6f, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x67, 0x6f, 0x61, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f,
	0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x1e,
	0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x2e,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x2e, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x9d, 0x02, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x73, 0x63, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x6e,
	0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x37,
	0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x02, 0x74, 0x6f, 0x22, 0x4b, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x22, 0x26, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x12, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x96, 0x01, 0x0a,
	0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x61,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x22, 0x11, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2a, 0x7e, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47,
	0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x59, 0x43, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x19, 0x0a,
	0x15, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57,
	0x41, 0x4c, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x2a, 0xf4, 0x01, 0x0a, 0x04, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x55, 0x4c, 0x45, 0x5f,
	0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x01,
	0x12, 0x1d, 0x0a, 0x19, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x44,
	0x49, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x10, 0x02, 0x12,
	0x13, 0x0a, 0x0f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x4f, 0x54,
	0x41, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x10, 0x04, 0x12,
	0x17, 0x0a, 0x13, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x55, 0x4c, 0x45,
	0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x41, 0x49, 0x4c, 0x59, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x55, 0x4c, 0x45, 0x5f,
	0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x43, 0x41, 0x4c, 0x4f, 0x52, 0x49, 0x45, 0x53, 0x10, 0x07,
	0x12, 0x1d, 0x0a, 0x19, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x43,
	0x41, 0x4c, 0x4f, 0x52, 0x49, 0x45, 0x53, 0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x10, 0x08, 0x2a,
	0x78, 0x0a, 0x0a, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a,
	0x17, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x55,
	0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1a, 0x0a,
	0x16, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x50,
	0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x03, 0x2a, 0x9b, 0x01, 0x0a, 0x0a, 0x50, 0x6c,
	0x61, 0x6e, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x4c, 0x41, 0x4e,
	0x5f, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x53,
	0x4f, 0x52, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x53, 0x4f,
	0x52, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12,
	0x19, 0x0a, 0x15, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x42, 0x59, 0x5f,
	0x45, 0x4e, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4c,
	0x41, 0x4e, 0x5f, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x04, 0x32, 0xfb, 0x01, 0x0a, 0x04, 0x50, 0x6c, 0x61, 0x6e,
	0x12, 0x3c, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x17,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x36,
	0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x15, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x13, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3f, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x18, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61,
	0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3c, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x17, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x61, 0x6e, 0x68, 0x72, 0x65, 0x76, 0x2f, 0x72, 0x75, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f,
	0x70, 0x6c, 0x61, 0x6e, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x3b, 0x70, 0x6c, 0x61,
	0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_plan_proto_rawDescOnce sync.Once
	file_api_plan_proto_rawDescData = file_api_plan_proto_rawDesc
)

func file_api_plan_proto_rawDescGZIP() []byte {
	file_api_plan_proto_rawDescOnce.Do(func() {
		file_api_plan_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_plan_proto_rawDescData)
	})
	return file_api_plan_proto_rawDescData
}

var file_api_plan_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_api_plan_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_api_plan_proto_goTypes = []interface{}{
	(ActivityType)(0),             // 0: plan.ActivityType
	(Rule)(0),                     // 1: plan.Rule
	(RuleStatus)(0),               // 2: plan.RuleStatus
	(PlanSortBy)(0),               // 3: plan.PlanSortBy
	(*CreatePlanRequest)(nil),     // 4: plan.CreatePlanRequest
	(*CreatePlanReply)(nil),       // 5: plan.CreatePlanReply
	(*PlanProgress)(nil),          // 6: plan.PlanProgress
	(*PlanInfo)(nil),              // 7: plan.PlanInfo
	(*ListPlanRequest)(nil),       // 8: plan.ListPlanRequest
	(*ListPlanReply)(nil),         // 9: plan.ListPlanReply
	(*DeletePlansRequest)(nil),    // 10: plan.DeletePlansRequest
	(*DeletePlansReply)(nil),      // 11: plan.DeletePlansReply
	(*UpdatePlanRequest)(nil),     // 12: plan.UpdatePlanRequest
	(*UpdatePlanReply)(nil),       // 13: plan.UpdatePlanReply
	(*timestamppb.Timestamp)(nil), // 14: google.protobuf.Timestamp
}
var file_api_plan_proto_depIdxs = []int32{
	1,  // 0: plan.CreatePlanRequest.rule:type_name -> plan.Rule
	0,  // 1: plan.CreatePlanRequest.activity_type:type_name -> plan.ActivityType
	14, // 2: plan.CreatePlanRequest.start_time:type_name -> google.protobuf.Timestamp
	14, // 3: plan.CreatePlanRequest.end_time:type_name -> google.protobuf.Timestamp
	14, // 4: plan.PlanProgress.timestamp:type_name -> google.protobuf.Timestamp
	0,  // 5: plan.PlanInfo.activity_type:type_name -> plan.ActivityType
	14, // 6: plan.PlanInfo.start_time:type_name -> google.protobuf.Timestamp
	14, // 7: plan.PlanInfo.end_time:type_name -> google.protobuf.Timestamp
	1,  // 8: plan.PlanInfo.rule:type_name -> plan.Rule
	6,  // 9: plan.PlanInfo.progress:type_name -> plan.PlanProgress
	14, // 10: plan.PlanInfo.created_at:type_name -> google.protobuf.Timestamp
	2,  // 11: plan.PlanInfo.status:type_name -> plan.RuleStatus
	3,  // 12: plan.ListPlanRequest.sort_by:type_name -> plan.PlanSortBy
	0,  // 13: plan.ListPlanRequest.activity_type:type_name -> plan.ActivityType
	14, // 14: plan.ListPlanRequest.from:type_name -> google.protobuf.Timestamp
	14, // 15: plan.ListPlanRequest.to:type_name -> google.protobuf.Timestamp
	7,  // 16: plan.ListPlanReply.plans:type_name -> plan.PlanInfo
	14, // 17: plan.UpdatePlanRequest.end_time:type_name -> google.protobuf.Timestamp
	4,  // 18: plan.Plan.CreatePlan:input_type -> plan.CreatePlanRequest
	8,  // 19: plan.Plan.ListPlan:input_type -> plan.ListPlanRequest
	10, // 20: plan.Plan.DeletePlans:input_type -> plan.DeletePlansRequest
	12, // 21: plan.Plan.UpdatePlan:input_type -> plan.UpdatePlanRequest
	5,  // 22: plan.Plan.CreatePlan:output_type -> plan.CreatePlanReply
	9,  // 23: plan.Plan.ListPlan:output_type -> plan.ListPlanReply
	11, // 24: plan.Plan.DeletePlans:output_type -> plan.DeletePlansReply
	13, // 25: plan.Plan.UpdatePlan:output_type -> plan.UpdatePlanReply
	22, // [22:26] is the sub-list for method output_type
	18, // [18:22] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_api_plan_proto_init() }
func file_api_plan_proto_init() {
	if File_api_plan_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_plan_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_plan_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePlanReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_plan_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_plan_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_plan_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_plan_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPlanReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_plan_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePlansRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_plan_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePlansReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_plan_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_plan_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePlanReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_plan_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_plan_proto_goTypes,
		DependencyIndexes: file_api_plan_proto_depIdxs,
		EnumInfos:         file_api_plan_proto_enumTypes,
		MessageInfos:      file_api_plan_proto_msgTypes,
	}.Build()
	File_api_plan_proto = out.File
	file_api_plan_proto_rawDesc = nil
	file_api_plan_proto_goTypes = nil
	file_api_plan_proto_depIdxs = nil
}
