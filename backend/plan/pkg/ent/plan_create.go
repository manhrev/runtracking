// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/manhrev/runtracking/backend/plan/pkg/ent/plan"
	"github.com/manhrev/runtracking/backend/plan/pkg/ent/schema"
)

// PlanCreate is the builder for creating a Plan entity.
type PlanCreate struct {
	config
	mutation *PlanMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (pc *PlanCreate) SetUserID(i int64) *PlanCreate {
	pc.mutation.SetUserID(i)
	return pc
}

// SetRule sets the "rule" field.
func (pc *PlanCreate) SetRule(i int64) *PlanCreate {
	pc.mutation.SetRule(i)
	return pc
}

// SetNillableRule sets the "rule" field if the given value is not nil.
func (pc *PlanCreate) SetNillableRule(i *int64) *PlanCreate {
	if i != nil {
		pc.SetRule(*i)
	}
	return pc
}

// SetActivityType sets the "activity_type" field.
func (pc *PlanCreate) SetActivityType(i int64) *PlanCreate {
	pc.mutation.SetActivityType(i)
	return pc
}

// SetNillableActivityType sets the "activity_type" field if the given value is not nil.
func (pc *PlanCreate) SetNillableActivityType(i *int64) *PlanCreate {
	if i != nil {
		pc.SetActivityType(*i)
	}
	return pc
}

// SetStartTime sets the "start_time" field.
func (pc *PlanCreate) SetStartTime(t time.Time) *PlanCreate {
	pc.mutation.SetStartTime(t)
	return pc
}

// SetEndTime sets the "end_time" field.
func (pc *PlanCreate) SetEndTime(t time.Time) *PlanCreate {
	pc.mutation.SetEndTime(t)
	return pc
}

// SetTotal sets the "total" field.
func (pc *PlanCreate) SetTotal(i int64) *PlanCreate {
	pc.mutation.SetTotal(i)
	return pc
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (pc *PlanCreate) SetNillableTotal(i *int64) *PlanCreate {
	if i != nil {
		pc.SetTotal(*i)
	}
	return pc
}

// SetGoal sets the "goal" field.
func (pc *PlanCreate) SetGoal(i int64) *PlanCreate {
	pc.mutation.SetGoal(i)
	return pc
}

// SetStatus sets the "status" field.
func (pc *PlanCreate) SetStatus(i int64) *PlanCreate {
	pc.mutation.SetStatus(i)
	return pc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pc *PlanCreate) SetNillableStatus(i *int64) *PlanCreate {
	if i != nil {
		pc.SetStatus(*i)
	}
	return pc
}

// SetProgess sets the "progess" field.
func (pc *PlanCreate) SetProgess(s *schema.Progress) *PlanCreate {
	pc.mutation.SetProgess(s)
	return pc
}

// SetCreatedAt sets the "created_at" field.
func (pc *PlanCreate) SetCreatedAt(t time.Time) *PlanCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PlanCreate) SetNillableCreatedAt(t *time.Time) *PlanCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetName sets the "name" field.
func (pc *PlanCreate) SetName(s string) *PlanCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetNote sets the "note" field.
func (pc *PlanCreate) SetNote(s string) *PlanCreate {
	pc.mutation.SetNote(s)
	return pc
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (pc *PlanCreate) SetNillableNote(s *string) *PlanCreate {
	if s != nil {
		pc.SetNote(*s)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *PlanCreate) SetID(i int64) *PlanCreate {
	pc.mutation.SetID(i)
	return pc
}

// Mutation returns the PlanMutation object of the builder.
func (pc *PlanCreate) Mutation() *PlanMutation {
	return pc.mutation
}

// Save creates the Plan in the database.
func (pc *PlanCreate) Save(ctx context.Context) (*Plan, error) {
	pc.defaults()
	return withHooks[*Plan, PlanMutation](ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PlanCreate) SaveX(ctx context.Context) *Plan {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PlanCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PlanCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PlanCreate) defaults() {
	if _, ok := pc.mutation.Rule(); !ok {
		v := plan.DefaultRule
		pc.mutation.SetRule(v)
	}
	if _, ok := pc.mutation.ActivityType(); !ok {
		v := plan.DefaultActivityType
		pc.mutation.SetActivityType(v)
	}
	if _, ok := pc.mutation.Total(); !ok {
		v := plan.DefaultTotal
		pc.mutation.SetTotal(v)
	}
	if _, ok := pc.mutation.Status(); !ok {
		v := plan.DefaultStatus
		pc.mutation.SetStatus(v)
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := plan.DefaultCreatedAt
		pc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PlanCreate) check() error {
	if _, ok := pc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Plan.user_id"`)}
	}
	if _, ok := pc.mutation.Rule(); !ok {
		return &ValidationError{Name: "rule", err: errors.New(`ent: missing required field "Plan.rule"`)}
	}
	if _, ok := pc.mutation.ActivityType(); !ok {
		return &ValidationError{Name: "activity_type", err: errors.New(`ent: missing required field "Plan.activity_type"`)}
	}
	if _, ok := pc.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "Plan.start_time"`)}
	}
	if _, ok := pc.mutation.EndTime(); !ok {
		return &ValidationError{Name: "end_time", err: errors.New(`ent: missing required field "Plan.end_time"`)}
	}
	if _, ok := pc.mutation.Total(); !ok {
		return &ValidationError{Name: "total", err: errors.New(`ent: missing required field "Plan.total"`)}
	}
	if _, ok := pc.mutation.Goal(); !ok {
		return &ValidationError{Name: "goal", err: errors.New(`ent: missing required field "Plan.goal"`)}
	}
	if _, ok := pc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Plan.status"`)}
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Plan.created_at"`)}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Plan.name"`)}
	}
	return nil
}

func (pc *PlanCreate) sqlSave(ctx context.Context) (*Plan, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PlanCreate) createSpec() (*Plan, *sqlgraph.CreateSpec) {
	var (
		_node = &Plan{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(plan.Table, sqlgraph.NewFieldSpec(plan.FieldID, field.TypeInt64))
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.UserID(); ok {
		_spec.SetField(plan.FieldUserID, field.TypeInt64, value)
		_node.UserID = value
	}
	if value, ok := pc.mutation.Rule(); ok {
		_spec.SetField(plan.FieldRule, field.TypeInt64, value)
		_node.Rule = value
	}
	if value, ok := pc.mutation.ActivityType(); ok {
		_spec.SetField(plan.FieldActivityType, field.TypeInt64, value)
		_node.ActivityType = value
	}
	if value, ok := pc.mutation.StartTime(); ok {
		_spec.SetField(plan.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := pc.mutation.EndTime(); ok {
		_spec.SetField(plan.FieldEndTime, field.TypeTime, value)
		_node.EndTime = value
	}
	if value, ok := pc.mutation.Total(); ok {
		_spec.SetField(plan.FieldTotal, field.TypeInt64, value)
		_node.Total = value
	}
	if value, ok := pc.mutation.Goal(); ok {
		_spec.SetField(plan.FieldGoal, field.TypeInt64, value)
		_node.Goal = value
	}
	if value, ok := pc.mutation.Status(); ok {
		_spec.SetField(plan.FieldStatus, field.TypeInt64, value)
		_node.Status = value
	}
	if value, ok := pc.mutation.Progess(); ok {
		_spec.SetField(plan.FieldProgess, field.TypeJSON, value)
		_node.Progess = value
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(plan.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(plan.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.Note(); ok {
		_spec.SetField(plan.FieldNote, field.TypeString, value)
		_node.Note = value
	}
	return _node, _spec
}

// PlanCreateBulk is the builder for creating many Plan entities in bulk.
type PlanCreateBulk struct {
	config
	builders []*PlanCreate
}

// Save creates the Plan entities in the database.
func (pcb *PlanCreateBulk) Save(ctx context.Context) ([]*Plan, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Plan, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PlanMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PlanCreateBulk) SaveX(ctx context.Context) []*Plan {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PlanCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PlanCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
