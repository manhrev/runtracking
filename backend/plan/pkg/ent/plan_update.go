// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/manhrev/runtracking/backend/plan/pkg/ent/plan"
	"github.com/manhrev/runtracking/backend/plan/pkg/ent/predicate"
	"github.com/manhrev/runtracking/backend/plan/pkg/ent/schema"
)

// PlanUpdate is the builder for updating Plan entities.
type PlanUpdate struct {
	config
	hooks     []Hook
	mutation  *PlanMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PlanUpdate builder.
func (pu *PlanUpdate) Where(ps ...predicate.Plan) *PlanUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUserID sets the "user_id" field.
func (pu *PlanUpdate) SetUserID(i int64) *PlanUpdate {
	pu.mutation.ResetUserID()
	pu.mutation.SetUserID(i)
	return pu
}

// AddUserID adds i to the "user_id" field.
func (pu *PlanUpdate) AddUserID(i int64) *PlanUpdate {
	pu.mutation.AddUserID(i)
	return pu
}

// SetRule sets the "rule" field.
func (pu *PlanUpdate) SetRule(i int64) *PlanUpdate {
	pu.mutation.ResetRule()
	pu.mutation.SetRule(i)
	return pu
}

// SetNillableRule sets the "rule" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableRule(i *int64) *PlanUpdate {
	if i != nil {
		pu.SetRule(*i)
	}
	return pu
}

// AddRule adds i to the "rule" field.
func (pu *PlanUpdate) AddRule(i int64) *PlanUpdate {
	pu.mutation.AddRule(i)
	return pu
}

// SetActivityType sets the "activity_type" field.
func (pu *PlanUpdate) SetActivityType(i int64) *PlanUpdate {
	pu.mutation.ResetActivityType()
	pu.mutation.SetActivityType(i)
	return pu
}

// SetNillableActivityType sets the "activity_type" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableActivityType(i *int64) *PlanUpdate {
	if i != nil {
		pu.SetActivityType(*i)
	}
	return pu
}

// AddActivityType adds i to the "activity_type" field.
func (pu *PlanUpdate) AddActivityType(i int64) *PlanUpdate {
	pu.mutation.AddActivityType(i)
	return pu
}

// SetStartTime sets the "start_time" field.
func (pu *PlanUpdate) SetStartTime(t time.Time) *PlanUpdate {
	pu.mutation.SetStartTime(t)
	return pu
}

// SetEndTime sets the "end_time" field.
func (pu *PlanUpdate) SetEndTime(t time.Time) *PlanUpdate {
	pu.mutation.SetEndTime(t)
	return pu
}

// SetTotal sets the "total" field.
func (pu *PlanUpdate) SetTotal(i int64) *PlanUpdate {
	pu.mutation.ResetTotal()
	pu.mutation.SetTotal(i)
	return pu
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableTotal(i *int64) *PlanUpdate {
	if i != nil {
		pu.SetTotal(*i)
	}
	return pu
}

// AddTotal adds i to the "total" field.
func (pu *PlanUpdate) AddTotal(i int64) *PlanUpdate {
	pu.mutation.AddTotal(i)
	return pu
}

// SetGoal sets the "goal" field.
func (pu *PlanUpdate) SetGoal(i int64) *PlanUpdate {
	pu.mutation.ResetGoal()
	pu.mutation.SetGoal(i)
	return pu
}

// AddGoal adds i to the "goal" field.
func (pu *PlanUpdate) AddGoal(i int64) *PlanUpdate {
	pu.mutation.AddGoal(i)
	return pu
}

// SetStatus sets the "status" field.
func (pu *PlanUpdate) SetStatus(i int64) *PlanUpdate {
	pu.mutation.ResetStatus()
	pu.mutation.SetStatus(i)
	return pu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableStatus(i *int64) *PlanUpdate {
	if i != nil {
		pu.SetStatus(*i)
	}
	return pu
}

// AddStatus adds i to the "status" field.
func (pu *PlanUpdate) AddStatus(i int64) *PlanUpdate {
	pu.mutation.AddStatus(i)
	return pu
}

// SetProgess sets the "progess" field.
func (pu *PlanUpdate) SetProgess(s *schema.Progress) *PlanUpdate {
	pu.mutation.SetProgess(s)
	return pu
}

// ClearProgess clears the value of the "progess" field.
func (pu *PlanUpdate) ClearProgess() *PlanUpdate {
	pu.mutation.ClearProgess()
	return pu
}

// SetCreatedAt sets the "created_at" field.
func (pu *PlanUpdate) SetCreatedAt(t time.Time) *PlanUpdate {
	pu.mutation.SetCreatedAt(t)
	return pu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableCreatedAt(t *time.Time) *PlanUpdate {
	if t != nil {
		pu.SetCreatedAt(*t)
	}
	return pu
}

// SetName sets the "name" field.
func (pu *PlanUpdate) SetName(s string) *PlanUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNote sets the "note" field.
func (pu *PlanUpdate) SetNote(s string) *PlanUpdate {
	pu.mutation.SetNote(s)
	return pu
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableNote(s *string) *PlanUpdate {
	if s != nil {
		pu.SetNote(*s)
	}
	return pu
}

// ClearNote clears the value of the "note" field.
func (pu *PlanUpdate) ClearNote() *PlanUpdate {
	pu.mutation.ClearNote()
	return pu
}

// SetTimeZone sets the "time_zone" field.
func (pu *PlanUpdate) SetTimeZone(u uint32) *PlanUpdate {
	pu.mutation.ResetTimeZone()
	pu.mutation.SetTimeZone(u)
	return pu
}

// AddTimeZone adds u to the "time_zone" field.
func (pu *PlanUpdate) AddTimeZone(u int32) *PlanUpdate {
	pu.mutation.AddTimeZone(u)
	return pu
}

// Mutation returns the PlanMutation object of the builder.
func (pu *PlanUpdate) Mutation() *PlanMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PlanUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, PlanMutation](ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PlanUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PlanUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PlanUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pu *PlanUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PlanUpdate {
	pu.modifiers = append(pu.modifiers, modifiers...)
	return pu
}

func (pu *PlanUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(plan.Table, plan.Columns, sqlgraph.NewFieldSpec(plan.FieldID, field.TypeInt64))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UserID(); ok {
		_spec.SetField(plan.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedUserID(); ok {
		_spec.AddField(plan.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.Rule(); ok {
		_spec.SetField(plan.FieldRule, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedRule(); ok {
		_spec.AddField(plan.FieldRule, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.ActivityType(); ok {
		_spec.SetField(plan.FieldActivityType, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedActivityType(); ok {
		_spec.AddField(plan.FieldActivityType, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.StartTime(); ok {
		_spec.SetField(plan.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := pu.mutation.EndTime(); ok {
		_spec.SetField(plan.FieldEndTime, field.TypeTime, value)
	}
	if value, ok := pu.mutation.Total(); ok {
		_spec.SetField(plan.FieldTotal, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedTotal(); ok {
		_spec.AddField(plan.FieldTotal, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.Goal(); ok {
		_spec.SetField(plan.FieldGoal, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedGoal(); ok {
		_spec.AddField(plan.FieldGoal, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.Status(); ok {
		_spec.SetField(plan.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedStatus(); ok {
		_spec.AddField(plan.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.Progess(); ok {
		_spec.SetField(plan.FieldProgess, field.TypeJSON, value)
	}
	if pu.mutation.ProgessCleared() {
		_spec.ClearField(plan.FieldProgess, field.TypeJSON)
	}
	if value, ok := pu.mutation.CreatedAt(); ok {
		_spec.SetField(plan.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(plan.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Note(); ok {
		_spec.SetField(plan.FieldNote, field.TypeString, value)
	}
	if pu.mutation.NoteCleared() {
		_spec.ClearField(plan.FieldNote, field.TypeString)
	}
	if value, ok := pu.mutation.TimeZone(); ok {
		_spec.SetField(plan.FieldTimeZone, field.TypeUint32, value)
	}
	if value, ok := pu.mutation.AddedTimeZone(); ok {
		_spec.AddField(plan.FieldTimeZone, field.TypeUint32, value)
	}
	_spec.AddModifiers(pu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{plan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PlanUpdateOne is the builder for updating a single Plan entity.
type PlanUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PlanMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUserID sets the "user_id" field.
func (puo *PlanUpdateOne) SetUserID(i int64) *PlanUpdateOne {
	puo.mutation.ResetUserID()
	puo.mutation.SetUserID(i)
	return puo
}

// AddUserID adds i to the "user_id" field.
func (puo *PlanUpdateOne) AddUserID(i int64) *PlanUpdateOne {
	puo.mutation.AddUserID(i)
	return puo
}

// SetRule sets the "rule" field.
func (puo *PlanUpdateOne) SetRule(i int64) *PlanUpdateOne {
	puo.mutation.ResetRule()
	puo.mutation.SetRule(i)
	return puo
}

// SetNillableRule sets the "rule" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableRule(i *int64) *PlanUpdateOne {
	if i != nil {
		puo.SetRule(*i)
	}
	return puo
}

// AddRule adds i to the "rule" field.
func (puo *PlanUpdateOne) AddRule(i int64) *PlanUpdateOne {
	puo.mutation.AddRule(i)
	return puo
}

// SetActivityType sets the "activity_type" field.
func (puo *PlanUpdateOne) SetActivityType(i int64) *PlanUpdateOne {
	puo.mutation.ResetActivityType()
	puo.mutation.SetActivityType(i)
	return puo
}

// SetNillableActivityType sets the "activity_type" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableActivityType(i *int64) *PlanUpdateOne {
	if i != nil {
		puo.SetActivityType(*i)
	}
	return puo
}

// AddActivityType adds i to the "activity_type" field.
func (puo *PlanUpdateOne) AddActivityType(i int64) *PlanUpdateOne {
	puo.mutation.AddActivityType(i)
	return puo
}

// SetStartTime sets the "start_time" field.
func (puo *PlanUpdateOne) SetStartTime(t time.Time) *PlanUpdateOne {
	puo.mutation.SetStartTime(t)
	return puo
}

// SetEndTime sets the "end_time" field.
func (puo *PlanUpdateOne) SetEndTime(t time.Time) *PlanUpdateOne {
	puo.mutation.SetEndTime(t)
	return puo
}

// SetTotal sets the "total" field.
func (puo *PlanUpdateOne) SetTotal(i int64) *PlanUpdateOne {
	puo.mutation.ResetTotal()
	puo.mutation.SetTotal(i)
	return puo
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableTotal(i *int64) *PlanUpdateOne {
	if i != nil {
		puo.SetTotal(*i)
	}
	return puo
}

// AddTotal adds i to the "total" field.
func (puo *PlanUpdateOne) AddTotal(i int64) *PlanUpdateOne {
	puo.mutation.AddTotal(i)
	return puo
}

// SetGoal sets the "goal" field.
func (puo *PlanUpdateOne) SetGoal(i int64) *PlanUpdateOne {
	puo.mutation.ResetGoal()
	puo.mutation.SetGoal(i)
	return puo
}

// AddGoal adds i to the "goal" field.
func (puo *PlanUpdateOne) AddGoal(i int64) *PlanUpdateOne {
	puo.mutation.AddGoal(i)
	return puo
}

// SetStatus sets the "status" field.
func (puo *PlanUpdateOne) SetStatus(i int64) *PlanUpdateOne {
	puo.mutation.ResetStatus()
	puo.mutation.SetStatus(i)
	return puo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableStatus(i *int64) *PlanUpdateOne {
	if i != nil {
		puo.SetStatus(*i)
	}
	return puo
}

// AddStatus adds i to the "status" field.
func (puo *PlanUpdateOne) AddStatus(i int64) *PlanUpdateOne {
	puo.mutation.AddStatus(i)
	return puo
}

// SetProgess sets the "progess" field.
func (puo *PlanUpdateOne) SetProgess(s *schema.Progress) *PlanUpdateOne {
	puo.mutation.SetProgess(s)
	return puo
}

// ClearProgess clears the value of the "progess" field.
func (puo *PlanUpdateOne) ClearProgess() *PlanUpdateOne {
	puo.mutation.ClearProgess()
	return puo
}

// SetCreatedAt sets the "created_at" field.
func (puo *PlanUpdateOne) SetCreatedAt(t time.Time) *PlanUpdateOne {
	puo.mutation.SetCreatedAt(t)
	return puo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableCreatedAt(t *time.Time) *PlanUpdateOne {
	if t != nil {
		puo.SetCreatedAt(*t)
	}
	return puo
}

// SetName sets the "name" field.
func (puo *PlanUpdateOne) SetName(s string) *PlanUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNote sets the "note" field.
func (puo *PlanUpdateOne) SetNote(s string) *PlanUpdateOne {
	puo.mutation.SetNote(s)
	return puo
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableNote(s *string) *PlanUpdateOne {
	if s != nil {
		puo.SetNote(*s)
	}
	return puo
}

// ClearNote clears the value of the "note" field.
func (puo *PlanUpdateOne) ClearNote() *PlanUpdateOne {
	puo.mutation.ClearNote()
	return puo
}

// SetTimeZone sets the "time_zone" field.
func (puo *PlanUpdateOne) SetTimeZone(u uint32) *PlanUpdateOne {
	puo.mutation.ResetTimeZone()
	puo.mutation.SetTimeZone(u)
	return puo
}

// AddTimeZone adds u to the "time_zone" field.
func (puo *PlanUpdateOne) AddTimeZone(u int32) *PlanUpdateOne {
	puo.mutation.AddTimeZone(u)
	return puo
}

// Mutation returns the PlanMutation object of the builder.
func (puo *PlanUpdateOne) Mutation() *PlanMutation {
	return puo.mutation
}

// Where appends a list predicates to the PlanUpdate builder.
func (puo *PlanUpdateOne) Where(ps ...predicate.Plan) *PlanUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PlanUpdateOne) Select(field string, fields ...string) *PlanUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Plan entity.
func (puo *PlanUpdateOne) Save(ctx context.Context) (*Plan, error) {
	return withHooks[*Plan, PlanMutation](ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PlanUpdateOne) SaveX(ctx context.Context) *Plan {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PlanUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PlanUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (puo *PlanUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PlanUpdateOne {
	puo.modifiers = append(puo.modifiers, modifiers...)
	return puo
}

func (puo *PlanUpdateOne) sqlSave(ctx context.Context) (_node *Plan, err error) {
	_spec := sqlgraph.NewUpdateSpec(plan.Table, plan.Columns, sqlgraph.NewFieldSpec(plan.FieldID, field.TypeInt64))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Plan.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, plan.FieldID)
		for _, f := range fields {
			if !plan.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != plan.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UserID(); ok {
		_spec.SetField(plan.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedUserID(); ok {
		_spec.AddField(plan.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.Rule(); ok {
		_spec.SetField(plan.FieldRule, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedRule(); ok {
		_spec.AddField(plan.FieldRule, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.ActivityType(); ok {
		_spec.SetField(plan.FieldActivityType, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedActivityType(); ok {
		_spec.AddField(plan.FieldActivityType, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.StartTime(); ok {
		_spec.SetField(plan.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := puo.mutation.EndTime(); ok {
		_spec.SetField(plan.FieldEndTime, field.TypeTime, value)
	}
	if value, ok := puo.mutation.Total(); ok {
		_spec.SetField(plan.FieldTotal, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedTotal(); ok {
		_spec.AddField(plan.FieldTotal, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.Goal(); ok {
		_spec.SetField(plan.FieldGoal, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedGoal(); ok {
		_spec.AddField(plan.FieldGoal, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.Status(); ok {
		_spec.SetField(plan.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedStatus(); ok {
		_spec.AddField(plan.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.Progess(); ok {
		_spec.SetField(plan.FieldProgess, field.TypeJSON, value)
	}
	if puo.mutation.ProgessCleared() {
		_spec.ClearField(plan.FieldProgess, field.TypeJSON)
	}
	if value, ok := puo.mutation.CreatedAt(); ok {
		_spec.SetField(plan.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(plan.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Note(); ok {
		_spec.SetField(plan.FieldNote, field.TypeString, value)
	}
	if puo.mutation.NoteCleared() {
		_spec.ClearField(plan.FieldNote, field.TypeString)
	}
	if value, ok := puo.mutation.TimeZone(); ok {
		_spec.SetField(plan.FieldTimeZone, field.TypeUint32, value)
	}
	if value, ok := puo.mutation.AddedTimeZone(); ok {
		_spec.AddField(plan.FieldTimeZone, field.TypeUint32, value)
	}
	_spec.AddModifiers(puo.modifiers...)
	_node = &Plan{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{plan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
