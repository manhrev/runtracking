{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState } from \"react\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Button, IconButton, Text, TextInput } from \"react-native-paper\";\nimport { loginThunk } from \"../../redux/features/user/thunk\";\nimport { checkIfExistOrSaveExpoPushTokenThunk } from \"../../redux/features/notification/thunk\";\nimport { useAppDispatch } from \"../../redux/store\";\nimport { useAppTheme } from \"../../theme\";\nimport { baseStyles } from \"../baseStyle\";\nimport * as Device from 'expo-device';\nimport * as Notifications from 'expo-notifications';\nimport { ExpoPushTokenRequest } from \"../../lib/notification/notification_pb\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { EXPO_PUSH_TOKEN } from \"../../utils/grpc\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function Login(_ref) {\n  var navigation = _ref.navigation,\n    route = _ref.route;\n  var theme = useAppTheme();\n  var dispatch = useAppDispatch();\n  var _useState = useState(\"\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    username = _useState2[0],\n    setUsername = _useState2[1];\n  var _useState3 = useState(\"\"),\n    _useState4 = _slicedToArray(_useState3, 2),\n    password = _useState4[0],\n    setPassword = _useState4[1];\n  var handleLogin = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      var _yield$dispatch$unwra = yield dispatch(loginThunk({\n          password: password,\n          userName: username\n        })).unwrap(),\n        response = _yield$dispatch$unwra.response,\n        error = _yield$dispatch$unwra.error;\n      if (error) {\n        alert(\"Cannot login, please try again\");\n      } else {\n        alert(\"Logged in!\");\n        var expoPushToken = yield registerForPushNotificationsAsync();\n        var req = new ExpoPushTokenRequest();\n        if (expoPushToken != undefined) {\n          req.setExpoPushToken(expoPushToken);\n          yield AsyncStorage.setItem(EXPO_PUSH_TOKEN, expoPushToken);\n        }\n        if (response != null && response.userId != undefined) req.setUserId(response.userId);\n        yield dispatch(checkIfExistOrSaveExpoPushTokenThunk(req.toObject())).unwrap();\n      }\n    });\n    return function handleLogin() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return _jsx(View, {\n    style: baseStyles(theme).homeContainer,\n    children: _jsxs(View, {\n      style: baseStyles(theme).innerWrapper,\n      children: [_jsxs(View, {\n        style: {\n          paddingVertical: 20,\n          display: \"flex\",\n          flexDirection: \"row\"\n        },\n        children: [_jsx(View, {\n          style: {\n            flex: 1\n          },\n          children: _jsx(IconButton, {\n            icon: \"arrow-left\",\n            size: 24,\n            onPress: function onPress() {\n              return navigation.goBack();\n            },\n            style: {\n              position: \"relative\"\n            }\n          })\n        }), _jsx(View, {\n          style: {\n            flex: 1,\n            alignItems: \"center\"\n          },\n          children: _jsx(Text, {\n            variant: \"displaySmall\",\n            style: {\n              fontWeight: \"bold\",\n              alignSelf: \"center\"\n            },\n            children: \"Login\"\n          })\n        }), _jsx(View, {\n          style: {\n            flex: 1\n          }\n        })]\n      }), _jsx(View, {\n        style: {\n          display: \"flex\",\n          alignItems: \"center\",\n          marginTop: 20\n        },\n        children: _jsx(Image, {\n          style: {\n            width: 150,\n            height: 150,\n            borderWidth: 1,\n            borderColor: \"blue\",\n            borderRadius: 25\n          },\n          source: require(\"./../../../assets/Banners/signup_banner.jpg\")\n        })\n      }), _jsxs(View, {\n        style: {\n          marginTop: 40\n        },\n        children: [_jsx(TextInput, {\n          mode: \"outlined\",\n          label: \"Username\",\n          value: username,\n          onChangeText: function onChangeText(text) {\n            return setUsername(text);\n          },\n          selectionColor: theme.colors.backdrop,\n          style: styles(theme).inputStyle\n        }), _jsx(TextInput, {\n          secureTextEntry: true,\n          mode: \"outlined\",\n          label: \"Password\",\n          value: password,\n          onChangeText: function onChangeText(text) {\n            return setPassword(text);\n          },\n          selectionColor: theme.colors.backdrop,\n          style: styles(theme).inputStyle\n        })]\n      }), _jsx(Button, {\n        mode: \"contained\",\n        onPress: handleLogin,\n        style: {\n          marginTop: 30,\n          marginBottom: 5,\n          borderRadius: 50\n        },\n        contentStyle: {\n          paddingVertical: 5,\n          borderRadius: 100\n        },\n        children: _jsx(Text, {\n          variant: \"titleMedium\",\n          style: {\n            color: theme.colors.onPrimary,\n            fontWeight: \"bold\"\n          },\n          children: \"Login\"\n        })\n      }), _jsx(Button, {\n        mode: \"text\",\n        onPress: function onPress() {},\n        children: \"Forgot your password?\"\n      })]\n    })\n  });\n}\nvar styles = function styles(theme) {\n  return StyleSheet.create({\n    inputStyle: {\n      marginBottom: 10\n    }\n  });\n};\nfunction registerForPushNotificationsAsync() {\n  return _registerForPushNotificationsAsync.apply(this, arguments);\n}\nfunction _registerForPushNotificationsAsync() {\n  _registerForPushNotificationsAsync = _asyncToGenerator(function* () {\n    var token;\n    if (Platform.OS === 'android') {\n      yield Notifications.setNotificationChannelAsync('default', {\n        name: 'default',\n        importance: Notifications.AndroidImportance.MAX,\n        vibrationPattern: [0, 250, 250, 250],\n        lightColor: '#FF231F7C'\n      });\n    }\n    if (Device.isDevice) {\n      var _yield$Notifications$ = yield Notifications.getPermissionsAsync(),\n        existingStatus = _yield$Notifications$.status;\n      var finalStatus = existingStatus;\n      if (existingStatus !== 'granted') {\n        var _yield$Notifications$2 = yield Notifications.requestPermissionsAsync(),\n          status = _yield$Notifications$2.status;\n        finalStatus = status;\n      }\n      if (finalStatus !== 'granted') {\n        alert('Failed to get push token for push notification!');\n        return;\n      }\n      token = (yield Notifications.getExpoPushTokenAsync()).data;\n      console.log(token);\n    } else {\n      alert('Must use physical device for Push Notifications');\n    }\n    return token;\n  });\n  return _registerForPushNotificationsAsync.apply(this, arguments);\n}","map":{"version":3,"names":["useState","Button","IconButton","Text","TextInput","loginThunk","checkIfExistOrSaveExpoPushTokenThunk","useAppDispatch","useAppTheme","baseStyles","Device","Notifications","ExpoPushTokenRequest","AsyncStorage","EXPO_PUSH_TOKEN","Login","navigation","route","theme","dispatch","username","setUsername","password","setPassword","handleLogin","userName","unwrap","response","error","alert","expoPushToken","registerForPushNotificationsAsync","req","undefined","setExpoPushToken","setItem","userId","setUserId","toObject","homeContainer","innerWrapper","paddingVertical","display","flexDirection","flex","goBack","position","alignItems","fontWeight","alignSelf","marginTop","width","height","borderWidth","borderColor","borderRadius","require","text","colors","backdrop","styles","inputStyle","marginBottom","color","onPrimary","StyleSheet","create","token","Platform","OS","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor","isDevice","getPermissionsAsync","existingStatus","status","finalStatus","requestPermissionsAsync","getExpoPushTokenAsync","data","console","log"],"sources":["/home/ngoalong/PhuMinh/HK221/dacn/curent/runtracking/frontend/src/screens/Authentication/Login.tsx"],"sourcesContent":["import { NativeStackScreenProps } from \"@react-navigation/native-stack\";\nimport { useState } from \"react\";\nimport { Image, StyleSheet, View } from \"react-native\";\nimport { Button, IconButton, Text, TextInput } from \"react-native-paper\";\nimport { RootBaseStackParamList } from \"../../navigators/BaseStack\";\nimport { loginThunk } from \"../../redux/features/user/thunk\";\nimport { checkIfExistOrSaveExpoPushTokenThunk } from \"../../redux/features/notification/thunk\";\nimport { useAppDispatch } from \"../../redux/store\";\nimport { AppTheme, useAppTheme } from \"../../theme\";\nimport { baseStyles } from \"../baseStyle\";\nimport { notificationClient } from \"../../utils/grpc\";\nimport * as Device from 'expo-device';\nimport * as Notifications from 'expo-notifications';\nimport { ExpoPushTokenRequest } from \"../../lib/notification/notification_pb\";\nimport { Platform } from \"react-native\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { EXPO_PUSH_TOKEN } from \"../../utils/grpc\";\nexport default function Login({\n  navigation,\n  route,\n}: NativeStackScreenProps<RootBaseStackParamList, \"Login\">) {\n  const theme = useAppTheme();\n  const dispatch = useAppDispatch();\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const handleLogin = async () => {\n    const {response, error } = await dispatch(\n      loginThunk({\n        password,\n        userName: username,\n      })\n    ).unwrap();\n\n    if (error) {\n      alert(\"Cannot login, please try again\");\n    } else {\n      alert(\"Logged in!\");\n      let expoPushToken = await registerForPushNotificationsAsync()\n      let req = new ExpoPushTokenRequest()\n      if(expoPushToken != undefined){\n        req.setExpoPushToken(expoPushToken)\n        await AsyncStorage.setItem(EXPO_PUSH_TOKEN, expoPushToken)\n      }\n      if(response != null && response.userId != undefined ) req.setUserId(response.userId)\n      await dispatch(\n        checkIfExistOrSaveExpoPushTokenThunk(req.toObject())\n      ).unwrap();\n    }\n  };\n  return (\n    <View style={baseStyles(theme).homeContainer}>\n      <View style={baseStyles(theme).innerWrapper}>\n        <View\n          style={{\n            paddingVertical: 20,\n            display: \"flex\",\n            flexDirection: \"row\",\n          }}\n        >\n          <View style={{ flex: 1 }}>\n            <IconButton\n              icon=\"arrow-left\"\n              size={24}\n              onPress={() => navigation.goBack()}\n              style={{ position: \"relative\" }}\n            />\n          </View>\n          <View style={{ flex: 1, alignItems: \"center\" }}>\n            <Text\n              variant=\"displaySmall\"\n              style={{ fontWeight: \"bold\", alignSelf: \"center\" }}\n            >\n              Login\n            </Text>\n          </View>\n          <View style={{ flex: 1 }}></View>\n        </View>\n        <View style={{ display: \"flex\", alignItems: \"center\", marginTop: 20 }}>\n          <Image\n            style={{\n              width: 150,\n              height: 150,\n              borderWidth: 1,\n              borderColor: \"blue\",\n              borderRadius: 25,\n            }}\n            source={require(\"./../../../assets/Banners/signup_banner.jpg\")}\n          />\n        </View>\n        <View style={{ marginTop: 40 }}>\n          <TextInput\n            mode=\"outlined\"\n            label=\"Username\"\n            value={username}\n            onChangeText={(text) => setUsername(text)}\n            selectionColor={theme.colors.backdrop}\n            style={styles(theme).inputStyle}\n          />\n          <TextInput\n            secureTextEntry={true}\n            mode=\"outlined\"\n            label=\"Password\"\n            value={password}\n            onChangeText={(text) => setPassword(text)}\n            selectionColor={theme.colors.backdrop}\n            style={styles(theme).inputStyle}\n          />\n        </View>\n        <Button\n          mode=\"contained\"\n          onPress={handleLogin}\n          style={{\n            marginTop: 30,\n            marginBottom: 5,\n            borderRadius: 50,\n          }}\n          contentStyle={{ paddingVertical: 5, borderRadius: 100 }}\n        >\n          <Text\n            variant=\"titleMedium\"\n            style={{ color: theme.colors.onPrimary, fontWeight: \"bold\" }}\n          >\n            Login\n          </Text>\n        </Button>\n        <Button mode=\"text\" onPress={() => {}}>\n          Forgot your password?\n        </Button>\n      </View>\n    </View>\n  );\n}\n\nconst styles = (theme: AppTheme) =>\n  StyleSheet.create({\n    inputStyle: {\n      marginBottom: 10,\n    },\n  });\n  async function registerForPushNotificationsAsync() {\n    let token;\n  \n    if (Platform.OS === 'android') {\n      await Notifications.setNotificationChannelAsync('default', {\n        name: 'default',\n        importance: Notifications.AndroidImportance.MAX,\n        vibrationPattern: [0, 250, 250, 250],\n        lightColor: '#FF231F7C',\n      });\n    }\n  \n    if (Device.isDevice) {\n      const { status: existingStatus } = await Notifications.getPermissionsAsync();\n      let finalStatus = existingStatus;\n      if (existingStatus !== 'granted') {\n        const { status } = await Notifications.requestPermissionsAsync();\n        finalStatus = status;\n      }\n      if (finalStatus !== 'granted') {\n        alert('Failed to get push token for push notification!');\n        return;\n      }\n      token = (await Notifications.getExpoPushTokenAsync()).data;\n      console.log(token);\n    } else {\n      alert('Must use physical device for Push Notifications');\n    }\n  \n    return token;\n  }"],"mappings":"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"},"metadata":{},"sourceType":"module"}