{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { G, Rect, Svg, Text } from \"react-native-svg\";\nimport AbstractChart, { DEFAULT_X_LABELS_HEIGHT_PERCENTAGE } from \"./AbstractChart\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar StackedBarChart = function (_super) {\n  __extends(StackedBarChart, _super);\n  function StackedBarChart() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.getBarPercentage = function () {\n      var _a = _this.props.chartConfig.barPercentage,\n        barPercentage = _a === void 0 ? 1 : _a;\n      return barPercentage;\n    };\n    _this.getBarRadius = function (ret, x) {\n      return _this.props.chartConfig.barRadius && ret.length === x.length - 1 ? _this.props.chartConfig.barRadius : 0;\n    };\n    _this.renderBars = function (_a) {\n      var data = _a.data,\n        width = _a.width,\n        height = _a.height,\n        paddingTop = _a.paddingTop,\n        paddingRight = _a.paddingRight,\n        border = _a.border,\n        colors = _a.colors,\n        _b = _a.stackedBar,\n        stackedBar = _b === void 0 ? false : _b,\n        verticalLabelsHeightPercentage = _a.verticalLabelsHeightPercentage;\n      return data.map(function (x, i) {\n        var barWidth = 32 * _this.getBarPercentage();\n        var ret = [];\n        var h = 0;\n        var st = paddingTop;\n        var fac = 1;\n        if (stackedBar) {\n          fac = 0.7;\n        }\n        var sum = _this.props.percentile ? x.reduce(function (a, b) {\n          return a + b;\n        }, 0) : border;\n        var barsAreaHeight = height * verticalLabelsHeightPercentage;\n        for (var z = 0; z < x.length; z++) {\n          h = barsAreaHeight * (x[z] / sum);\n          var y = barsAreaHeight - h + st;\n          var xC = (paddingRight + i * (width - paddingRight) / data.length + barWidth / 2) * fac;\n          ret.push(_jsx(Rect, {\n            x: xC,\n            y: y,\n            rx: _this.getBarRadius(ret, x),\n            ry: _this.getBarRadius(ret, x),\n            width: barWidth,\n            height: h,\n            fill: colors[z]\n          }, Math.random()));\n          if (!_this.props.hideLegend) {\n            ret.push(_jsx(Text, _objectSpread(_objectSpread({\n              x: xC + 7 + barWidth / 2,\n              textAnchor: \"end\",\n              y: h > 15 ? y + 15 : y + 7\n            }, _this.getPropsForLabels()), {}, {\n              children: x[z]\n            }), Math.random()));\n          }\n          st -= h;\n        }\n        return ret;\n      });\n    };\n    _this.renderLegend = function (_a) {\n      var legend = _a.legend,\n        colors = _a.colors,\n        width = _a.width,\n        height = _a.height;\n      return legend.map(function (x, i) {\n        return _jsxs(G, {\n          children: [_jsx(Rect, {\n            width: \"16px\",\n            height: \"16px\",\n            fill: colors[i],\n            rx: 8,\n            ry: 8,\n            x: width * 0.71,\n            y: height * 0.7 - i * 50\n          }), _jsx(Text, _objectSpread(_objectSpread({\n            x: width * 0.78,\n            y: height * 0.76 - i * 50\n          }, _this.getPropsForLabels()), {}, {\n            children: x\n          }))]\n        }, Math.random());\n      });\n    };\n    return _this;\n  }\n  StackedBarChart.prototype.render = function () {\n    var paddingTop = 15;\n    var paddingRight = 50;\n    var barWidth = 32 * this.getBarPercentage();\n    var _a = this.props,\n      width = _a.width,\n      height = _a.height,\n      _b = _a.style,\n      style = _b === void 0 ? {} : _b,\n      data = _a.data,\n      _c = _a.withHorizontalLabels,\n      withHorizontalLabels = _c === void 0 ? true : _c,\n      _d = _a.withVerticalLabels,\n      withVerticalLabels = _d === void 0 ? true : _d,\n      _e = _a.segments,\n      segments = _e === void 0 ? 4 : _e,\n      decimalPlaces = _a.decimalPlaces,\n      _f = _a.percentile,\n      percentile = _f === void 0 ? false : _f,\n      _g = _a.verticalLabelsHeightPercentage,\n      verticalLabelsHeightPercentage = _g === void 0 ? DEFAULT_X_LABELS_HEIGHT_PERCENTAGE : _g,\n      _h = _a.formatYLabel,\n      formatYLabel = _h === void 0 ? function (yLabel) {\n        return yLabel;\n      } : _h,\n      _j = _a.hideLegend,\n      hideLegend = _j === void 0 ? false : _j;\n    var _k = style.borderRadius,\n      borderRadius = _k === void 0 ? 0 : _k;\n    var config = {\n      width: width,\n      height: height\n    };\n    var border = 0;\n    var max = 0;\n    for (var i = 0; i < data.data.length; i++) {\n      var actual = data.data[i].reduce(function (pv, cv) {\n        return pv + cv;\n      }, 0);\n      if (actual > max) {\n        max = actual;\n      }\n    }\n    if (percentile) {\n      border = 100;\n    } else {\n      border = max;\n    }\n    var showLegend = !hideLegend && data.legend && data.legend.length != 0;\n    var stackedBar = showLegend;\n    return _jsx(View, {\n      style: style,\n      children: _jsxs(Svg, {\n        height: height,\n        width: width,\n        children: [this.renderDefs(__assign(__assign({}, config), this.props.chartConfig)), _jsx(Rect, {\n          width: \"100%\",\n          height: height,\n          rx: borderRadius,\n          ry: borderRadius,\n          fill: \"url(#backgroundGradient)\"\n        }), _jsx(G, {\n          children: this.renderHorizontalLines(__assign(__assign({}, config), {\n            count: segments,\n            paddingTop: paddingTop,\n            verticalLabelsHeightPercentage: verticalLabelsHeightPercentage\n          }))\n        }), _jsx(G, {\n          children: withHorizontalLabels ? this.renderHorizontalLabels(__assign(__assign({}, config), {\n            count: segments,\n            data: [0, border],\n            paddingTop: paddingTop,\n            paddingRight: paddingRight,\n            decimalPlaces: decimalPlaces,\n            verticalLabelsHeightPercentage: verticalLabelsHeightPercentage,\n            formatYLabel: formatYLabel\n          })) : null\n        }), _jsx(G, {\n          children: withVerticalLabels ? this.renderVerticalLabels(__assign(__assign({}, config), {\n            labels: data.labels,\n            paddingRight: paddingRight + 28,\n            stackedBar: stackedBar,\n            paddingTop: paddingTop,\n            horizontalOffset: barWidth,\n            verticalLabelsHeightPercentage: verticalLabelsHeightPercentage\n          })) : null\n        }), _jsx(G, {\n          children: this.renderBars(__assign(__assign({}, config), {\n            data: data.data,\n            border: border,\n            colors: this.props.data.barColors,\n            paddingTop: paddingTop,\n            paddingRight: paddingRight + 20,\n            stackedBar: stackedBar,\n            verticalLabelsHeightPercentage: verticalLabelsHeightPercentage\n          }))\n        }), showLegend && this.renderLegend(__assign(__assign({}, config), {\n          legend: data.legend,\n          colors: this.props.data.barColors\n        }))]\n      })\n    });\n  };\n  return StackedBarChart;\n}(AbstractChart);\nexport default StackedBarChart;","map":{"version":3,"sources":["../src/StackedBarChart.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { View, ViewStyle } from \"react-native\";\nimport { G, Rect, Svg, Text } from \"react-native-svg\";\n\nimport AbstractChart, {\n  AbstractChartConfig,\n  AbstractChartProps,\n  DEFAULT_X_LABELS_HEIGHT_PERCENTAGE\n} from \"./AbstractChart\";\n\nexport interface StackedBarChartData {\n  labels: string[];\n  legend: string[];\n  data: number[][];\n  barColors: string[];\n}\n\nexport interface StackedBarChartProps extends AbstractChartProps {\n  /**\n   * E.g.\n   * ```javascript\n   * const data = {\n   *   labels: [\"Test1\", \"Test2\"],\n   *   legend: [\"L1\", \"L2\", \"L3\"],\n   *   data: [[60, 60, 60], [30, 30, 60]],\n   *   barColors: [\"#dfe4ea\", \"#ced6e0\", \"#a4b0be\"]\n   * };\n   * ```\n   */\n  data: StackedBarChartData;\n  width: number;\n  height: number;\n  chartConfig: AbstractChartConfig;\n  hideLegend: boolean;\n  style?: Partial<ViewStyle>;\n  barPercentage?: number;\n  decimalPlaces?: number;\n  /**\n   * Show vertical labels - default: True.\n   */\n  withVerticalLabels?: boolean;\n  /**\n   * Show horizontal labels - default: True.\n   */\n  withHorizontalLabels?: boolean;\n  /**\n   * The number of horizontal lines\n   */\n  segments?: number;\n\n  percentile?: boolean;\n\n  /**\n   * Percentage of the chart height, dedicated to vertical labels\n   * (space below chart)\n   */\n  verticalLabelsHeightPercentage?: number;\n\n  formatYLabel?: (yLabel: string) => string;\n}\n\ntype StackedBarChartState = {};\n\nclass StackedBarChart extends AbstractChart<\n  StackedBarChartProps,\n  StackedBarChartState\n> {\n  getBarPercentage = () => {\n    const { barPercentage = 1 } = this.props.chartConfig;\n    return barPercentage;\n  };\n\n  getBarRadius = (ret: string | any[], x: string | any[]) => {\n    return this.props.chartConfig.barRadius && ret.length === x.length - 1\n      ? this.props.chartConfig.barRadius\n      : 0;\n  };\n\n  renderBars = ({\n    data,\n    width,\n    height,\n    paddingTop,\n    paddingRight,\n    border,\n    colors,\n    stackedBar = false,\n    verticalLabelsHeightPercentage\n  }: Pick<\n    Omit<AbstractChartConfig, \"data\">,\n    | \"width\"\n    | \"height\"\n    | \"paddingRight\"\n    | \"paddingTop\"\n    | \"stackedBar\"\n    | \"verticalLabelsHeightPercentage\"\n  > & {\n    border: number;\n    colors: string[];\n    data: number[][];\n  }) =>\n    data.map((x, i) => {\n      const barWidth = 32 * this.getBarPercentage();\n      const ret = [];\n      let h = 0;\n      let st = paddingTop;\n\n      let fac = 1;\n      if (stackedBar) {\n        fac = 0.7;\n      }\n      const sum = this.props.percentile ? x.reduce((a, b) => a + b, 0) : border;\n      const barsAreaHeight = height * verticalLabelsHeightPercentage;\n      for (let z = 0; z < x.length; z++) {\n        h = barsAreaHeight * (x[z] / sum);\n        const y = barsAreaHeight - h + st;\n        const xC =\n          (paddingRight +\n            (i * (width - paddingRight)) / data.length +\n            barWidth / 2) *\n          fac;\n\n        ret.push(\n          <Rect\n            key={Math.random()}\n            x={xC}\n            y={y}\n            rx={this.getBarRadius(ret, x)}\n            ry={this.getBarRadius(ret, x)}\n            width={barWidth}\n            height={h}\n            fill={colors[z]}\n          />\n        );\n\n        if (!this.props.hideLegend) {\n          ret.push(\n            <Text\n              key={Math.random()}\n              x={xC + 7 + barWidth / 2}\n              textAnchor=\"end\"\n              y={h > 15 ? y + 15 : y + 7}\n              {...this.getPropsForLabels()}\n            >\n              {x[z]}\n            </Text>\n          );\n        }\n\n        st -= h;\n      }\n\n      return ret;\n    });\n\n  renderLegend = ({\n    legend,\n    colors,\n    width,\n    height\n  }: Pick<AbstractChartConfig, \"width\" | \"height\"> & {\n    legend: string[];\n    colors: string[];\n  }) =>\n    legend.map((x, i) => {\n      return (\n        <G key={Math.random()}>\n          <Rect\n            width=\"16px\"\n            height=\"16px\"\n            fill={colors[i]}\n            rx={8}\n            ry={8}\n            x={width * 0.71}\n            y={height * 0.7 - i * 50}\n          />\n          <Text\n            x={width * 0.78}\n            y={height * 0.76 - i * 50}\n            {...this.getPropsForLabels()}\n          >\n            {x}\n          </Text>\n        </G>\n      );\n    });\n\n  render() {\n    const paddingTop = 15;\n    const paddingRight = 50;\n    const barWidth = 32 * this.getBarPercentage();\n\n    const {\n      width,\n      height,\n      style = {},\n      data,\n      withHorizontalLabels = true,\n      withVerticalLabels = true,\n      segments = 4,\n      decimalPlaces,\n      percentile = false,\n      verticalLabelsHeightPercentage = DEFAULT_X_LABELS_HEIGHT_PERCENTAGE,\n      formatYLabel = (yLabel: string) => {\n        return yLabel;\n      },\n      hideLegend = false\n    } = this.props;\n\n    const { borderRadius = 0 } = style;\n    const config = {\n      width,\n      height\n    };\n\n    let border = 0;\n\n    let max = 0;\n    for (let i = 0; i < data.data.length; i++) {\n      const actual = data.data[i].reduce((pv, cv) => pv + cv, 0);\n      if (actual > max) {\n        max = actual;\n      }\n    }\n\n    if (percentile) {\n      border = 100;\n    } else {\n      border = max;\n    }\n\n    const showLegend = !hideLegend && data.legend && data.legend.length != 0;\n    const stackedBar = showLegend;\n\n    return (\n      <View style={style}>\n        <Svg height={height} width={width}>\n          {this.renderDefs({\n            ...config,\n            ...this.props.chartConfig\n          })}\n          <Rect\n            width=\"100%\"\n            height={height}\n            rx={borderRadius}\n            ry={borderRadius}\n            fill=\"url(#backgroundGradient)\"\n          />\n          <G>\n            {this.renderHorizontalLines({\n              ...config,\n              count: segments,\n              paddingTop,\n              verticalLabelsHeightPercentage\n            })}\n          </G>\n          <G>\n            {withHorizontalLabels\n              ? this.renderHorizontalLabels({\n                  ...config,\n                  count: segments,\n                  data: [0, border],\n                  paddingTop,\n                  paddingRight,\n                  decimalPlaces,\n                  verticalLabelsHeightPercentage,\n                  formatYLabel\n                })\n              : null}\n          </G>\n          <G>\n            {withVerticalLabels\n              ? this.renderVerticalLabels({\n                  ...config,\n                  labels: data.labels,\n                  paddingRight: paddingRight + 28,\n                  stackedBar,\n                  paddingTop,\n                  horizontalOffset: barWidth,\n                  verticalLabelsHeightPercentage\n                })\n              : null}\n          </G>\n          <G>\n            {this.renderBars({\n              ...config,\n              data: data.data,\n              border,\n              colors: this.props.data.barColors,\n              paddingTop,\n              paddingRight: paddingRight + 20,\n              stackedBar,\n              verticalLabelsHeightPercentage\n            })}\n          </G>\n          {showLegend &&\n            this.renderLegend({\n              ...config,\n              legend: data.legend,\n              colors: this.props.data.barColors\n            })}\n        </Svg>\n      </View>\n    );\n  }\n}\n\nexport default StackedBarChart;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}