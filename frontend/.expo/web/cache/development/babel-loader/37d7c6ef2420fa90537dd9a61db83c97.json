{"ast":null,"code":"var _manifest$debuggerHos, _manifest$debuggerHos2;\nimport rpcAuthClient from \"./client/auth\";\nimport Constants from \"expo-constants\";\nimport rpcActivityClient from \"./client/activity\";\nimport rpcNotificationClient from \"./client/notification\";\nexport * from \"./abstract/gRPCClient\";\nexport * from \"./abstract/types\";\nvar manifest = Constants.manifest;\nvar onAuthError = function onAuthError(error, serviceName) {};\nvar HOST = \"http://\" + (manifest == null ? void 0 : (_manifest$debuggerHos = manifest.debuggerHost) == null ? void 0 : (_manifest$debuggerHos2 = _manifest$debuggerHos.split(\":\").shift()) == null ? void 0 : _manifest$debuggerHos2.concat(\":8080\"));\nconsole.log(HOST);\nvar authConfig = {\n  hostname: HOST,\n  onError: onAuthError\n};\nvar activityConfig = {\n  hostname: HOST,\n  onError: onAuthError\n};\nvar notificationConfig = {\n  hostname: HOST,\n  onError: onAuthError\n};\nexport var activityClient = new rpcActivityClient(activityConfig);\nexport var authClient = new rpcAuthClient(authConfig);\nexport var notificationClient = new rpcNotificationClient(notificationConfig);","map":{"version":3,"names":["rpcAuthClient","Constants","rpcActivityClient","rpcNotificationClient","manifest","onAuthError","error","serviceName","HOST","debuggerHost","split","shift","concat","console","log","authConfig","hostname","onError","activityConfig","notificationConfig","activityClient","authClient","notificationClient"],"sources":["/home/ngoalong/PhuMinh/HK221/dacn/curent/runtracking/frontend/src/utils/grpc/index.ts"],"sourcesContent":["import { StatusCode as grpcStatusCode } from \"grpc-web\";\nimport rpcAuthClient from \"./client/auth\";\nimport { Code as AuthCode } from \"../../lib/auth/auth_code_pb\";\nimport Constants from \"expo-constants\";\nimport rpcActivityClient from \"./client/activity\";\nimport rpcNotificationClient from \"./client/notification\";\n\nexport * from \"./abstract/gRPCClient\";\nexport * from \"./abstract/types\";\n\nconst { manifest } = Constants;\n\nconst onAuthError = (error: any, serviceName: any) => {\n  // switch (error?.code) {\n  //   case grpcStatusCode.UNAUTHENTICATED:\n  //     onLogout(error.code);\n  //     break;\n  // }\n  // if (IGNORE_TOAST_CODES.includes(error?.code)) return;\n  // iToast.error({\n  //   title: i18n.t('Common::ERROR_TITLE'),\n  //   msg: i18n.t(`Error::${serviceName}.${error?.code}`),\n  // });\n  // error?.code && alert(error.code);\n};\n\nconst HOST = `http://${manifest?.debuggerHost\n  ?.split(\":\")\n  .shift()\n  ?.concat(\":8080\")}`;\n\nconsole.log(HOST);\n\nconst authConfig = {\n  hostname: HOST,\n  onError: onAuthError,\n};\n\nconst activityConfig = {\n  hostname: HOST,\n  onError: onAuthError,\n};\n\nconst notificationConfig = {\n  hostname: HOST,\n  onError: onAuthError,\n};\nexport const activityClient = new rpcActivityClient(activityConfig);\n\nexport const authClient = new rpcAuthClient(authConfig);\nexport const notificationClient = new rpcNotificationClient(notificationConfig);\n"],"mappings":";AACA,OAAOA,aAAa;AAEpB,OAAOC,SAAS,MAAM,gBAAgB;AACtC,OAAOC,iBAAiB;AACxB,OAAOC,qBAAqB;AAE5B;AACA;AAEA,IAAQC,QAAQ,GAAKH,SAAS,CAAtBG,QAAQ;AAEhB,IAAMC,WAAW,GAAG,SAAdA,WAAW,CAAIC,KAAU,EAAEC,WAAgB,EAAK,CAYtD,CAAC;AAED,IAAMC,IAAI,gBAAaJ,QAAQ,6CAARA,QAAQ,CAAEK,YAAY,+CAAtB,sBACnBC,KAAK,CAAC,GAAG,CAAC,CACXC,KAAK,EAAE,qBAFa,uBAGnBC,MAAM,CAAC,OAAO,CAAC,CAAE;AAErBC,OAAO,CAACC,GAAG,CAACN,IAAI,CAAC;AAEjB,IAAMO,UAAU,GAAG;EACjBC,QAAQ,EAAER,IAAI;EACdS,OAAO,EAAEZ;AACX,CAAC;AAED,IAAMa,cAAc,GAAG;EACrBF,QAAQ,EAAER,IAAI;EACdS,OAAO,EAAEZ;AACX,CAAC;AAED,IAAMc,kBAAkB,GAAG;EACzBH,QAAQ,EAAER,IAAI;EACdS,OAAO,EAAEZ;AACX,CAAC;AACD,OAAO,IAAMe,cAAc,GAAG,IAAIlB,iBAAiB,CAACgB,cAAc,CAAC;AAEnE,OAAO,IAAMG,UAAU,GAAG,IAAIrB,aAAa,CAACe,UAAU,CAAC;AACvD,OAAO,IAAMO,kBAAkB,GAAG,IAAInB,qBAAqB,CAACgB,kBAAkB,CAAC"},"metadata":{},"sourceType":"module"}