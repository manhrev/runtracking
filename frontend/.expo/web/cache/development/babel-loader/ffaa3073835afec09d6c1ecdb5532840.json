{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"name\", \"color\", \"size\", \"selectionColor\", \"onLayout\"],\n  _excluded2 = [\"state\", \"navigation\", \"descriptors\"],\n  _excluded3 = [\"onPress\", \"route\", \"accessibilityRole\", \"borderless\", \"centered\", \"rippleColor\", \"style\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { SafeAreaProviderCompat } from '@react-navigation/elements';\nimport { CommonActions, Link, useLinkBuilder, useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { BottomNavigation, DarkTheme, DefaultTheme, useTheme as usePaperTheme } from 'react-native-paper';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nvar MaterialCommunityIcons;\ntry {\n  MaterialCommunityIcons = require(\"@expo/vector-icons/MaterialCommunityIcons\").default;\n} catch (e) {\n  var isErrorLogged = false;\n  MaterialCommunityIcons = function MaterialCommunityIcons(_ref) {\n    var name = _ref.name,\n      color = _ref.color,\n      size = _ref.size,\n      _0 = _ref.selectionColor,\n      _1 = _ref.onLayout,\n      rest = _objectWithoutProperties(_ref, _excluded);\n    if (!isErrorLogged) {\n      if (!/(Cannot find module|Module not found|Cannot resolve module)/.test(e.message)) {\n        console.error(e);\n      }\n      console.warn(\"Tried to use the icon '\" + name + \"' in a component from '@react-navigation/material-bottom-tabs', but 'react-native-vector-icons/MaterialCommunityIcons' could not be loaded.\", \"To remove this warning, try installing 'react-native-vector-icons' or use another method to specify icon: https://reactnavigation.org/docs/material-bottom-tab-navigator/#tabbaricon.\");\n      isErrorLogged = true;\n    }\n    return React.createElement(Text, _extends({}, rest, {\n      style: [styles.icon, {\n        color: typeof color !== 'number' ? color : undefined,\n        fontSize: size\n      }]\n    }), \"\\u25A1\");\n  };\n}\nfunction MaterialBottomTabViewInner(_ref2) {\n  var state = _ref2.state,\n    navigation = _ref2.navigation,\n    descriptors = _ref2.descriptors,\n    rest = _objectWithoutProperties(_ref2, _excluded2);\n  var insets = useSafeAreaInsets();\n  var _useTheme = useTheme(),\n    dark = _useTheme.dark,\n    colors = _useTheme.colors;\n  var paperTheme = usePaperTheme();\n  var buildLink = useLinkBuilder();\n  var t = dark === paperTheme.dark ? paperTheme : dark ? DarkTheme : DefaultTheme;\n  var theme = React.useMemo(function () {\n    return _objectSpread(_objectSpread({}, t), {}, {\n      colors: _objectSpread(_objectSpread(_objectSpread({}, t.colors), colors), {}, {\n        surface: colors.card\n      })\n    });\n  }, [colors, t]);\n  return React.createElement(BottomNavigation, _extends({}, rest, {\n    theme: theme,\n    navigationState: state,\n    onIndexChange: function onIndexChange(index) {\n      return navigation.dispatch(_objectSpread(_objectSpread({}, CommonActions.navigate({\n        name: state.routes[index].name,\n        merge: true\n      })), {}, {\n        target: state.key\n      }));\n    },\n    renderScene: function renderScene(_ref3) {\n      var route = _ref3.route;\n      return descriptors[route.key].render();\n    },\n    renderTouchable: Platform.OS === 'web' ? function (_ref4) {\n      var _onPress = _ref4.onPress,\n        route = _ref4.route,\n        _0 = _ref4.accessibilityRole,\n        _1 = _ref4.borderless,\n        _2 = _ref4.centered,\n        _3 = _ref4.rippleColor,\n        style = _ref4.style,\n        rest = _objectWithoutProperties(_ref4, _excluded3);\n      return React.createElement(Link, _extends({}, rest, {\n        to: buildLink(route.name, route.params),\n        accessibilityRole: \"link\",\n        onPress: function onPress(e) {\n          if (!(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && (e.button == null || e.button === 0)) {\n            e.preventDefault();\n            _onPress === null || _onPress === void 0 ? void 0 : _onPress(e);\n          }\n        },\n        style: [styles.touchable, style]\n      }));\n    } : undefined,\n    renderIcon: function renderIcon(_ref5) {\n      var route = _ref5.route,\n        focused = _ref5.focused,\n        color = _ref5.color;\n      var options = descriptors[route.key].options;\n      if (typeof options.tabBarIcon === 'string') {\n        return React.createElement(MaterialCommunityIcons, {\n          name: options.tabBarIcon,\n          color: color,\n          size: 24,\n          style: styles.icon\n        });\n      }\n      if (typeof options.tabBarIcon === 'function') {\n        return options.tabBarIcon({\n          focused: focused,\n          color: color\n        });\n      }\n      return null;\n    },\n    getLabelText: function getLabelText(_ref6) {\n      var route = _ref6.route;\n      var options = descriptors[route.key].options;\n      return options.tabBarLabel !== undefined ? options.tabBarLabel : options.title !== undefined ? options.title : route.name;\n    },\n    getColor: function getColor(_ref7) {\n      var route = _ref7.route;\n      return descriptors[route.key].options.tabBarColor;\n    },\n    getBadge: function getBadge(_ref8) {\n      var route = _ref8.route;\n      return descriptors[route.key].options.tabBarBadge;\n    },\n    getAccessibilityLabel: function getAccessibilityLabel(_ref9) {\n      var route = _ref9.route;\n      return descriptors[route.key].options.tabBarAccessibilityLabel;\n    },\n    getTestID: function getTestID(_ref10) {\n      var route = _ref10.route;\n      return descriptors[route.key].options.tabBarTestID;\n    },\n    onTabPress: function onTabPress(_ref11) {\n      var route = _ref11.route,\n        preventDefault = _ref11.preventDefault;\n      var event = navigation.emit({\n        type: 'tabPress',\n        target: route.key,\n        canPreventDefault: true\n      });\n      if (event.defaultPrevented) {\n        preventDefault();\n      }\n    },\n    safeAreaInsets: insets\n  }));\n}\nexport default function MaterialBottomTabView(props) {\n  return React.createElement(SafeAreaProviderCompat, null, React.createElement(MaterialBottomTabViewInner, props));\n}\nvar styles = StyleSheet.create({\n  icon: {\n    backgroundColor: 'transparent'\n  },\n  touchable: {\n    display: 'flex',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["MaterialBottomTabView.tsx"],"names":["SafeAreaProviderCompat","CommonActions","Link","useLinkBuilder","useTheme","React","BottomNavigation","DarkTheme","DefaultTheme","usePaperTheme","useSafeAreaInsets","MaterialCommunityIcons","require","default","e","isErrorLogged","name","color","size","selectionColor","_0","onLayout","_1","rest","test","message","console","error","warn","styles","icon","undefined","fontSize","MaterialBottomTabViewInner","state","navigation","descriptors","insets","dark","colors","paperTheme","buildLink","t","theme","useMemo","surface","card","index","dispatch","navigate","routes","merge","target","key","route","render","OS","onPress","accessibilityRole","borderless","centered","_2","rippleColor","_3","style","params","metaKey","altKey","ctrlKey","shiftKey","button","preventDefault","touchable","focused","options","tabBarIcon","tabBarLabel","title","tabBarColor","tabBarBadge","tabBarAccessibilityLabel","tabBarTestID","event","emit","type","canPreventDefault","defaultPrevented","MaterialBottomTabView","props","create","backgroundColor","display","justifyContent"],"mappings":"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","sourcesContent":["import { SafeAreaProviderCompat } from '@react-navigation/elements';\nimport {\n  CommonActions,\n  Link,\n  ParamListBase,\n  Route,\n  TabNavigationState,\n  useLinkBuilder,\n  useTheme,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { Platform, StyleSheet, Text } from 'react-native';\nimport {\n  BottomNavigation,\n  DarkTheme,\n  DefaultTheme,\n  useTheme as usePaperTheme,\n} from 'react-native-paper';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\nimport type {\n  MaterialBottomTabDescriptorMap,\n  MaterialBottomTabNavigationConfig,\n  MaterialBottomTabNavigationHelpers,\n} from '../types';\n\ntype Props = MaterialBottomTabNavigationConfig & {\n  state: TabNavigationState<ParamListBase>;\n  navigation: MaterialBottomTabNavigationHelpers;\n  descriptors: MaterialBottomTabDescriptorMap;\n};\n\ntype Scene = { route: { key: string } };\n\n// Optionally require vector-icons referenced from react-native-paper:\n// https://github.com/callstack/react-native-paper/blob/4b26429c49053eaa4c3e0fae208639e01093fa87/src/components/MaterialCommunityIcon.tsx#L14\nlet MaterialCommunityIcons: React.ComponentType<\n  React.ComponentProps<\n    typeof import('react-native-vector-icons/MaterialCommunityIcons').default\n  >\n>;\n\ntry {\n  // Optionally require vector-icons\n  MaterialCommunityIcons =\n    require('react-native-vector-icons/MaterialCommunityIcons').default;\n} catch (e: any) {\n  let isErrorLogged = false;\n\n  // Fallback component for icons\n  MaterialCommunityIcons = ({\n    name,\n    color,\n    size,\n    selectionColor: _0,\n    onLayout: _1,\n    ...rest\n  }) => {\n    if (!isErrorLogged) {\n      if (\n        !/(Cannot find module|Module not found|Cannot resolve module)/.test(\n          e.message\n        )\n      ) {\n        console.error(e);\n      }\n\n      console.warn(\n        `Tried to use the icon '${name}' in a component from '@react-navigation/material-bottom-tabs', but 'react-native-vector-icons/MaterialCommunityIcons' could not be loaded.`,\n        `To remove this warning, try installing 'react-native-vector-icons' or use another method to specify icon: https://reactnavigation.org/docs/material-bottom-tab-navigator/#tabbaricon.`\n      );\n\n      isErrorLogged = true;\n    }\n\n    return (\n      <Text\n        {...rest}\n        style={[\n          styles.icon,\n          {\n            color: typeof color !== 'number' ? color : undefined,\n            fontSize: size,\n          },\n        ]}\n      >\n        □\n      </Text>\n    );\n  };\n}\n\nfunction MaterialBottomTabViewInner({\n  state,\n  navigation,\n  descriptors,\n  ...rest\n}: Props) {\n  const insets = useSafeAreaInsets();\n  const { dark, colors } = useTheme();\n  const paperTheme = usePaperTheme();\n\n  const buildLink = useLinkBuilder();\n\n  const t =\n    // If the theme from React Navigation and Paper match, then user the customized theme\n    // Otherwise fallback to the matching default theme from Paper\n    dark === paperTheme.dark ? paperTheme : dark ? DarkTheme : DefaultTheme;\n\n  const theme = React.useMemo(() => {\n    return {\n      ...t,\n      colors: {\n        ...t.colors,\n        ...colors,\n        surface: colors.card,\n      },\n    };\n  }, [colors, t]);\n\n  return (\n    <BottomNavigation\n      {...rest}\n      theme={theme}\n      navigationState={state}\n      onIndexChange={(index: number) =>\n        navigation.dispatch({\n          ...CommonActions.navigate({\n            name: state.routes[index].name,\n            merge: true,\n          }),\n          target: state.key,\n        })\n      }\n      renderScene={({ route }) => descriptors[route.key].render()}\n      renderTouchable={\n        Platform.OS === 'web'\n          ? ({\n              onPress,\n              route,\n              accessibilityRole: _0,\n              borderless: _1,\n              centered: _2,\n              rippleColor: _3,\n              style,\n              ...rest\n            }) => {\n              return (\n                <Link\n                  {...rest}\n                  // @ts-expect-error: to could be undefined, but it doesn't affect functionality\n                  to={buildLink(route.name, route.params)}\n                  accessibilityRole=\"link\"\n                  onPress={(e: any) => {\n                    if (\n                      !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n                      (e.button == null || e.button === 0) // ignore everything but left clicks\n                    ) {\n                      e.preventDefault();\n                      onPress?.(e);\n                    }\n                  }}\n                  style={[styles.touchable, style]}\n                />\n              );\n            }\n          : undefined\n      }\n      renderIcon={({ route, focused, color }) => {\n        const { options } = descriptors[route.key];\n\n        if (typeof options.tabBarIcon === 'string') {\n          return (\n            <MaterialCommunityIcons\n              name={options.tabBarIcon}\n              color={color}\n              size={24}\n              style={styles.icon}\n            />\n          );\n        }\n\n        if (typeof options.tabBarIcon === 'function') {\n          return options.tabBarIcon({ focused, color });\n        }\n\n        return null;\n      }}\n      getLabelText={({ route }: Scene) => {\n        const { options } = descriptors[route.key];\n\n        return options.tabBarLabel !== undefined\n          ? options.tabBarLabel\n          : options.title !== undefined\n          ? options.title\n          : (route as Route<string>).name;\n      }}\n      getColor={({ route }) => descriptors[route.key].options.tabBarColor}\n      getBadge={({ route }) => descriptors[route.key].options.tabBarBadge}\n      getAccessibilityLabel={({ route }) =>\n        descriptors[route.key].options.tabBarAccessibilityLabel\n      }\n      getTestID={({ route }) => descriptors[route.key].options.tabBarTestID}\n      onTabPress={({ route, preventDefault }) => {\n        const event = navigation.emit({\n          type: 'tabPress',\n          target: route.key,\n          canPreventDefault: true,\n        });\n\n        if (event.defaultPrevented) {\n          preventDefault();\n        }\n      }}\n      safeAreaInsets={insets}\n    />\n  );\n}\n\nexport default function MaterialBottomTabView(props: Props) {\n  return (\n    <SafeAreaProviderCompat>\n      <MaterialBottomTabViewInner {...props} />\n    </SafeAreaProviderCompat>\n  );\n}\n\nconst styles = StyleSheet.create({\n  icon: {\n    backgroundColor: 'transparent',\n  },\n  touchable: {\n    display: 'flex',\n    justifyContent: 'center',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}