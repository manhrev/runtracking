{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { EXPO_PUSH_TOKEN } from \"../../../utils/grpc\";\nimport { StatusEnum } from \"../../constant\";\nimport { checkIfExistOrSaveExpoPushTokenThunk, removeExpoPushTokenThunk, listMoreNotificationInfoThunk, listNotificationInfoThunk, deleteNotificationInfoThunk, updateNotificationInfoThunk, listLastNotificationInfoThunk } from \"./thunk\";\nexport var initialState = {\n  notificationList: [],\n  status: StatusEnum.LOADING,\n  total: 0\n};\nvar slice = createSlice({\n  name: \"notification\",\n  initialState: initialState,\n  reducers: {},\n  extraReducers: function extraReducers(builder) {\n    builder.addCase(checkIfExistOrSaveExpoPushTokenThunk.pending, function (state) {\n      state.status = StatusEnum.LOADING;\n    });\n    builder.addCase(checkIfExistOrSaveExpoPushTokenThunk.fulfilled, function (state, _ref) {\n      var payload = _ref.payload;\n      var response = payload.response,\n        error = payload.error;\n      if (error) {\n        state.status = StatusEnum.SUCCEEDED;\n        return;\n      }\n    });\n    builder.addCase(removeExpoPushTokenThunk.fulfilled, function (state, _ref2) {\n      var payload = _ref2.payload;\n      AsyncStorage.removeItem(EXPO_PUSH_TOKEN);\n      return;\n    });\n    builder.addCase(listNotificationInfoThunk.pending, function (state) {\n      state.status = StatusEnum.LOADING;\n    });\n    builder.addCase(listMoreNotificationInfoThunk.pending, function (state) {\n      state.status = StatusEnum.LOADING;\n    });\n    builder.addCase(listNotificationInfoThunk.fulfilled, function (state, _ref3) {\n      var payload = _ref3.payload;\n      state.status = StatusEnum.LOADING;\n      var response = payload.response,\n        error = payload.error;\n      if (error) return;\n      state.status = StatusEnum.SUCCEEDED;\n      state.notificationList = (response == null ? void 0 : response.notificationListList) || [];\n      state.total = (response == null ? void 0 : response.total) || 0;\n    });\n    builder.addCase(listMoreNotificationInfoThunk.fulfilled, function (state, _ref4) {\n      var payload = _ref4.payload;\n      state.status = StatusEnum.LOADING;\n      var response = payload.response,\n        error = payload.error;\n      if (error) return;\n      state.status = StatusEnum.SUCCEEDED;\n      state.notificationList = state.notificationList.concat((response == null ? void 0 : response.notificationListList) || []);\n      state.total += (response == null ? void 0 : response.total) || 0;\n    });\n    builder.addCase(deleteNotificationInfoThunk.pending, function (state) {\n      state.status = StatusEnum.LOADING;\n    });\n    builder.addCase(deleteNotificationInfoThunk.fulfilled, function (state, _ref5) {\n      var payload = _ref5.payload;\n      state.status = StatusEnum.LOADING;\n      var response = payload.response,\n        error = payload.error;\n      if (error) return;\n      state.status = StatusEnum.SUCCEEDED;\n      state.notificationList = state.notificationList.filter(function (noti) {\n        return noti.id != (response == null ? void 0 : response.id);\n      });\n      state.total -= 1;\n    });\n    builder.addCase(updateNotificationInfoThunk.pending, function (state) {\n      state.status = StatusEnum.LOADING;\n    });\n    builder.addCase(updateNotificationInfoThunk.fulfilled, function (state, _ref6) {\n      var payload = _ref6.payload;\n      state.status = StatusEnum.LOADING;\n      var response = payload.response,\n        error = payload.error;\n      if (error) return;\n      state.status = StatusEnum.SUCCEEDED;\n      state.notificationList.forEach(function (noti) {\n        return noti.isSeen = noti.id == (response == null ? void 0 : response.idUpdated) ? true : noti.isSeen;\n      });\n    });\n    builder.addCase(listLastNotificationInfoThunk.pending, function (state) {\n      state.status = StatusEnum.LOADING;\n    });\n    builder.addCase(listLastNotificationInfoThunk.fulfilled, function (state, _ref7) {\n      var payload = _ref7.payload;\n      state.status = StatusEnum.LOADING;\n      var response = payload.response,\n        error = payload.error;\n      if (error) return;\n      state.status = StatusEnum.SUCCEEDED;\n      if (response && response.notificationListList) {\n        var _state$notificationLi;\n        (_state$notificationLi = state.notificationList).unshift.apply(_state$notificationLi, _toConsumableArray(response.notificationListList.reverse()));\n      }\n    });\n  }\n});\nexport var selectNotificationList = function selectNotificationList(state) {\n  return state.notificationList;\n};\nexport var isNotificationListLoading = function isNotificationListLoading(state) {\n  return state.notificationList.status === StatusEnum.LOADING;\n};\nexport default slice.reducer;","map":{"version":3,"names":["AsyncStorage","createSlice","EXPO_PUSH_TOKEN","StatusEnum","checkIfExistOrSaveExpoPushTokenThunk","removeExpoPushTokenThunk","listMoreNotificationInfoThunk","listNotificationInfoThunk","deleteNotificationInfoThunk","updateNotificationInfoThunk","listLastNotificationInfoThunk","initialState","notificationList","status","LOADING","total","slice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","payload","response","error","SUCCEEDED","removeItem","notificationListList","concat","filter","noti","id","forEach","isSeen","idUpdated","unshift","reverse","selectNotificationList","isNotificationListLoading","reducer"],"sources":["/home/ngoalong/PhuMinh/HK221/dacn/curent/runtracking/frontend/src/redux/features/notification/slice.ts"],"sourcesContent":["import AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { EXPO_PUSH_TOKEN, KEY_ACCESS_TOKEN } from \"../../../utils/grpc\";\nimport { CommonState } from \"../../common/types\";\nimport { StatusEnum } from \"../../constant\";\nimport { RootState } from \"../../reducers\";\nimport { NotificationInfo, UpdateNotificationInfoRequest } from \"../../../lib/notification/notification_pb\";\nimport { checkIfExistOrSaveExpoPushTokenThunk,\n          removeExpoPushTokenThunk,\n          listMoreNotificationInfoThunk,\n        listNotificationInfoThunk, \n        deleteNotificationInfoThunk,\n        updateNotificationInfoThunk,\n        listLastNotificationInfoThunk} from \"./thunk\";\n\ntype NotificationState = {\n  notificationList: Array<NotificationInfo.AsObject>;\n  total: number\n} & CommonState;\n\nexport const initialState: NotificationState = {\n  notificationList: [],\n  status: StatusEnum.LOADING,\n  total: 0,\n};\n\nconst slice = createSlice({\n  name: \"notification\",\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(checkIfExistOrSaveExpoPushTokenThunk.pending, (state) => {\n      state.status = StatusEnum.LOADING;\n    });\n    builder.addCase(checkIfExistOrSaveExpoPushTokenThunk.fulfilled, (state, { payload }) => {\n      const { response, error } = payload;\n      if (error) {\n        state.status = StatusEnum.SUCCEEDED;\n        return;\n      }\n    });\n    builder.addCase(removeExpoPushTokenThunk.fulfilled, (state, { payload }) => {\n      AsyncStorage.removeItem(EXPO_PUSH_TOKEN);\n      return;\n    });\n\n    builder.addCase(listNotificationInfoThunk.pending, (state) => {\n        state.status = StatusEnum.LOADING;\n    });\n    builder.addCase(listMoreNotificationInfoThunk.pending, (state) => {\n      state.status = StatusEnum.LOADING;\n    });\n\n    builder.addCase(listNotificationInfoThunk.fulfilled, (state, {payload}) => {\n      state.status = StatusEnum.LOADING;\n      const { response, error } = payload;\n      if (error) return;\n      state.status = StatusEnum.SUCCEEDED;\n      state.notificationList= response?.notificationListList || [];\n      state.total = response?.total || 0;\n  });\n\n  builder.addCase(listMoreNotificationInfoThunk.fulfilled, (state, {payload}) => {\n    state.status = StatusEnum.LOADING;\n    const { response, error } = payload;\n    if (error) return;\n    state.status = StatusEnum.SUCCEEDED;\n    state.notificationList= state.notificationList.concat(\n                         response?.notificationListList || []);\n    state.total += response?.total || 0;\n});\n\n  builder.addCase(deleteNotificationInfoThunk.pending, (state) => {\n      state.status = StatusEnum.LOADING;\n  });\n\n  builder.addCase(deleteNotificationInfoThunk.fulfilled, (state, {payload}) => {\n    state.status = StatusEnum.LOADING;\n\n    const { response, error } = payload;\n    if (error) return;\n    state.status = StatusEnum.SUCCEEDED;\n\n    state.notificationList = state.notificationList.\n                                filter(noti => noti.id != response?.id)\n    state.total -=1 \n})\n\n  builder.addCase(updateNotificationInfoThunk.pending, (state) => {\n    state.status = StatusEnum.LOADING;\n  });\n\n  builder.addCase(updateNotificationInfoThunk.fulfilled, (state, {payload}) => {\n    state.status = StatusEnum.LOADING;\n\n    const { response, error } = payload;\n    if (error) return;\n    state.status = StatusEnum.SUCCEEDED;\n\n    state.notificationList.forEach(noti => noti.isSeen =  (noti.id == response?.idUpdated) ? true : noti.isSeen)\n})\n\n  builder.addCase(listLastNotificationInfoThunk.pending, (state) => {\n    state.status = StatusEnum.LOADING;\n  });\n\n  builder.addCase(listLastNotificationInfoThunk.fulfilled, (state, {payload}) => {\n    state.status = StatusEnum.LOADING;\n    const { response, error } = payload;\n    if (error) return;\n    state.status = StatusEnum.SUCCEEDED\n    if(response && response.notificationListList){\n      state.notificationList.unshift(...response.notificationListList.reverse())\n    }\n  });\n  \n  },\n});\n\nexport const selectNotificationList = (state: RootState) => state.notificationList\nexport const isNotificationListLoading = (state: RootState) =>\n  state.notificationList.status === StatusEnum.LOADING;\n\nexport default slice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}