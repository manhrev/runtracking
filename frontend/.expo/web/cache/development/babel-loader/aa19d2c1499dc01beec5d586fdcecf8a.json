{"ast":null,"code":"import { useDispatch, useSelector } from \"react-redux\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport rootReducer from \"./reducers\";\nvar store = configureStore({\n  reducer: rootReducer,\n  middleware: function middleware(getDefaultMiddleware) {\n    return getDefaultMiddleware({\n      serializableCheck: false\n    });\n  }\n});\nexport var useAppDispatch = function useAppDispatch() {\n  return useDispatch();\n};\nexport var useAppSelector = useSelector;\nexport default store;","map":{"version":3,"names":["useDispatch","useSelector","configureStore","rootReducer","store","reducer","middleware","getDefaultMiddleware","serializableCheck","useAppDispatch","useAppSelector"],"sources":["/home/ngoalong/PhuMinh/HK221/dacn/curent/runtracking/frontend/src/redux/store.ts"],"sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { configureStore, Action } from \"@reduxjs/toolkit\";\n\nimport rootReducer, { RootState } from \"./reducers\";\n\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: false,\n    }),\n});\n\nexport type AppDispatch = typeof store.dispatch;\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\n\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n\nexport type AppThunk = ThunkAction<void, RootState, null, Action<string>>;\n\nexport default store;\n"],"mappings":"AAAA,SAA+BA,WAAW,EAAEC,WAAW,QAAQ,aAAa;AAE5E,SAASC,cAAc,QAAgB,kBAAkB;AAEzD,OAAOC,WAAW;AAElB,IAAMC,KAAK,GAAGF,cAAc,CAAC;EAC3BG,OAAO,EAAEF,WAAW;EACpBG,UAAU,EAAE,oBAACC,oBAAoB;IAAA,OAC/BA,oBAAoB,CAAC;MACnBC,iBAAiB,EAAE;IACrB,CAAC,CAAC;EAAA;AACN,CAAC,CAAC;AAIF,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAc;EAAA,OAAST,WAAW,EAAe;AAAA;AAE9D,OAAO,IAAMU,cAA+C,GAAGT,WAAW;AAI1E,eAAeG,KAAK"},"metadata":{},"sourceType":"module"}