{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { Button, IconButton, Menu, Text } from \"react-native-paper\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useAppTheme } from \"../../theme\";\nimport { baseStyles } from \"../baseStyle\";\nimport ActivityListItem from \"./comp/ActivityListItem\";\nimport { useAppDispatch, useAppSelector } from \"../../redux/store\";\nimport { isActivityListLoading, selectActivityList } from \"../../redux/features/activityList/slice\";\nimport { listActivityInfoThunk, listMoreActivityInfoThunk } from \"../../redux/features/activityList/thunk\";\nimport { ActivitySortBy, ActivityType } from \"../../lib/activity/activity_pb\";\nimport { useState } from \"react\";\nimport { getNameWithActivityType } from \"../../utils/helpers\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function ActivityList(_ref) {\n  var navigation = _ref.navigation,\n    route = _ref.route;\n  var theme = useAppTheme();\n  var dispatch = useAppDispatch();\n  var _useAppSelector = useAppSelector(selectActivityList),\n    activityList = _useAppSelector.activityList;\n  var isLoading = useAppSelector(isActivityListLoading);\n  var _useState = useState(0),\n    _useState2 = _slicedToArray(_useState, 2),\n    currentOffset = _useState2[0],\n    setCurrentOffset = _useState2[1];\n  var _useState3 = useState(true),\n    _useState4 = _slicedToArray(_useState3, 2),\n    canLoadmore = _useState4[0],\n    setCanLoadmore = _useState4[1];\n  var _useState5 = useState(ActivityType.ACTIVITY_TYPE_UNSPECIFIED),\n    _useState6 = _slicedToArray(_useState5, 2),\n    activityType = _useState6[0],\n    setActivityType = _useState6[1];\n  var _useState7 = useState(false),\n    _useState8 = _slicedToArray(_useState7, 2),\n    visible = _useState8[0],\n    setVisible = _useState8[1];\n  var openActivityTypeMenu = function openActivityTypeMenu() {\n    return setVisible(true);\n  };\n  var closeActivityTypeMenu = function closeActivityTypeMenu() {\n    return setVisible(false);\n  };\n  var fetchListActivity = function () {\n    var _ref2 = _asyncToGenerator(function* (activityType) {\n      var _yield$dispatch$unwra = yield dispatch(listActivityInfoThunk({\n          activityType: activityType,\n          ascending: false,\n          limit: 10,\n          offset: 0,\n          sortBy: ActivitySortBy.ACTIVITY_SORT_BY_END_TIME\n        })).unwrap(),\n        response = _yield$dispatch$unwra.response;\n      if (response) {\n        if (response.activityListList.length >= 10) setCanLoadmore(true);else setCanLoadmore(false);\n      } else setCanLoadmore(false);\n    });\n    return function fetchListActivity(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var fetchMore = function () {\n    var _ref3 = _asyncToGenerator(function* () {\n      var res = yield dispatch(listMoreActivityInfoThunk({\n        activityType: activityType,\n        ascending: false,\n        limit: 10,\n        offset: currentOffset + 10,\n        sortBy: ActivitySortBy.ACTIVITY_SORT_BY_END_TIME\n      }));\n      if (!res.payload.error) {\n        if (currentOffset + 20 > activityList.length) {\n          setCanLoadmore(false);\n        }\n        setCurrentOffset(currentOffset + 10);\n      }\n    });\n    return function fetchMore() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  return _jsx(View, {\n    style: baseStyles(theme).container,\n    children: _jsxs(View, {\n      style: baseStyles(theme).innerWrapper,\n      children: [_jsxs(View, {\n        style: {\n          display: \"flex\",\n          flexDirection: \"row\",\n          justifyContent: \"flex-start\"\n        },\n        children: [_jsxs(Text, {\n          variant: \"bodyLarge\",\n          style: {\n            fontWeight: \"bold\",\n            textAlignVertical: \"center\",\n            color: theme.colors.secondary\n          },\n          children: [\"Activity type:\", \" \", activityType == ActivityType.ACTIVITY_TYPE_UNSPECIFIED ? \"All\" : getNameWithActivityType(activityType)]\n        }), _jsxs(Menu, {\n          visible: visible,\n          onDismiss: closeActivityTypeMenu,\n          anchor: _jsx(IconButton, {\n            icon: \"cog\",\n            iconColor: theme.colors.primary,\n            size: 18,\n            onPress: openActivityTypeMenu\n          }),\n          children: [_jsx(Menu.Item, {\n            onPress: function onPress() {\n              setActivityType(ActivityType.ACTIVITY_TYPE_UNSPECIFIED);\n              fetchListActivity(ActivityType.ACTIVITY_TYPE_UNSPECIFIED);\n              closeActivityTypeMenu();\n            },\n            title: \"All\"\n          }), _jsx(Menu.Item, {\n            onPress: function onPress() {\n              setActivityType(ActivityType.ACTIVITY_TYPE_RUNNING);\n              fetchListActivity(ActivityType.ACTIVITY_TYPE_RUNNING);\n              closeActivityTypeMenu();\n            },\n            title: getNameWithActivityType(ActivityType.ACTIVITY_TYPE_RUNNING)\n          }), _jsx(Menu.Item, {\n            onPress: function onPress() {\n              setActivityType(ActivityType.ACTIVITY_TYPE_CYCLING);\n              fetchListActivity(ActivityType.ACTIVITY_TYPE_CYCLING);\n              closeActivityTypeMenu();\n            },\n            title: getNameWithActivityType(ActivityType.ACTIVITY_TYPE_CYCLING)\n          }), _jsx(Menu.Item, {\n            onPress: function onPress() {\n              setActivityType(ActivityType.ACTIVITY_TYPE_WALKING);\n              fetchListActivity(ActivityType.ACTIVITY_TYPE_WALKING);\n              closeActivityTypeMenu();\n            },\n            title: getNameWithActivityType(ActivityType.ACTIVITY_TYPE_WALKING)\n          })]\n        })]\n      }), _jsxs(ScrollView, {\n        showsVerticalScrollIndicator: false,\n        children: [activityList.map(function (activity) {\n          return _jsx(ActivityListItem, {\n            onPress: function onPress() {\n              return navigation.navigate(\"ActivityDetail\", {\n                activityId: activity.id\n              });\n            },\n            activityInfo: activity\n          }, activity.id);\n        }), _jsx(Button, {\n          style: {\n            marginTop: 10,\n            marginBottom: 60\n          },\n          mode: \"elevated\",\n          onPress: fetchMore,\n          loading: isLoading,\n          disabled: !canLoadmore,\n          children: \"Load more\"\n        })]\n      })]\n    })\n  });\n}\nvar styles = function styles(theme) {\n  return StyleSheet.create({});\n};","map":{"version":3,"names":["Button","IconButton","Menu","Text","useAppTheme","baseStyles","ActivityListItem","useAppDispatch","useAppSelector","isActivityListLoading","selectActivityList","listActivityInfoThunk","listMoreActivityInfoThunk","ActivitySortBy","ActivityType","useState","getNameWithActivityType","ActivityList","navigation","route","theme","dispatch","activityList","isLoading","currentOffset","setCurrentOffset","canLoadmore","setCanLoadmore","ACTIVITY_TYPE_UNSPECIFIED","activityType","setActivityType","visible","setVisible","openActivityTypeMenu","closeActivityTypeMenu","fetchListActivity","ascending","limit","offset","sortBy","ACTIVITY_SORT_BY_END_TIME","unwrap","response","activityListList","length","fetchMore","res","payload","error","container","innerWrapper","display","flexDirection","justifyContent","fontWeight","textAlignVertical","color","colors","secondary","primary","ACTIVITY_TYPE_RUNNING","ACTIVITY_TYPE_CYCLING","ACTIVITY_TYPE_WALKING","map","activity","navigate","activityId","id","marginTop","marginBottom","styles","StyleSheet","create"],"sources":["/home/ngoalong/PhuMinh/HK221/dacn/curent/runtracking/frontend/src/screens/Activity/ActivityList.tsx"],"sourcesContent":["import { Button, Divider, IconButton, Menu, Text } from \"react-native-paper\";\nimport { ScrollView, StyleSheet, View } from \"react-native\";\nimport { NativeStackScreenProps } from \"@react-navigation/native-stack\";\nimport { AppTheme, useAppTheme } from \"../../theme\";\nimport { baseStyles } from \"../baseStyle\";\nimport ActivityListItem from \"./comp/ActivityListItem\";\nimport { RootBaseStackParamList } from \"../../navigators/BaseStack\";\nimport { useAppDispatch, useAppSelector } from \"../../redux/store\";\nimport {\n  isActivityListLoading,\n  selectActivityList,\n} from \"../../redux/features/activityList/slice\";\nimport {\n  listActivityInfoThunk,\n  listMoreActivityInfoThunk,\n} from \"../../redux/features/activityList/thunk\";\nimport { ActivitySortBy, ActivityType } from \"../../lib/activity/activity_pb\";\nimport { useState } from \"react\";\nimport { getNameWithActivityType } from \"../../utils/helpers\";\n\nexport default function ActivityList({\n  navigation,\n  route,\n}: NativeStackScreenProps<RootBaseStackParamList, \"ActivityList\">) {\n  const theme = useAppTheme();\n  const dispatch = useAppDispatch();\n  const { activityList } = useAppSelector(selectActivityList);\n  const isLoading = useAppSelector(isActivityListLoading);\n  const [currentOffset, setCurrentOffset] = useState(0);\n  const [canLoadmore, setCanLoadmore] = useState(true);\n\n  const [activityType, setActivityType] = useState(\n    ActivityType.ACTIVITY_TYPE_UNSPECIFIED\n  );\n  const [visible, setVisible] = useState(false);\n  const openActivityTypeMenu = () => setVisible(true);\n  const closeActivityTypeMenu = () => setVisible(false);\n\n  const fetchListActivity = async (activityType: ActivityType) => {\n    const { response } = await dispatch(\n      listActivityInfoThunk({\n        activityType: activityType,\n        ascending: false,\n        limit: 10,\n        offset: 0,\n        sortBy: ActivitySortBy.ACTIVITY_SORT_BY_END_TIME,\n      })\n    ).unwrap();\n    if (response) {\n      if (response.activityListList.length >= 10) setCanLoadmore(true);\n      else setCanLoadmore(false);\n    } else setCanLoadmore(false);\n  };\n  const fetchMore = async () => {\n    const res: any = await dispatch(\n      listMoreActivityInfoThunk({\n        activityType: activityType,\n        ascending: false,\n        limit: 10,\n        offset: currentOffset + 10,\n        sortBy: ActivitySortBy.ACTIVITY_SORT_BY_END_TIME,\n      })\n    );\n\n    if (!res.payload.error) {\n      if (currentOffset + 20 > activityList.length) {\n        setCanLoadmore(false);\n      }\n      setCurrentOffset(currentOffset + 10);\n    }\n  };\n  return (\n    <View style={baseStyles(theme).container}>\n      <View style={baseStyles(theme).innerWrapper}>\n        <View\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            justifyContent: \"flex-start\",\n          }}\n        >\n          <Text\n            variant=\"bodyLarge\"\n            style={{\n              fontWeight: \"bold\",\n              textAlignVertical: \"center\",\n              color: theme.colors.secondary,\n            }}\n          >\n            Activity type:{\" \"}\n            {activityType == ActivityType.ACTIVITY_TYPE_UNSPECIFIED\n              ? \"All\"\n              : getNameWithActivityType(activityType)}\n          </Text>\n          <Menu\n            visible={visible}\n            onDismiss={closeActivityTypeMenu}\n            anchor={\n              <IconButton\n                icon=\"cog\"\n                iconColor={theme.colors.primary}\n                size={18}\n                onPress={openActivityTypeMenu}\n              />\n            }\n          >\n            <Menu.Item\n              onPress={() => {\n                setActivityType(ActivityType.ACTIVITY_TYPE_UNSPECIFIED);\n                fetchListActivity(ActivityType.ACTIVITY_TYPE_UNSPECIFIED);\n                closeActivityTypeMenu();\n              }}\n              title={\"All\"}\n            />\n            <Menu.Item\n              onPress={() => {\n                setActivityType(ActivityType.ACTIVITY_TYPE_RUNNING);\n                fetchListActivity(ActivityType.ACTIVITY_TYPE_RUNNING);\n                closeActivityTypeMenu();\n              }}\n              title={getNameWithActivityType(\n                ActivityType.ACTIVITY_TYPE_RUNNING\n              )}\n            />\n            <Menu.Item\n              onPress={() => {\n                setActivityType(ActivityType.ACTIVITY_TYPE_CYCLING);\n                fetchListActivity(ActivityType.ACTIVITY_TYPE_CYCLING);\n                closeActivityTypeMenu();\n              }}\n              title={getNameWithActivityType(\n                ActivityType.ACTIVITY_TYPE_CYCLING\n              )}\n            />\n            <Menu.Item\n              onPress={() => {\n                setActivityType(ActivityType.ACTIVITY_TYPE_WALKING);\n                fetchListActivity(ActivityType.ACTIVITY_TYPE_WALKING);\n                closeActivityTypeMenu();\n              }}\n              title={getNameWithActivityType(\n                ActivityType.ACTIVITY_TYPE_WALKING\n              )}\n            />\n          </Menu>\n        </View>\n        <ScrollView showsVerticalScrollIndicator={false}>\n          {activityList.map((activity) => {\n            return (\n              <ActivityListItem\n                key={activity.id}\n                onPress={() =>\n                  navigation.navigate(\"ActivityDetail\", {\n                    activityId: activity.id,\n                  })\n                }\n                activityInfo={activity}\n              />\n            ) \n          })}\n\n          <Button\n            style={{ marginTop: 10, marginBottom: 60 }}\n            mode=\"elevated\"\n            onPress={fetchMore}\n            loading={isLoading}\n            disabled={!canLoadmore}\n          >\n            Load more\n          </Button>\n        </ScrollView>\n      </View>\n    </View>\n  );\n}\n\nconst styles = (theme: AppTheme) => StyleSheet.create({});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}