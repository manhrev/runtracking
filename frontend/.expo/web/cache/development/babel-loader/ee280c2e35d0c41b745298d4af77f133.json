{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"enterTouchDelay\", \"leaveTouchDelay\", \"title\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport * as React from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useInternalTheme } from \"../../core/theming\";\nimport { addEventListener } from \"../../utils/addEventListener\";\nimport Portal from \"../Portal/Portal\";\nimport Text from \"../Typography/Text\";\nimport { getTooltipPosition } from \"./utils\";\nvar Tooltip = function Tooltip(_ref) {\n  var children = _ref.children,\n    _ref$enterTouchDelay = _ref.enterTouchDelay,\n    enterTouchDelay = _ref$enterTouchDelay === void 0 ? 500 : _ref$enterTouchDelay,\n    _ref$leaveTouchDelay = _ref.leaveTouchDelay,\n    leaveTouchDelay = _ref$leaveTouchDelay === void 0 ? 1500 : _ref$leaveTouchDelay,\n    title = _ref.title,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var theme = useInternalTheme();\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    visible = _React$useState2[0],\n    setVisible = _React$useState2[1];\n  var _React$useState3 = React.useState({\n      children: {},\n      tooltip: {},\n      measured: false\n    }),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    measurement = _React$useState4[0],\n    setMeasurement = _React$useState4[1];\n  var showTooltipTimer = React.useRef();\n  var hideTooltipTimer = React.useRef();\n  var childrenWrapperRef = React.useRef();\n  React.useEffect(function () {\n    return function () {\n      if (showTooltipTimer.current) {\n        clearTimeout(showTooltipTimer.current);\n      }\n      if (hideTooltipTimer.current) {\n        clearTimeout(hideTooltipTimer.current);\n      }\n    };\n  }, []);\n  React.useEffect(function () {\n    var subscription = addEventListener(Dimensions, 'change', function () {\n      return setVisible(false);\n    });\n    return function () {\n      return subscription.remove();\n    };\n  }, []);\n  var handleOnLayout = function handleOnLayout(_ref2) {\n    var layout = _ref2.nativeEvent.layout;\n    childrenWrapperRef.current.measure(function (_x, _y, width, height, pageX, pageY) {\n      setMeasurement({\n        children: {\n          pageX: pageX,\n          pageY: pageY,\n          height: height,\n          width: width\n        },\n        tooltip: _objectSpread({}, layout),\n        measured: true\n      });\n    });\n  };\n  var handleTouchStart = function handleTouchStart() {\n    if (hideTooltipTimer.current) {\n      clearTimeout(hideTooltipTimer.current);\n    }\n    showTooltipTimer.current = setTimeout(function () {\n      return setVisible(true);\n    }, enterTouchDelay);\n  };\n  var handleTouchEnd = function handleTouchEnd() {\n    if (showTooltipTimer.current) {\n      clearTimeout(showTooltipTimer.current);\n    }\n    hideTooltipTimer.current = setTimeout(function () {\n      setVisible(false);\n      setMeasurement({\n        children: {},\n        tooltip: {},\n        measured: false\n      });\n    }, leaveTouchDelay);\n  };\n  return React.createElement(React.Fragment, null, visible && React.createElement(Portal, null, React.createElement(View, {\n    onLayout: handleOnLayout,\n    style: [styles.tooltip, _objectSpread(_objectSpread({\n      backgroundColor: theme.isV3 ? theme.colors.onSurface : theme.colors.tooltip\n    }, getTooltipPosition(measurement)), {}, {\n      borderRadius: theme.roundness\n    }, measurement.measured ? styles.visible : styles.hidden)],\n    testID: \"tooltip-container\"\n  }, React.createElement(Text, {\n    accessibilityLiveRegion: \"polite\",\n    numberOfLines: 1,\n    selectable: false,\n    variant: \"labelLarge\",\n    style: {\n      color: theme.colors.surface\n    }\n  }, title))), React.createElement(View, {\n    onTouchStart: handleTouchStart,\n    onTouchEnd: handleTouchEnd,\n    onTouchCancel: handleTouchEnd\n  }, React.cloneElement(children, _objectSpread(_objectSpread({}, rest), {}, {\n    ref: childrenWrapperRef\n  }))));\n};\nvar styles = StyleSheet.create({\n  tooltip: {\n    alignSelf: 'flex-start',\n    justifyContent: 'center',\n    paddingHorizontal: 16,\n    height: 32,\n    maxHeight: 32\n  },\n  visible: {\n    opacity: 1\n  },\n  hidden: {\n    opacity: 0\n  }\n});\nexport default Tooltip;","map":{"version":3,"sources":["Tooltip.tsx"],"names":["React","useInternalTheme","addEventListener","Portal","Text","getTooltipPosition","Tooltip","children","enterTouchDelay","leaveTouchDelay","title","rest","theme","visible","setVisible","useState","measurement","setMeasurement","tooltip","measured","showTooltipTimer","useRef","hideTooltipTimer","childrenWrapperRef","useEffect","current","clearTimeout","subscription","Dimensions","remove","handleOnLayout","nativeEvent","layout","measure","_x","_y","width","height","pageX","pageY","handleTouchStart","setTimeout","handleTouchEnd","styles","backgroundColor","isV3","colors","onSurface","borderRadius","roundness","hidden","color","surface","cloneElement","ref","StyleSheet","create","alignSelf","justifyContent","paddingHorizontal","maxHeight","opacity"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Dimensions, View, LayoutChangeEvent, StyleSheet } from 'react-native';\n\nimport { useInternalTheme } from '../../core/theming';\nimport { addEventListener } from '../../utils/addEventListener';\nimport Portal from '../Portal/Portal';\nimport Text from '../Typography/Text';\nimport { getTooltipPosition, Measurement } from './utils';\n\nexport type Props = {\n  /**\n   * Tooltip reference element. Needs to be able to hold a ref.\n   */\n  children: React.ReactElement;\n  /**\n   * The number of milliseconds a user must touch the element before showing the tooltip.\n   */\n  enterTouchDelay?: number;\n  /**\n   * The number of milliseconds after the user stops touching an element before hiding the tooltip.\n   */\n  leaveTouchDelay?: number;\n  /**\n   * Tooltip title\n   */\n  title: string;\n};\n\n/**\n * Tooltips display informative text when users hover over, focus on, or tap an element.\n *\n * Plain tooltips, when activated, display a text label identifying an element, such as a description of its function. Tooltips should include only short, descriptive text and avoid restating visible UI text.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/TODO.png\" />\n *     <figcaption>TODO</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { IconButton, Tooltip } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Tooltip title=\"Selected Camera\">\n *     <IconButton icon=\"camera\" selected size={24} onPress={() => {}} />\n *   </Tooltip>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Tooltip = ({\n  children,\n  enterTouchDelay = 500,\n  leaveTouchDelay = 1500,\n  title,\n  ...rest\n}: Props) => {\n  const theme = useInternalTheme();\n  const [visible, setVisible] = React.useState(false);\n  const [measurement, setMeasurement] = React.useState({\n    children: {},\n    tooltip: {},\n    measured: false,\n  });\n  const showTooltipTimer = React.useRef<NodeJS.Timeout>();\n  const hideTooltipTimer = React.useRef<NodeJS.Timeout>();\n  const childrenWrapperRef = React.useRef() as React.MutableRefObject<View>;\n\n  React.useEffect(() => {\n    return () => {\n      if (showTooltipTimer.current) {\n        clearTimeout(showTooltipTimer.current);\n      }\n\n      if (hideTooltipTimer.current) {\n        clearTimeout(hideTooltipTimer.current);\n      }\n    };\n  }, []);\n\n  React.useEffect(() => {\n    const subscription = addEventListener(Dimensions, 'change', () =>\n      setVisible(false)\n    );\n\n    return () => subscription.remove();\n  }, []);\n\n  const handleOnLayout = ({ nativeEvent: { layout } }: LayoutChangeEvent) => {\n    childrenWrapperRef.current.measure(\n      (_x, _y, width, height, pageX, pageY) => {\n        setMeasurement({\n          children: { pageX, pageY, height, width },\n          tooltip: { ...layout },\n          measured: true,\n        });\n      }\n    );\n  };\n\n  const handleTouchStart = () => {\n    if (hideTooltipTimer.current) {\n      clearTimeout(hideTooltipTimer.current);\n    }\n\n    showTooltipTimer.current = setTimeout(\n      () => setVisible(true),\n      enterTouchDelay\n    ) as unknown as NodeJS.Timeout;\n  };\n\n  const handleTouchEnd = () => {\n    if (showTooltipTimer.current) {\n      clearTimeout(showTooltipTimer.current);\n    }\n\n    hideTooltipTimer.current = setTimeout(() => {\n      setVisible(false);\n      setMeasurement({ children: {}, tooltip: {}, measured: false });\n    }, leaveTouchDelay) as unknown as NodeJS.Timeout;\n  };\n\n  return (\n    <>\n      {visible && (\n        <Portal>\n          <View\n            onLayout={handleOnLayout}\n            style={[\n              styles.tooltip,\n              {\n                backgroundColor: theme.isV3\n                  ? theme.colors.onSurface\n                  : theme.colors.tooltip,\n                ...getTooltipPosition(measurement as Measurement),\n                borderRadius: theme.roundness,\n                ...(measurement.measured ? styles.visible : styles.hidden),\n              },\n            ]}\n            testID=\"tooltip-container\"\n          >\n            <Text\n              accessibilityLiveRegion=\"polite\"\n              numberOfLines={1}\n              selectable={false}\n              variant=\"labelLarge\"\n              style={{ color: theme.colors.surface }}\n            >\n              {title}\n            </Text>\n          </View>\n        </Portal>\n      )}\n      <View\n        onTouchStart={handleTouchStart}\n        onTouchEnd={handleTouchEnd}\n        onTouchCancel={handleTouchEnd}\n      >\n        {React.cloneElement(children, { ...rest, ref: childrenWrapperRef })}\n      </View>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  tooltip: {\n    alignSelf: 'flex-start',\n    justifyContent: 'center',\n    paddingHorizontal: 16,\n    height: 32,\n    maxHeight: 32,\n  },\n  visible: {\n    opacity: 1,\n  },\n  hidden: {\n    opacity: 0,\n  },\n});\n\nexport default Tooltip;\n"]},"metadata":{},"sourceType":"module"}