{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport { CustomNavBar } from \"../comp/NavBar\";\nimport ActivityDetail from \"../screens/Activity/ActivityDetail\";\nimport ActivityList from \"../screens/Activity/ActivityList\";\nimport AppSetting from \"../screens/Profile/AppSetting\";\nimport ProfileSetting from \"../screens/Profile/ProfileSetting\";\nimport HomeTabs from \"./HomeTab\";\nimport Login from \"../screens/Authentication/Login\";\nimport Signup from \"../screens/Authentication/Signup\";\nimport Intro from \"../screens/Authentication/Intro\";\nimport GetInfo from \"../screens/Authentication/GetInfo\";\nimport RunResult from \"../screens/Run/RunResult\";\nimport { notificationClient } from \"../utils/grpc\";\nimport * as Device from 'expo-device';\nimport * as Notifications from 'expo-notifications';\nimport { useAppDispatch, useAppSelector } from \"../redux/store\";\nimport { selectUserSlice } from \"../redux/features/user/slice\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { getMeThunk } from \"../redux/features/user/thunk\";\nimport ComingSoon from \"../screens/ComingSoon\";\nimport { SaveExpoPushTokenRequest } from \"../lib/notification/notification_pb\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createNativeStackNavigator();\nexport var BaseStack = function BaseStack() {\n  var dispatch = useAppDispatch();\n  var _useAppSelector = useAppSelector(selectUserSlice),\n    isSignedIn = _useAppSelector.isSignedIn;\n  var _useState = useState(),\n    _useState2 = _slicedToArray(_useState, 2),\n    notification = _useState2[0],\n    setNotification = _useState2[1];\n  var notificationListener = useRef();\n  var responseListener = useRef();\n  function registerForPushNotificationsAsync() {\n    return _registerForPushNotificationsAsync.apply(this, arguments);\n  }\n  function _registerForPushNotificationsAsync() {\n    _registerForPushNotificationsAsync = _asyncToGenerator(function* () {\n      var token;\n      if (Platform.OS === 'android') {\n        yield Notifications.setNotificationChannelAsync('default', {\n          name: 'default',\n          importance: Notifications.AndroidImportance.MAX,\n          vibrationPattern: [0, 250, 250, 250],\n          lightColor: '#FF231F7C'\n        });\n      }\n      if (Device.isDevice) {\n        var _yield$Notifications$ = yield Notifications.getPermissionsAsync(),\n          existingStatus = _yield$Notifications$.status;\n        var finalStatus = existingStatus;\n        if (existingStatus !== 'granted') {\n          var _yield$Notifications$2 = yield Notifications.requestPermissionsAsync(),\n            status = _yield$Notifications$2.status;\n          finalStatus = status;\n        }\n        if (finalStatus !== 'granted') {\n          alert('Failed to get push token for push notification!');\n          return;\n        }\n        token = (yield Notifications.getExpoPushTokenAsync()).data;\n        console.log(token);\n      } else {\n        alert('Must use physical device for Push Notifications');\n      }\n      return token;\n    });\n    return _registerForPushNotificationsAsync.apply(this, arguments);\n  }\n  var getMe = function () {\n    var _ref = _asyncToGenerator(function* () {\n      var _yield$dispatch$unwra = yield dispatch(getMeThunk()).unwrap(),\n        response = _yield$dispatch$unwra.response,\n        error = _yield$dispatch$unwra.error;\n      if (error) {\n        alert(\"Un authenticated!\");\n      } else {\n        var expoPushToken = yield registerForPushNotificationsAsync();\n        var req = new SaveExpoPushTokenRequest();\n        if (expoPushToken != undefined) req.setExpoPushToken(expoPushToken);\n        if (response != null && response.user != undefined && response.user.userId != undefined) req.setUserId(response.user.userId);\n        yield notificationClient.checkIfExistOrSaveExpoPushToken(req.toObject());\n      }\n    });\n    return function getMe() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  useEffect(function () {\n    getMe();\n    notificationListener.current = Notifications.addNotificationReceivedListener(function (notification) {\n      setNotification(notification);\n    });\n    responseListener.current = Notifications.addNotificationResponseReceivedListener(function (response) {\n      console.log(response);\n    });\n    return function () {};\n  }, []);\n  return _jsx(Stack.Navigator, {\n    screenOptions: {\n      header: CustomNavBar\n    },\n    children: isSignedIn ? _jsxs(_Fragment, {\n      children: [_jsx(Stack.Screen, {\n        name: \"HomeTabs\",\n        component: HomeTabs,\n        options: {\n          headerShown: false\n        }\n      }), _jsx(Stack.Screen, {\n        name: \"ActivityList\",\n        options: {\n          title: \"All activities\",\n          headerBackVisible: true\n        },\n        component: ActivityList\n      }), _jsx(Stack.Screen, {\n        name: \"ActivityDetail\",\n        options: {\n          title: \"Detail\",\n          headerBackVisible: true\n        },\n        component: ActivityDetail\n      }), _jsx(Stack.Screen, {\n        name: \"RunResult\",\n        options: {\n          title: \"Run Result\",\n          headerBackVisible: true\n        },\n        component: RunResult\n      }), _jsx(Stack.Screen, {\n        name: \"AppSetting\",\n        options: {\n          title: \"Settings\",\n          headerBackVisible: true\n        },\n        component: AppSetting\n      }), _jsx(Stack.Screen, {\n        name: \"ProfileSetting\",\n        options: {\n          title: \"Profile settings\",\n          headerBackVisible: true\n        },\n        component: ProfileSetting\n      }), _jsx(Stack.Screen, {\n        name: \"NotificationList\",\n        options: {\n          title: \"Notifications\",\n          headerBackVisible: true\n        },\n        component: ComingSoon\n      })]\n    }) : _jsxs(_Fragment, {\n      children: [_jsx(Stack.Screen, {\n        name: \"Intro\",\n        options: {\n          title: \"Intro\",\n          headerShown: false\n        },\n        component: Intro\n      }), _jsx(Stack.Screen, {\n        name: \"Login\",\n        options: {\n          title: \"Login\",\n          headerShown: false\n        },\n        component: Login\n      }), _jsx(Stack.Screen, {\n        name: \"Signup\",\n        options: {\n          title: \"Create new account\",\n          headerShown: false\n        },\n        component: Signup\n      }), _jsx(Stack.Screen, {\n        name: \"GetInfo\",\n        options: {\n          title: \"Info\",\n          headerShown: false\n        },\n        component: GetInfo\n      })]\n    })\n  });\n};","map":{"version":3,"names":["createNativeStackNavigator","CustomNavBar","ActivityDetail","ActivityList","AppSetting","ProfileSetting","HomeTabs","Login","Signup","Intro","GetInfo","RunResult","notificationClient","Device","Notifications","useAppDispatch","useAppSelector","selectUserSlice","useEffect","useRef","useState","getMeThunk","ComingSoon","SaveExpoPushTokenRequest","Stack","BaseStack","dispatch","isSignedIn","notification","setNotification","notificationListener","responseListener","registerForPushNotificationsAsync","token","Platform","OS","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor","isDevice","getPermissionsAsync","existingStatus","status","finalStatus","requestPermissionsAsync","alert","getExpoPushTokenAsync","data","console","log","getMe","unwrap","response","error","expoPushToken","req","undefined","setExpoPushToken","user","userId","setUserId","checkIfExistOrSaveExpoPushToken","toObject","current","addNotificationReceivedListener","addNotificationResponseReceivedListener","header","headerShown","title","headerBackVisible"],"sources":["/home/ngoalong/PhuMinh/HK221/dacn/curent/runtracking/frontend/src/navigators/BaseStack.tsx"],"sourcesContent":["import { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport ExampleScreen from \"../screens/ExampleScreen\";\nimport { CustomNavBar } from \"../comp/NavBar\";\nimport ActivityDetail from \"../screens/Activity/ActivityDetail\";\nimport ActivityList from \"../screens/Activity/ActivityList\";\nimport AppSetting from \"../screens/Profile/AppSetting\";\nimport ProfileSetting from \"../screens/Profile/ProfileSetting\";\nimport HomeTabs from \"./HomeTab\";\nimport Login from \"../screens/Authentication/Login\";\nimport Signup from \"../screens/Authentication/Signup\";\nimport Intro from \"../screens/Authentication/Intro\";\nimport GetInfo from \"../screens/Authentication/GetInfo\";\nimport RunResult from \"../screens/Run/RunResult\";\nimport RunHome from \"../screens/Run/RunHome\";\nimport { notificationClient } from \"../utils/grpc\";\nimport * as Device from 'expo-device';\nimport * as Notifications from 'expo-notifications';\nimport { Subscription } from 'expo-modules-core';\nimport * as google_protobuf_timestamp_pb from \"google-protobuf/google/protobuf/timestamp_pb\";\nimport {\n  CreateActivityInfoRequest,\n  CreateActivityInfoReply,\n  ActivityInfo,\n  TrackPoint,\n} from \"../lib/activity/activity_pb\";\nimport { useAppDispatch, useAppSelector } from \"../redux/store\";\nimport {\n  isUserSliceLoading,\n  selectUserSlice,\n} from \"../redux/features/user/slice\";\nimport { View, Platform  } from \"react-native\";\nimport { Text } from \"react-native-paper\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { getMeThunk } from \"../redux/features/user/thunk\";\nimport ComingSoon from \"../screens/ComingSoon\";\nimport { SaveExpoPushTokenRequest } from \"../lib/notification/notification_pb\";\n\nexport type RootBaseStackParamList = {\n  // Home tabs\n  HomeTabs: undefined;\n\n  // Activity\n  ActivityDetail: {\n    activityId: number;\n  };\n  ActivityList: {};\n\n  // Run\n  RunResult: {\n    display: {\n      distance: string;\n      time: string;\n      pace: string;\n      kcal: string;\n    };\n    savingInfo: {\n      duration: number;\n      kcal: number;\n      totalDistance: number;\n      routeList: Array<TrackPoint.AsObject>;\n      startTime: google_protobuf_timestamp_pb.Timestamp.AsObject;\n      endTime: google_protobuf_timestamp_pb.Timestamp.AsObject;\n    };\n    // pass function to reset\n    resetRunInfo: () => void;\n  };\n\n  // Profile\n  ProfileSetting: undefined;\n  AppSetting: undefined;\n\n  // Notification\n  NotificationList: undefined;\n\n  // Auth\n  Login: undefined;\n  Signup: undefined;\n  Intro: undefined;\n  GetInfo: undefined;\n};\n\nconst Stack = createNativeStackNavigator<RootBaseStackParamList>();\n\nexport const BaseStack = () => {\n  const dispatch = useAppDispatch();\n  // const loading = useAppSelector(isUserSliceLoading);\n  const { isSignedIn } = useAppSelector(selectUserSlice);\n  \n  const [notification, setNotification] = useState<Notifications.Notification>();\n  const notificationListener = useRef<Subscription>();                  \n  const responseListener =useRef<Subscription>();\n\n  async function registerForPushNotificationsAsync() {\n    let token;\n  \n    if (Platform.OS === 'android') {\n      await Notifications.setNotificationChannelAsync('default', {\n        name: 'default',\n        importance: Notifications.AndroidImportance.MAX,\n        vibrationPattern: [0, 250, 250, 250],\n        lightColor: '#FF231F7C',\n      });\n    }\n  \n    if (Device.isDevice) {\n      const { status: existingStatus } = await Notifications.getPermissionsAsync();\n      let finalStatus = existingStatus;\n      if (existingStatus !== 'granted') {\n        const { status } = await Notifications.requestPermissionsAsync();\n        finalStatus = status;\n      }\n      if (finalStatus !== 'granted') {\n        alert('Failed to get push token for push notification!');\n        return;\n      }\n      token = (await Notifications.getExpoPushTokenAsync()).data;\n      console.log(token);\n    } else {\n      alert('Must use physical device for Push Notifications');\n    }\n  \n    return token;\n  }\n\n  const getMe = async () => {\n    const { response ,error } = await dispatch(getMeThunk()).unwrap();\n    if (error) {\n      alert(\"Un authenticated!\");\n    }\n    else{\n        let expoPushToken = await registerForPushNotificationsAsync()\n        let req = new SaveExpoPushTokenRequest()\n        if(expoPushToken != undefined) req.setExpoPushToken(expoPushToken)\n        if(response != null && response.user != undefined && response.user.userId != undefined) req.setUserId(response.user.userId)\n        await notificationClient.checkIfExistOrSaveExpoPushToken(req.toObject())\n    }\n  };\n\n  useEffect(() => {\n    getMe();\n    notificationListener.current = Notifications.addNotificationReceivedListener(notification => {\n      setNotification(notification);\n    });\n\n    responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {\n      console.log(response);\n    });\n\n    return () => {\n      // Notifications.removeNotificationSubscription(notificationListener.current);\n      // Notifications.removeNotificationSubscription(responseListener.current);\n    };\n  }, []);\n\n  // if (loading) {\n  //   return (\n  //     <View>\n  //       <Text>Loading</Text>\n  //     </View>\n  //   );\n  // }\n\n  return (\n    <Stack.Navigator screenOptions={{ header: CustomNavBar }}>\n      {isSignedIn ? (\n        <>\n          <Stack.Screen\n            name=\"HomeTabs\"\n            component={HomeTabs}\n            options={{ headerShown: false }}\n          />\n          <Stack.Screen\n            name=\"ActivityList\"\n            options={{\n              title: \"All activities\",\n              headerBackVisible: true,\n            }}\n            component={ActivityList}\n          />\n          <Stack.Screen\n            name=\"ActivityDetail\"\n            options={{\n              title: \"Detail\",\n              headerBackVisible: true,\n            }}\n            component={ActivityDetail}\n          />\n          <Stack.Screen\n            name=\"RunResult\"\n            options={{\n              title: \"Run Result\",\n              headerBackVisible: true,\n            }}\n            component={RunResult}\n          />\n          <Stack.Screen\n            name=\"AppSetting\"\n            options={{\n              title: \"Settings\",\n              headerBackVisible: true,\n            }}\n            component={AppSetting}\n          />\n          <Stack.Screen\n            name=\"ProfileSetting\"\n            options={{\n              title: \"Profile settings\",\n              headerBackVisible: true,\n            }}\n            component={ProfileSetting}\n          />\n          <Stack.Screen\n            name=\"NotificationList\"\n            options={{\n              title: \"Notifications\",\n              headerBackVisible: true,\n            }}\n            component={ComingSoon}\n          />\n        </>\n      ) : (\n        <>\n          <Stack.Screen\n            name=\"Intro\"\n            options={{\n              title: \"Intro\",\n              headerShown: false,\n            }}\n            component={Intro}\n          />\n          <Stack.Screen\n            name=\"Login\"\n            options={{\n              title: \"Login\",\n              headerShown: false,\n            }}\n            component={Login}\n          />\n          <Stack.Screen\n            name=\"Signup\"\n            options={{\n              title: \"Create new account\",\n              headerShown: false,\n            }}\n            component={Signup}\n          />\n          <Stack.Screen\n            name=\"GetInfo\"\n            options={{\n              title: \"Info\",\n              headerShown: false,\n            }}\n            component={GetInfo}\n          />\n        </>\n      )}\n    </Stack.Navigator>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}